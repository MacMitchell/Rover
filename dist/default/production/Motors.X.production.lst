

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Mar 28 10:47:27 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F18855
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Generated 21/06/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F18855 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     0008                     	;# 
    79     0009                     	;# 
    80     000A                     	;# 
    81     000B                     	;# 
    82     000C                     	;# 
    83     000D                     	;# 
    84     000E                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0013                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     001C                     	;# 
    93     001C                     	;# 
    94     001D                     	;# 
    95     001D                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     008C                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     008E                     	;# 
   103     008F                     	;# 
   104     0090                     	;# 
   105     0090                     	;# 
   106     0091                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0095                     	;# 
   110     0096                     	;# 
   111     0097                     	;# 
   112     0098                     	;# 
   113     0099                     	;# 
   114     009A                     	;# 
   115     009B                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     010C                     	;# 
   120     010D                     	;# 
   121     010E                     	;# 
   122     010E                     	;# 
   123     010F                     	;# 
   124     0110                     	;# 
   125     0110                     	;# 
   126     0111                     	;# 
   127     0112                     	;# 
   128     0112                     	;# 
   129     0113                     	;# 
   130     0114                     	;# 
   131     0114                     	;# 
   132     0115                     	;# 
   133     0116                     	;# 
   134     0116                     	;# 
   135     0117                     	;# 
   136     0119                     	;# 
   137     0119                     	;# 
   138     0119                     	;# 
   139     011A                     	;# 
   140     011A                     	;# 
   141     011A                     	;# 
   142     011B                     	;# 
   143     011B                     	;# 
   144     011B                     	;# 
   145     011B                     	;# 
   146     011B                     	;# 
   147     011C                     	;# 
   148     011C                     	;# 
   149     011C                     	;# 
   150     011D                     	;# 
   151     011D                     	;# 
   152     011D                     	;# 
   153     011E                     	;# 
   154     011E                     	;# 
   155     011E                     	;# 
   156     011F                     	;# 
   157     011F                     	;# 
   158     011F                     	;# 
   159     011F                     	;# 
   160     011F                     	;# 
   161     018C                     	;# 
   162     018D                     	;# 
   163     018E                     	;# 
   164     018F                     	;# 
   165     0190                     	;# 
   166     0191                     	;# 
   167     0192                     	;# 
   168     0196                     	;# 
   169     0197                     	;# 
   170     0198                     	;# 
   171     0199                     	;# 
   172     019A                     	;# 
   173     019B                     	;# 
   174     019C                     	;# 
   175     020C                     	;# 
   176     020C                     	;# 
   177     020D                     	;# 
   178     020E                     	;# 
   179     020F                     	;# 
   180     020F                     	;# 
   181     0210                     	;# 
   182     0210                     	;# 
   183     0211                     	;# 
   184     0211                     	;# 
   185     0212                     	;# 
   186     0212                     	;# 
   187     0213                     	;# 
   188     0214                     	;# 
   189     0215                     	;# 
   190     0215                     	;# 
   191     0216                     	;# 
   192     0216                     	;# 
   193     0217                     	;# 
   194     0217                     	;# 
   195     0218                     	;# 
   196     0218                     	;# 
   197     0219                     	;# 
   198     021A                     	;# 
   199     021B                     	;# 
   200     021B                     	;# 
   201     021C                     	;# 
   202     021C                     	;# 
   203     021D                     	;# 
   204     021D                     	;# 
   205     021E                     	;# 
   206     021F                     	;# 
   207     028C                     	;# 
   208     028C                     	;# 
   209     028D                     	;# 
   210     028D                     	;# 
   211     028E                     	;# 
   212     028F                     	;# 
   213     0290                     	;# 
   214     0290                     	;# 
   215     0291                     	;# 
   216     0292                     	;# 
   217     0292                     	;# 
   218     0293                     	;# 
   219     0293                     	;# 
   220     0294                     	;# 
   221     0295                     	;# 
   222     0296                     	;# 
   223     0296                     	;# 
   224     0297                     	;# 
   225     0298                     	;# 
   226     0298                     	;# 
   227     0299                     	;# 
   228     0299                     	;# 
   229     029A                     	;# 
   230     029B                     	;# 
   231     029C                     	;# 
   232     029C                     	;# 
   233     029D                     	;# 
   234     030C                     	;# 
   235     030C                     	;# 
   236     030D                     	;# 
   237     030E                     	;# 
   238     030F                     	;# 
   239     0310                     	;# 
   240     0310                     	;# 
   241     0311                     	;# 
   242     0312                     	;# 
   243     0313                     	;# 
   244     0314                     	;# 
   245     0314                     	;# 
   246     0315                     	;# 
   247     0316                     	;# 
   248     0317                     	;# 
   249     0318                     	;# 
   250     0318                     	;# 
   251     0319                     	;# 
   252     031A                     	;# 
   253     031B                     	;# 
   254     031C                     	;# 
   255     031C                     	;# 
   256     031D                     	;# 
   257     031E                     	;# 
   258     031F                     	;# 
   259     038C                     	;# 
   260     038C                     	;# 
   261     038D                     	;# 
   262     038E                     	;# 
   263     0390                     	;# 
   264     0390                     	;# 
   265     0391                     	;# 
   266     0392                     	;# 
   267     040C                     	;# 
   268     040D                     	;# 
   269     040E                     	;# 
   270     040F                     	;# 
   271     0410                     	;# 
   272     0411                     	;# 
   273     0416                     	;# 
   274     0416                     	;# 
   275     0417                     	;# 
   276     0418                     	;# 
   277     0418                     	;# 
   278     0419                     	;# 
   279     041A                     	;# 
   280     041A                     	;# 
   281     041B                     	;# 
   282     041C                     	;# 
   283     041C                     	;# 
   284     041D                     	;# 
   285     041E                     	;# 
   286     041F                     	;# 
   287     048C                     	;# 
   288     048C                     	;# 
   289     048D                     	;# 
   290     048E                     	;# 
   291     048F                     	;# 
   292     048F                     	;# 
   293     0490                     	;# 
   294     0491                     	;# 
   295     0492                     	;# 
   296     0492                     	;# 
   297     0493                     	;# 
   298     0494                     	;# 
   299     0495                     	;# 
   300     0495                     	;# 
   301     0496                     	;# 
   302     0497                     	;# 
   303     0498                     	;# 
   304     0499                     	;# 
   305     049A                     	;# 
   306     049B                     	;# 
   307     049C                     	;# 
   308     049D                     	;# 
   309     050C                     	;# 
   310     050C                     	;# 
   311     050D                     	;# 
   312     050E                     	;# 
   313     050F                     	;# 
   314     050F                     	;# 
   315     0510                     	;# 
   316     0511                     	;# 
   317     0512                     	;# 
   318     0512                     	;# 
   319     0513                     	;# 
   320     0514                     	;# 
   321     0515                     	;# 
   322     0515                     	;# 
   323     0516                     	;# 
   324     0517                     	;# 
   325     0518                     	;# 
   326     0519                     	;# 
   327     051A                     	;# 
   328     051B                     	;# 
   329     051C                     	;# 
   330     051D                     	;# 
   331     058C                     	;# 
   332     058C                     	;# 
   333     058D                     	;# 
   334     058E                     	;# 
   335     058F                     	;# 
   336     058F                     	;# 
   337     0590                     	;# 
   338     0591                     	;# 
   339     0592                     	;# 
   340     0593                     	;# 
   341     060C                     	;# 
   342     060D                     	;# 
   343     060E                     	;# 
   344     060F                     	;# 
   345     0610                     	;# 
   346     0611                     	;# 
   347     0612                     	;# 
   348     0613                     	;# 
   349     0614                     	;# 
   350     0616                     	;# 
   351     0617                     	;# 
   352     0618                     	;# 
   353     0619                     	;# 
   354     061A                     	;# 
   355     061B                     	;# 
   356     061C                     	;# 
   357     061D                     	;# 
   358     061E                     	;# 
   359     068C                     	;# 
   360     068D                     	;# 
   361     068E                     	;# 
   362     068F                     	;# 
   363     0690                     	;# 
   364     0691                     	;# 
   365     0692                     	;# 
   366     0693                     	;# 
   367     0694                     	;# 
   368     070C                     	;# 
   369     070D                     	;# 
   370     070E                     	;# 
   371     070F                     	;# 
   372     0710                     	;# 
   373     0711                     	;# 
   374     0712                     	;# 
   375     0713                     	;# 
   376     0714                     	;# 
   377     0716                     	;# 
   378     0717                     	;# 
   379     0718                     	;# 
   380     0719                     	;# 
   381     071A                     	;# 
   382     071B                     	;# 
   383     071C                     	;# 
   384     071D                     	;# 
   385     071E                     	;# 
   386     0796                     	;# 
   387     0797                     	;# 
   388     0798                     	;# 
   389     0799                     	;# 
   390     079A                     	;# 
   391     079B                     	;# 
   392     080C                     	;# 
   393     080D                     	;# 
   394     080E                     	;# 
   395     080F                     	;# 
   396     0810                     	;# 
   397     0811                     	;# 
   398     0812                     	;# 
   399     0813                     	;# 
   400     0814                     	;# 
   401     081A                     	;# 
   402     081B                     	;# 
   403     081C                     	;# 
   404     081D                     	;# 
   405     081E                     	;# 
   406     081F                     	;# 
   407     088C                     	;# 
   408     088D                     	;# 
   409     088E                     	;# 
   410     088F                     	;# 
   411     0890                     	;# 
   412     0891                     	;# 
   413     0892                     	;# 
   414     0893                     	;# 
   415     0895                     	;# 
   416     0896                     	;# 
   417     0897                     	;# 
   418     0898                     	;# 
   419     0899                     	;# 
   420     089A                     	;# 
   421     089B                     	;# 
   422     090C                     	;# 
   423     090E                     	;# 
   424     090F                     	;# 
   425     091F                     	;# 
   426     091F                     	;# 
   427     098F                     	;# 
   428     098F                     	;# 
   429     0990                     	;# 
   430     0991                     	;# 
   431     0992                     	;# 
   432     0993                     	;# 
   433     0994                     	;# 
   434     0995                     	;# 
   435     0996                     	;# 
   436     0997                     	;# 
   437     0E0F                     	;# 
   438     0E10                     	;# 
   439     0E11                     	;# 
   440     0E12                     	;# 
   441     0E13                     	;# 
   442     0E14                     	;# 
   443     0E15                     	;# 
   444     0E16                     	;# 
   445     0E17                     	;# 
   446     0E18                     	;# 
   447     0E19                     	;# 
   448     0E1A                     	;# 
   449     0E1B                     	;# 
   450     0E1C                     	;# 
   451     0E1D                     	;# 
   452     0E1E                     	;# 
   453     0E1F                     	;# 
   454     0E20                     	;# 
   455     0E21                     	;# 
   456     0E22                     	;# 
   457     0E23                     	;# 
   458     0E24                     	;# 
   459     0E25                     	;# 
   460     0E26                     	;# 
   461     0E27                     	;# 
   462     0E28                     	;# 
   463     0E29                     	;# 
   464     0E2A                     	;# 
   465     0E2B                     	;# 
   466     0E2C                     	;# 
   467     0E2D                     	;# 
   468     0E2E                     	;# 
   469     0E2F                     	;# 
   470     0E30                     	;# 
   471     0E31                     	;# 
   472     0E32                     	;# 
   473     0E33                     	;# 
   474     0E34                     	;# 
   475     0E35                     	;# 
   476     0E36                     	;# 
   477     0E37                     	;# 
   478     0E8F                     	;# 
   479     0E90                     	;# 
   480     0E91                     	;# 
   481     0E92                     	;# 
   482     0E93                     	;# 
   483     0E94                     	;# 
   484     0E95                     	;# 
   485     0E96                     	;# 
   486     0E97                     	;# 
   487     0E9C                     	;# 
   488     0E9D                     	;# 
   489     0E9E                     	;# 
   490     0EA1                     	;# 
   491     0EA2                     	;# 
   492     0EA3                     	;# 
   493     0EA4                     	;# 
   494     0EA5                     	;# 
   495     0EA9                     	;# 
   496     0EAA                     	;# 
   497     0EAB                     	;# 
   498     0EAC                     	;# 
   499     0EB1                     	;# 
   500     0EB2                     	;# 
   501     0EB3                     	;# 
   502     0EB8                     	;# 
   503     0EB9                     	;# 
   504     0EBA                     	;# 
   505     0EBB                     	;# 
   506     0EBC                     	;# 
   507     0EBD                     	;# 
   508     0EBE                     	;# 
   509     0EC3                     	;# 
   510     0EC5                     	;# 
   511     0EC6                     	;# 
   512     0EC7                     	;# 
   513     0EC8                     	;# 
   514     0EC9                     	;# 
   515     0ECA                     	;# 
   516     0ECB                     	;# 
   517     0ECC                     	;# 
   518     0F10                     	;# 
   519     0F11                     	;# 
   520     0F12                     	;# 
   521     0F13                     	;# 
   522     0F14                     	;# 
   523     0F15                     	;# 
   524     0F16                     	;# 
   525     0F17                     	;# 
   526     0F18                     	;# 
   527     0F19                     	;# 
   528     0F1A                     	;# 
   529     0F1B                     	;# 
   530     0F1C                     	;# 
   531     0F1D                     	;# 
   532     0F1E                     	;# 
   533     0F1F                     	;# 
   534     0F20                     	;# 
   535     0F21                     	;# 
   536     0F22                     	;# 
   537     0F23                     	;# 
   538     0F24                     	;# 
   539     0F25                     	;# 
   540     0F26                     	;# 
   541     0F27                     	;# 
   542     0F38                     	;# 
   543     0F39                     	;# 
   544     0F3A                     	;# 
   545     0F3B                     	;# 
   546     0F3C                     	;# 
   547     0F3D                     	;# 
   548     0F3E                     	;# 
   549     0F3F                     	;# 
   550     0F40                     	;# 
   551     0F41                     	;# 
   552     0F43                     	;# 
   553     0F44                     	;# 
   554     0F45                     	;# 
   555     0F46                     	;# 
   556     0F47                     	;# 
   557     0F48                     	;# 
   558     0F49                     	;# 
   559     0F4A                     	;# 
   560     0F4B                     	;# 
   561     0F4C                     	;# 
   562     0F4E                     	;# 
   563     0F4F                     	;# 
   564     0F50                     	;# 
   565     0F51                     	;# 
   566     0F52                     	;# 
   567     0F53                     	;# 
   568     0F54                     	;# 
   569     0F55                     	;# 
   570     0F56                     	;# 
   571     0F57                     	;# 
   572     0F65                     	;# 
   573     0F68                     	;# 
   574     0F69                     	;# 
   575     0F6A                     	;# 
   576     0F6B                     	;# 
   577     0FE4                     	;# 
   578     0FE5                     	;# 
   579     0FE6                     	;# 
   580     0FE7                     	;# 
   581     0FE8                     	;# 
   582     0FE9                     	;# 
   583     0FEA                     	;# 
   584     0FEB                     	;# 
   585     0FED                     	;# 
   586     0FEE                     	;# 
   587     0FEF                     	;# 
   588     0000                     	;# 
   589     0001                     	;# 
   590     0002                     	;# 
   591     0003                     	;# 
   592     0004                     	;# 
   593     0005                     	;# 
   594     0006                     	;# 
   595     0007                     	;# 
   596     0008                     	;# 
   597     0009                     	;# 
   598     000A                     	;# 
   599     000B                     	;# 
   600     000C                     	;# 
   601     000D                     	;# 
   602     000E                     	;# 
   603     0010                     	;# 
   604     0011                     	;# 
   605     0012                     	;# 
   606     0013                     	;# 
   607     0016                     	;# 
   608     0017                     	;# 
   609     0018                     	;# 
   610     001C                     	;# 
   611     001C                     	;# 
   612     001D                     	;# 
   613     001D                     	;# 
   614     001E                     	;# 
   615     001F                     	;# 
   616     008C                     	;# 
   617     008C                     	;# 
   618     008D                     	;# 
   619     008E                     	;# 
   620     008E                     	;# 
   621     008F                     	;# 
   622     0090                     	;# 
   623     0090                     	;# 
   624     0091                     	;# 
   625     0093                     	;# 
   626     0094                     	;# 
   627     0095                     	;# 
   628     0096                     	;# 
   629     0097                     	;# 
   630     0098                     	;# 
   631     0099                     	;# 
   632     009A                     	;# 
   633     009B                     	;# 
   634     009C                     	;# 
   635     009D                     	;# 
   636     009E                     	;# 
   637     010C                     	;# 
   638     010D                     	;# 
   639     010E                     	;# 
   640     010E                     	;# 
   641     010F                     	;# 
   642     0110                     	;# 
   643     0110                     	;# 
   644     0111                     	;# 
   645     0112                     	;# 
   646     0112                     	;# 
   647     0113                     	;# 
   648     0114                     	;# 
   649     0114                     	;# 
   650     0115                     	;# 
   651     0116                     	;# 
   652     0116                     	;# 
   653     0117                     	;# 
   654     0119                     	;# 
   655     0119                     	;# 
   656     0119                     	;# 
   657     011A                     	;# 
   658     011A                     	;# 
   659     011A                     	;# 
   660     011B                     	;# 
   661     011B                     	;# 
   662     011B                     	;# 
   663     011B                     	;# 
   664     011B                     	;# 
   665     011C                     	;# 
   666     011C                     	;# 
   667     011C                     	;# 
   668     011D                     	;# 
   669     011D                     	;# 
   670     011D                     	;# 
   671     011E                     	;# 
   672     011E                     	;# 
   673     011E                     	;# 
   674     011F                     	;# 
   675     011F                     	;# 
   676     011F                     	;# 
   677     011F                     	;# 
   678     011F                     	;# 
   679     018C                     	;# 
   680     018D                     	;# 
   681     018E                     	;# 
   682     018F                     	;# 
   683     0190                     	;# 
   684     0191                     	;# 
   685     0192                     	;# 
   686     0196                     	;# 
   687     0197                     	;# 
   688     0198                     	;# 
   689     0199                     	;# 
   690     019A                     	;# 
   691     019B                     	;# 
   692     019C                     	;# 
   693     020C                     	;# 
   694     020C                     	;# 
   695     020D                     	;# 
   696     020E                     	;# 
   697     020F                     	;# 
   698     020F                     	;# 
   699     0210                     	;# 
   700     0210                     	;# 
   701     0211                     	;# 
   702     0211                     	;# 
   703     0212                     	;# 
   704     0212                     	;# 
   705     0213                     	;# 
   706     0214                     	;# 
   707     0215                     	;# 
   708     0215                     	;# 
   709     0216                     	;# 
   710     0216                     	;# 
   711     0217                     	;# 
   712     0217                     	;# 
   713     0218                     	;# 
   714     0218                     	;# 
   715     0219                     	;# 
   716     021A                     	;# 
   717     021B                     	;# 
   718     021B                     	;# 
   719     021C                     	;# 
   720     021C                     	;# 
   721     021D                     	;# 
   722     021D                     	;# 
   723     021E                     	;# 
   724     021F                     	;# 
   725     028C                     	;# 
   726     028C                     	;# 
   727     028D                     	;# 
   728     028D                     	;# 
   729     028E                     	;# 
   730     028F                     	;# 
   731     0290                     	;# 
   732     0290                     	;# 
   733     0291                     	;# 
   734     0292                     	;# 
   735     0292                     	;# 
   736     0293                     	;# 
   737     0293                     	;# 
   738     0294                     	;# 
   739     0295                     	;# 
   740     0296                     	;# 
   741     0296                     	;# 
   742     0297                     	;# 
   743     0298                     	;# 
   744     0298                     	;# 
   745     0299                     	;# 
   746     0299                     	;# 
   747     029A                     	;# 
   748     029B                     	;# 
   749     029C                     	;# 
   750     029C                     	;# 
   751     029D                     	;# 
   752     030C                     	;# 
   753     030C                     	;# 
   754     030D                     	;# 
   755     030E                     	;# 
   756     030F                     	;# 
   757     0310                     	;# 
   758     0310                     	;# 
   759     0311                     	;# 
   760     0312                     	;# 
   761     0313                     	;# 
   762     0314                     	;# 
   763     0314                     	;# 
   764     0315                     	;# 
   765     0316                     	;# 
   766     0317                     	;# 
   767     0318                     	;# 
   768     0318                     	;# 
   769     0319                     	;# 
   770     031A                     	;# 
   771     031B                     	;# 
   772     031C                     	;# 
   773     031C                     	;# 
   774     031D                     	;# 
   775     031E                     	;# 
   776     031F                     	;# 
   777     038C                     	;# 
   778     038C                     	;# 
   779     038D                     	;# 
   780     038E                     	;# 
   781     0390                     	;# 
   782     0390                     	;# 
   783     0391                     	;# 
   784     0392                     	;# 
   785     040C                     	;# 
   786     040D                     	;# 
   787     040E                     	;# 
   788     040F                     	;# 
   789     0410                     	;# 
   790     0411                     	;# 
   791     0416                     	;# 
   792     0416                     	;# 
   793     0417                     	;# 
   794     0418                     	;# 
   795     0418                     	;# 
   796     0419                     	;# 
   797     041A                     	;# 
   798     041A                     	;# 
   799     041B                     	;# 
   800     041C                     	;# 
   801     041C                     	;# 
   802     041D                     	;# 
   803     041E                     	;# 
   804     041F                     	;# 
   805     048C                     	;# 
   806     048C                     	;# 
   807     048D                     	;# 
   808     048E                     	;# 
   809     048F                     	;# 
   810     048F                     	;# 
   811     0490                     	;# 
   812     0491                     	;# 
   813     0492                     	;# 
   814     0492                     	;# 
   815     0493                     	;# 
   816     0494                     	;# 
   817     0495                     	;# 
   818     0495                     	;# 
   819     0496                     	;# 
   820     0497                     	;# 
   821     0498                     	;# 
   822     0499                     	;# 
   823     049A                     	;# 
   824     049B                     	;# 
   825     049C                     	;# 
   826     049D                     	;# 
   827     050C                     	;# 
   828     050C                     	;# 
   829     050D                     	;# 
   830     050E                     	;# 
   831     050F                     	;# 
   832     050F                     	;# 
   833     0510                     	;# 
   834     0511                     	;# 
   835     0512                     	;# 
   836     0512                     	;# 
   837     0513                     	;# 
   838     0514                     	;# 
   839     0515                     	;# 
   840     0515                     	;# 
   841     0516                     	;# 
   842     0517                     	;# 
   843     0518                     	;# 
   844     0519                     	;# 
   845     051A                     	;# 
   846     051B                     	;# 
   847     051C                     	;# 
   848     051D                     	;# 
   849     058C                     	;# 
   850     058C                     	;# 
   851     058D                     	;# 
   852     058E                     	;# 
   853     058F                     	;# 
   854     058F                     	;# 
   855     0590                     	;# 
   856     0591                     	;# 
   857     0592                     	;# 
   858     0593                     	;# 
   859     060C                     	;# 
   860     060D                     	;# 
   861     060E                     	;# 
   862     060F                     	;# 
   863     0610                     	;# 
   864     0611                     	;# 
   865     0612                     	;# 
   866     0613                     	;# 
   867     0614                     	;# 
   868     0616                     	;# 
   869     0617                     	;# 
   870     0618                     	;# 
   871     0619                     	;# 
   872     061A                     	;# 
   873     061B                     	;# 
   874     061C                     	;# 
   875     061D                     	;# 
   876     061E                     	;# 
   877     068C                     	;# 
   878     068D                     	;# 
   879     068E                     	;# 
   880     068F                     	;# 
   881     0690                     	;# 
   882     0691                     	;# 
   883     0692                     	;# 
   884     0693                     	;# 
   885     0694                     	;# 
   886     070C                     	;# 
   887     070D                     	;# 
   888     070E                     	;# 
   889     070F                     	;# 
   890     0710                     	;# 
   891     0711                     	;# 
   892     0712                     	;# 
   893     0713                     	;# 
   894     0714                     	;# 
   895     0716                     	;# 
   896     0717                     	;# 
   897     0718                     	;# 
   898     0719                     	;# 
   899     071A                     	;# 
   900     071B                     	;# 
   901     071C                     	;# 
   902     071D                     	;# 
   903     071E                     	;# 
   904     0796                     	;# 
   905     0797                     	;# 
   906     0798                     	;# 
   907     0799                     	;# 
   908     079A                     	;# 
   909     079B                     	;# 
   910     080C                     	;# 
   911     080D                     	;# 
   912     080E                     	;# 
   913     080F                     	;# 
   914     0810                     	;# 
   915     0811                     	;# 
   916     0812                     	;# 
   917     0813                     	;# 
   918     0814                     	;# 
   919     081A                     	;# 
   920     081B                     	;# 
   921     081C                     	;# 
   922     081D                     	;# 
   923     081E                     	;# 
   924     081F                     	;# 
   925     088C                     	;# 
   926     088D                     	;# 
   927     088E                     	;# 
   928     088F                     	;# 
   929     0890                     	;# 
   930     0891                     	;# 
   931     0892                     	;# 
   932     0893                     	;# 
   933     0895                     	;# 
   934     0896                     	;# 
   935     0897                     	;# 
   936     0898                     	;# 
   937     0899                     	;# 
   938     089A                     	;# 
   939     089B                     	;# 
   940     090C                     	;# 
   941     090E                     	;# 
   942     090F                     	;# 
   943     091F                     	;# 
   944     091F                     	;# 
   945     098F                     	;# 
   946     098F                     	;# 
   947     0990                     	;# 
   948     0991                     	;# 
   949     0992                     	;# 
   950     0993                     	;# 
   951     0994                     	;# 
   952     0995                     	;# 
   953     0996                     	;# 
   954     0997                     	;# 
   955     0E0F                     	;# 
   956     0E10                     	;# 
   957     0E11                     	;# 
   958     0E12                     	;# 
   959     0E13                     	;# 
   960     0E14                     	;# 
   961     0E15                     	;# 
   962     0E16                     	;# 
   963     0E17                     	;# 
   964     0E18                     	;# 
   965     0E19                     	;# 
   966     0E1A                     	;# 
   967     0E1B                     	;# 
   968     0E1C                     	;# 
   969     0E1D                     	;# 
   970     0E1E                     	;# 
   971     0E1F                     	;# 
   972     0E20                     	;# 
   973     0E21                     	;# 
   974     0E22                     	;# 
   975     0E23                     	;# 
   976     0E24                     	;# 
   977     0E25                     	;# 
   978     0E26                     	;# 
   979     0E27                     	;# 
   980     0E28                     	;# 
   981     0E29                     	;# 
   982     0E2A                     	;# 
   983     0E2B                     	;# 
   984     0E2C                     	;# 
   985     0E2D                     	;# 
   986     0E2E                     	;# 
   987     0E2F                     	;# 
   988     0E30                     	;# 
   989     0E31                     	;# 
   990     0E32                     	;# 
   991     0E33                     	;# 
   992     0E34                     	;# 
   993     0E35                     	;# 
   994     0E36                     	;# 
   995     0E37                     	;# 
   996     0E8F                     	;# 
   997     0E90                     	;# 
   998     0E91                     	;# 
   999     0E92                     	;# 
  1000     0E93                     	;# 
  1001     0E94                     	;# 
  1002     0E95                     	;# 
  1003     0E96                     	;# 
  1004     0E97                     	;# 
  1005     0E9C                     	;# 
  1006     0E9D                     	;# 
  1007     0E9E                     	;# 
  1008     0EA1                     	;# 
  1009     0EA2                     	;# 
  1010     0EA3                     	;# 
  1011     0EA4                     	;# 
  1012     0EA5                     	;# 
  1013     0EA9                     	;# 
  1014     0EAA                     	;# 
  1015     0EAB                     	;# 
  1016     0EAC                     	;# 
  1017     0EB1                     	;# 
  1018     0EB2                     	;# 
  1019     0EB3                     	;# 
  1020     0EB8                     	;# 
  1021     0EB9                     	;# 
  1022     0EBA                     	;# 
  1023     0EBB                     	;# 
  1024     0EBC                     	;# 
  1025     0EBD                     	;# 
  1026     0EBE                     	;# 
  1027     0EC3                     	;# 
  1028     0EC5                     	;# 
  1029     0EC6                     	;# 
  1030     0EC7                     	;# 
  1031     0EC8                     	;# 
  1032     0EC9                     	;# 
  1033     0ECA                     	;# 
  1034     0ECB                     	;# 
  1035     0ECC                     	;# 
  1036     0F10                     	;# 
  1037     0F11                     	;# 
  1038     0F12                     	;# 
  1039     0F13                     	;# 
  1040     0F14                     	;# 
  1041     0F15                     	;# 
  1042     0F16                     	;# 
  1043     0F17                     	;# 
  1044     0F18                     	;# 
  1045     0F19                     	;# 
  1046     0F1A                     	;# 
  1047     0F1B                     	;# 
  1048     0F1C                     	;# 
  1049     0F1D                     	;# 
  1050     0F1E                     	;# 
  1051     0F1F                     	;# 
  1052     0F20                     	;# 
  1053     0F21                     	;# 
  1054     0F22                     	;# 
  1055     0F23                     	;# 
  1056     0F24                     	;# 
  1057     0F25                     	;# 
  1058     0F26                     	;# 
  1059     0F27                     	;# 
  1060     0F38                     	;# 
  1061     0F39                     	;# 
  1062     0F3A                     	;# 
  1063     0F3B                     	;# 
  1064     0F3C                     	;# 
  1065     0F3D                     	;# 
  1066     0F3E                     	;# 
  1067     0F3F                     	;# 
  1068     0F40                     	;# 
  1069     0F41                     	;# 
  1070     0F43                     	;# 
  1071     0F44                     	;# 
  1072     0F45                     	;# 
  1073     0F46                     	;# 
  1074     0F47                     	;# 
  1075     0F48                     	;# 
  1076     0F49                     	;# 
  1077     0F4A                     	;# 
  1078     0F4B                     	;# 
  1079     0F4C                     	;# 
  1080     0F4E                     	;# 
  1081     0F4F                     	;# 
  1082     0F50                     	;# 
  1083     0F51                     	;# 
  1084     0F52                     	;# 
  1085     0F53                     	;# 
  1086     0F54                     	;# 
  1087     0F55                     	;# 
  1088     0F56                     	;# 
  1089     0F57                     	;# 
  1090     0F65                     	;# 
  1091     0F68                     	;# 
  1092     0F69                     	;# 
  1093     0F6A                     	;# 
  1094     0F6B                     	;# 
  1095     0FE4                     	;# 
  1096     0FE5                     	;# 
  1097     0FE6                     	;# 
  1098     0FE7                     	;# 
  1099     0FE8                     	;# 
  1100     0FE9                     	;# 
  1101     0FEA                     	;# 
  1102     0FEB                     	;# 
  1103     0FED                     	;# 
  1104     0FEE                     	;# 
  1105     0FEF                     	;# 
  1106                           
  1107                           	psect	idataCOMMON
  1108     049A                     __pidataCOMMON:
  1109                           
  1110                           ;initializer for _CONTROL_OUTPUT
  1111     049A  3401               	retlw	1
  1112     049B  3400               	retlw	0
  1113                           
  1114                           	psect	idataBANK0
  1115     0389                     __pidataBANK0:
  1116                           
  1117                           ;initializer for _SWITCH_MID
  1118     0389  34DC               	retlw	220
  1119     038A  3405               	retlw	5
  1120                           
  1121                           ;initializer for _SWITCH_MIN
  1122     038B  34E8               	retlw	232
  1123     038C  3403               	retlw	3
  1124                           
  1125                           ;initializer for _SWITCH_MAX
  1126     038D  34D0               	retlw	208
  1127     038E  3407               	retlw	7
  1128                           
  1129                           ;initializer for _TurnRightCommand
  1130     038F  34FE               	retlw	254
  1131     0390  3419               	retlw	25
  1132     0391  3401               	retlw	1
  1133     0392  3406               	retlw	6
  1134     0393  3404               	retlw	4
  1135     0394  3400               	retlw	0
  1136     0395  3402               	retlw	2
  1137     0396  3432               	retlw	50
  1138     0397  3401               	retlw	1
  1139     0398  3432               	retlw	50
  1140                           
  1141                           ;initializer for _TurnLeftCommand
  1142     0399  34FE               	retlw	254
  1143     039A  3419               	retlw	25
  1144     039B  3401               	retlw	1
  1145     039C  3406               	retlw	6
  1146     039D  3404               	retlw	4
  1147     039E  3400               	retlw	0
  1148     039F  3401               	retlw	1
  1149     03A0  3432               	retlw	50
  1150     03A1  3402               	retlw	2
  1151     03A2  3432               	retlw	50
  1152                           
  1153                           ;initializer for _GetUserDataCommand
  1154     03A3  34FE               	retlw	254
  1155     03A4  3419               	retlw	25
  1156     03A5  3401               	retlw	1
  1157     03A6  3405               	retlw	5
  1158     03A7  3400               	retlw	0
  1159     03A8  3400               	retlw	0
  1160                           
  1161                           	psect	idataBANK1
  1162     0364                     __pidataBANK1:
  1163                           
  1164                           ;initializer for _EnableLaserScopeCommand
  1165     0364  34FE               	retlw	254
  1166     0365  3419               	retlw	25
  1167     0366  3401               	retlw	1
  1168     0367  3408               	retlw	8
  1169     0368  3401               	retlw	1
  1170     0369  3400               	retlw	0
  1171     036A  3401               	retlw	1
  1172                           
  1173                           ;initializer for _Break
  1174     036B  34FE               	retlw	254
  1175     036C  3419               	retlw	25
  1176     036D  3401               	retlw	1
  1177     036E  3406               	retlw	6
  1178     036F  3404               	retlw	4
  1179     0370  3400               	retlw	0
  1180     0371  3400               	retlw	0
  1181     0372  3400               	retlw	0
  1182     0373  3400               	retlw	0
  1183     0374  3400               	retlw	0
  1184                           
  1185                           ;initializer for _MoveBackwardCommand
  1186     0375  34FE               	retlw	254
  1187     0376  3419               	retlw	25
  1188     0377  3401               	retlw	1
  1189     0378  3406               	retlw	6
  1190     0379  3404               	retlw	4
  1191     037A  3400               	retlw	0
  1192     037B  3402               	retlw	2
  1193     037C  3432               	retlw	50
  1194     037D  3402               	retlw	2
  1195     037E  3432               	retlw	50
  1196                           
  1197                           ;initializer for _MoveForwardCommand
  1198     037F  34FE               	retlw	254
  1199     0380  3419               	retlw	25
  1200     0381  3401               	retlw	1
  1201     0382  3406               	retlw	6
  1202     0383  3404               	retlw	4
  1203     0384  3400               	retlw	0
  1204     0385  3401               	retlw	1
  1205     0386  3432               	retlw	50
  1206     0387  3401               	retlw	1
  1207     0388  3432               	retlw	50
  1208                           
  1209                           	psect	stringtext1
  1210     049C                     __pstringtext1:
  1211     049C                     _CONTROL_INPUT:
  1212     049C  3401               	retlw	1
  1213     049D  3400               	retlw	0
  1214     049E                     __end_of_CONTROL_INPUT:
  1215     0017                     _LATBbits	set	23
  1216     0012                     _TRISBbits	set	18
  1217     000B                     _INTCONbits	set	11
  1218     0013                     _TRISCbits	set	19
  1219     0016                     _LATAbits	set	22
  1220     0011                     _TRISAbits	set	17
  1221     011A                     _TX1REGbits	set	282
  1222     0119                     _RCREG	set	281
  1223     011D                     _RC1STAbits	set	285
  1224     011B                     _SP1BRGLbits	set	283
  1225     011E                     _TX1STAbits	set	286
  1226     011F                     _BAUD1CONbits	set	287
  1227     070F                     _PIR3bits	set	1807
  1228     0719                     _PIE3bits	set	1817
  1229     0ECB                     _RXPPSbits	set	3787
  1230     0F43                     _ANSELBbits	set	3907
  1231     0F4E                     _ANSELCbits	set	3918
  1232     0F25                     _RC5PPS	set	3877
  1233     0F38                     _ANSELAbits	set	3896
  1234                           
  1235                           	psect	cinit
  1236     007F                     start_initialization:	
  1237                           ; #config settings
  1238                           
  1239     007F                     __initialization:
  1240                           
  1241                           ; Initialize objects allocated to COMMON
  1242     007F  3184  249A  3180   	fcall	__pidataCOMMON	;fetch initializer
  1243     0082  00FB               	movwf	__pdataCOMMON& (0+127)
  1244     0083  3184  249B  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  1245     0086  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1246                           
  1247                           ; Initialize objects allocated to BANK0
  1248     0087  3089               	movlw	low __pidataBANK0
  1249     0088  0084               	movwf	4
  1250     0089  3083               	movlw	(high __pidataBANK0)| (0+128)
  1251     008A  0085               	movwf	5
  1252     008B  3048               	movlw	low __pdataBANK0
  1253     008C  0086               	movwf	6
  1254     008D  3000               	movlw	high __pdataBANK0
  1255     008E  0087               	movwf	7
  1256     008F  3020               	movlw	32
  1257     0090  3184  248E  3180   	fcall	init_ram
  1258                           
  1259                           ; Initialize objects allocated to BANK1
  1260     0093  3064               	movlw	low __pidataBANK1
  1261     0094  0084               	movwf	4
  1262     0095  3083               	movlw	(high __pidataBANK1)| (0+128)
  1263     0096  0085               	movwf	5
  1264     0097  30A0               	movlw	low __pdataBANK1
  1265     0098  0086               	movwf	6
  1266     0099  3000               	movlw	high __pdataBANK1
  1267     009A  0087               	movwf	7
  1268     009B  3025               	movlw	37
  1269     009C  3184  248E  3180   	fcall	init_ram
  1270                           
  1271                           ; Clear objects allocated to COMMON
  1272     009F  01F9               	clrf	__pbssCOMMON& (0+127)
  1273     00A0  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1274                           
  1275                           ; Clear objects allocated to BANK0
  1276     00A1  3020               	movlw	low __pbssBANK0
  1277     00A2  0084               	movwf	4
  1278     00A3  3000               	movlw	high __pbssBANK0
  1279     00A4  0085               	movwf	5
  1280     00A5  3028               	movlw	40
  1281     00A6  3184  2494  3180   	fcall	clear_ram0
  1282                           
  1283                           ; Clear objects allocated to BANK1
  1284     00A9  30C5               	movlw	low __pbssBANK1
  1285     00AA  0084               	movwf	4
  1286     00AB  3000               	movlw	high __pbssBANK1
  1287     00AC  0085               	movwf	5
  1288     00AD  3024               	movlw	36
  1289     00AE  3184  2494  3180   	fcall	clear_ram0
  1290     00B1                     end_of_initialization:	
  1291                           ;End of C runtime variable initialization code
  1292                           
  1293     00B1                     __end_of__initialization:
  1294     00B1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1295     00B2  0020               	movlb	0
  1296     00B3  3182  2ACB         	ljmp	_main	;jump to C main() function
  1297                           
  1298                           	psect	bssCOMMON
  1299     0079                     __pbssCOMMON:
  1300     0079                     _currentInput:
  1301     0079                     	ds	2
  1302                           
  1303                           	psect	dataCOMMON
  1304     007B                     __pdataCOMMON:
  1305     007B                     _CONTROL_OUTPUT:
  1306     007B                     	ds	2
  1307                           
  1308                           	psect	bssBANK0
  1309     0020                     __pbssBANK0:
  1310     0020                     _controls:
  1311     0020                     	ds	22
  1312     0036                     _currentCommand:
  1313     0036                     	ds	14
  1314     0044                     _commandIt:
  1315     0044                     	ds	2
  1316     0046                     _inputStage:
  1317     0046                     	ds	2
  1318                           
  1319                           	psect	dataBANK0
  1320     0048                     __pdataBANK0:
  1321     0048                     _SWITCH_MID:
  1322     0048                     	ds	2
  1323     004A                     _SWITCH_MIN:
  1324     004A                     	ds	2
  1325     004C                     _SWITCH_MAX:
  1326     004C                     	ds	2
  1327     004E                     _TurnRightCommand:
  1328     004E                     	ds	10
  1329     0058                     _TurnLeftCommand:
  1330     0058                     	ds	10
  1331     0062                     _GetUserDataCommand:
  1332     0062                     	ds	6
  1333                           
  1334                           	psect	bssBANK1
  1335     00C5                     __pbssBANK1:
  1336     00C5                     _Controls:
  1337     00C5                     	ds	22
  1338     00DB                     _Command:
  1339     00DB                     	ds	14
  1340                           
  1341                           	psect	dataBANK1
  1342     00A0                     __pdataBANK1:
  1343     00A0                     _EnableLaserScopeCommand:
  1344     00A0                     	ds	7
  1345     00A7                     _Break:
  1346     00A7                     	ds	10
  1347     00B1                     _MoveBackwardCommand:
  1348     00B1                     	ds	10
  1349     00BB                     _MoveForwardCommand:
  1350     00BB                     	ds	10
  1351                           
  1352                           	psect	inittext
  1353     048E                     init_ram:
  1354     048E  00FE               	movwf	btemp
  1355     048F                     initloop:
  1356     048F  0012               	moviw fsr0++
  1357     0490  001E               	movwi fsr1++
  1358     0491  0BFE               	decfsz	btemp,f
  1359     0492  2C8F               	goto	initloop
  1360     0493  3400               	retlw	0
  1361                           
  1362                           	psect	clrtext
  1363     0494                     clear_ram0:	
  1364                           ;	Called with FSR0 containing the base address, and
  1365                           ;	WREG with the size to clear
  1366                           
  1367     0494  0064               	clrwdt	;clear the watchdog before getting into this loop
  1368     0495                     clrloop0:
  1369     0495  0180               	clrf	0	;clear RAM location pointed to by FSR
  1370     0496  3101               	addfsr 0,1
  1371     0497  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1372     0498  2C95               	goto	clrloop0	;have we reached the end yet?
  1373     0499  3400               	retlw	0	;all done for this memory range, return
  1374                           
  1375                           	psect	cstackCOMMON
  1376     0070                     __pcstackCOMMON:
  1377     0070                     ?_SetUpPumpArm:
  1378     0070                     ?_SetUpPump:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381     0070                     ?_CreateControlsCommand:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384     0070                     ?_drive:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387     0070                     ?_CreateBreak:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390     0070                     ?_main:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393     0070                     ?_GetControllerInput:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396     0070                     ?_myFunction:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399     0070                     GetControllerInput@input:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402                           
  1403                           ; 2 bytes @ 0x0
  1404     0070                     	ds	2
  1405     0072                     ??_GetControllerInput:
  1406                           
  1407                           ; 1 bytes @ 0x2
  1408     0072                     	ds	3
  1409     0075                     ??_myFunction:
  1410                           
  1411                           ; 1 bytes @ 0x5
  1412     0075                     	ds	2
  1413     0077                     myFunction@input:
  1414                           
  1415                           ; 2 bytes @ 0x7
  1416     0077                     	ds	2
  1417                           
  1418                           	psect	cstackBANK0
  1419     0068                     __pcstackBANK0:
  1420     0068                     ??_SetUpPumpArm:
  1421     0068                     ??_SetUpPump:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424     0068                     ??_CreateControlsCommand:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427     0068                     ?_MovePumpArm:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430     0068                     ?_ActivatePump:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433     0068                     ?_CreateTurnRightCommmand:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436     0068                     ?_CreateTurnLeftCommmand:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439     0068                     ?_CreateMoveForwardCommmand:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442     0068                     ?_CreateMoveBackwardCommmand:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445     0068                     ??_CreateBreak:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448     0068                     CreateTurnRightCommmand@pwm:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451     0068                     CreateTurnLeftCommmand@pwm:	
  1452                           ; 2 bytes @ 0x0
  1453                           
  1454     0068                     CreateMoveForwardCommmand@pwm:	
  1455                           ; 2 bytes @ 0x0
  1456                           
  1457     0068                     CreateMoveBackwardCommmand@pwm:	
  1458                           ; 2 bytes @ 0x0
  1459                           
  1460     0068                     MovePumpArm@switchValue:	
  1461                           ; 2 bytes @ 0x0
  1462                           
  1463     0068                     ActivatePump@switchValue:	
  1464                           ; 2 bytes @ 0x0
  1465                           
  1466                           
  1467                           ; 2 bytes @ 0x0
  1468     0068                     	ds	2
  1469     006A                     ??_MovePumpArm:
  1470     006A                     ??_ActivatePump:	
  1471                           ; 1 bytes @ 0x2
  1472                           
  1473     006A                     ??_drive:	
  1474                           ; 1 bytes @ 0x2
  1475                           
  1476     006A                     ??_CreateTurnRightCommmand:	
  1477                           ; 1 bytes @ 0x2
  1478                           
  1479     006A                     ??_CreateTurnLeftCommmand:	
  1480                           ; 1 bytes @ 0x2
  1481                           
  1482     006A                     ??_CreateMoveForwardCommmand:	
  1483                           ; 1 bytes @ 0x2
  1484                           
  1485     006A                     ??_CreateMoveBackwardCommmand:	
  1486                           ; 1 bytes @ 0x2
  1487                           
  1488                           
  1489                           ; 1 bytes @ 0x2
  1490     006A                     	ds	1
  1491     006B                     ??_main:
  1492                           
  1493                           	psect	maintext
  1494     02CB                     __pmaintext:	
  1495                           ; 1 bytes @ 0x3
  1496 ;;
  1497 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1498 ;;
  1499 ;; *************** function _main *****************
  1500 ;; Defined at:
  1501 ;;		line 109 in file "motorMain.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2, status,0, pclath, cstack
  1510 ;; Tracked objects:
  1511 ;;		On entry : B1F/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels required when called: 4
  1521 ;; This function calls:
  1522 ;;		_ActivatePump
  1523 ;;		_CreateControlsCommand
  1524 ;;		_MovePumpArm
  1525 ;;		_SetUpPump
  1526 ;;		_SetUpPumpArm
  1527 ;;		_drive
  1528 ;; This function is called by:
  1529 ;;		Startup code after reset
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533     02CB                     _main:	
  1534                           ;psect for function _main
  1535                           
  1536     02CB                     l1324:	
  1537                           ;incstack = 0
  1538                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1539                           
  1540                           
  1541                           ;motorMain.c: 111:    TRISAbits.TRISA5 = 1;
  1542     02CB  0020               	movlb	0	; select bank0
  1543     02CC  1691               	bsf	17,5	;volatile
  1544                           
  1545                           ;motorMain.c: 112:     ANSELAbits.ANSA5 = 0;
  1546     02CD  003E               	movlb	30	; select bank30
  1547     02CE  12B8               	bcf	56,5	;volatile
  1548                           
  1549                           ;motorMain.c: 114:     TRISAbits.TRISA0 = 0;
  1550     02CF  0020               	movlb	0	; select bank0
  1551     02D0  1011               	bcf	17,0	;volatile
  1552                           
  1553                           ;motorMain.c: 115:     TRISAbits.TRISA1 = 0;
  1554     02D1  1091               	bcf	17,1	;volatile
  1555                           
  1556                           ;motorMain.c: 116:     TRISAbits.TRISA2 = 0;
  1557     02D2  1111               	bcf	17,2	;volatile
  1558                           
  1559                           ;motorMain.c: 117:     TRISAbits.TRISA3 = 0;
  1560     02D3  1191               	bcf	17,3	;volatile
  1561                           
  1562                           ;motorMain.c: 120:     LATAbits.LATA0 = 0;
  1563     02D4  1016               	bcf	22,0	;volatile
  1564                           
  1565                           ;motorMain.c: 121:     LATAbits.LATA1 = 0;
  1566     02D5  1096               	bcf	22,1	;volatile
  1567                           
  1568                           ;motorMain.c: 122:     LATAbits.LATA2 = 0;
  1569     02D6  1116               	bcf	22,2	;volatile
  1570                           
  1571                           ;motorMain.c: 123:     LATAbits.LATA3 = 0;
  1572     02D7  1196               	bcf	22,3	;volatile
  1573     02D8                     l1326:
  1574                           
  1575                           ;motorMain.c: 125:     SetUpPumpArm();
  1576     02D8  3184  247A  3182   	fcall	_SetUpPumpArm
  1577                           
  1578                           ;motorMain.c: 126:     SetUpPump();
  1579     02DB  3184  2484  3182   	fcall	_SetUpPump
  1580     02DE                     l1328:
  1581                           
  1582                           ;motorMain.c: 128:     BAUD1CONbits.BRG16=1;
  1583     02DE  0022               	movlb	2	; select bank2
  1584     02DF  159F               	bsf	31,3	;volatile
  1585     02E0                     l1330:
  1586                           
  1587                           ;motorMain.c: 130:     TX1STAbits.BRGH = 0x1;
  1588     02E0  151E               	bsf	30,2	;volatile
  1589     02E1                     l1332:
  1590                           
  1591                           ;motorMain.c: 134:     RC5PPS = 0x10;
  1592     02E1  3010               	movlw	16
  1593     02E2  003E               	movlb	30	; select bank30
  1594     02E3  00A5               	movwf	37	;volatile
  1595     02E4                     l1334:
  1596                           
  1597                           ;motorMain.c: 135:     TRISCbits.TRISC5 = 0;
  1598     02E4  0020               	movlb	0	; select bank0
  1599     02E5  1293               	bcf	19,5	;volatile
  1600     02E6                     l1336:
  1601                           
  1602                           ;motorMain.c: 137:     RXPPSbits.RXPPS = 0x16;
  1603     02E6  003D               	movlb	29	; select bank29
  1604     02E7  084B               	movf	75,w	;volatile
  1605     02E8  39E0               	andlw	-32
  1606     02E9  3816               	iorlw	22
  1607     02EA  00CB               	movwf	75	;volatile
  1608     02EB                     l1338:
  1609                           
  1610                           ;motorMain.c: 138:     TRISCbits.TRISC6 = 1;
  1611     02EB  0020               	movlb	0	; select bank0
  1612     02EC  1713               	bsf	19,6	;volatile
  1613     02ED                     l1340:
  1614                           
  1615                           ;motorMain.c: 139:     ANSELCbits.ANSC6 = 0;
  1616     02ED  003E               	movlb	30	; select bank30
  1617     02EE  134E               	bcf	78,6	;volatile
  1618     02EF                     l1342:
  1619                           
  1620                           ;motorMain.c: 142:     SP1BRGLbits.SP1BRGL = 68;
  1621     02EF  3044               	movlw	68
  1622     02F0  0022               	movlb	2	; select bank2
  1623     02F1  009B               	movwf	27	;volatile
  1624     02F2                     l1344:
  1625                           
  1626                           ;motorMain.c: 144:     CreateControlsCommand();
  1627     02F2  3184  241D  3182   	fcall	_CreateControlsCommand
  1628     02F5                     l1346:
  1629                           
  1630                           ;motorMain.c: 147:     RC1STAbits.SPEN = 1;
  1631     02F5  0022               	movlb	2	; select bank2
  1632     02F6  179D               	bsf	29,7	;volatile
  1633     02F7                     l1348:
  1634                           
  1635                           ;motorMain.c: 148:     TX1STAbits.TXEN =1;
  1636     02F7  169E               	bsf	30,5	;volatile
  1637     02F8                     l1350:
  1638                           
  1639                           ;motorMain.c: 149:     TX1STAbits.SYNC=0;
  1640     02F8  121E               	bcf	30,4	;volatile
  1641     02F9                     l1352:
  1642                           
  1643                           ;motorMain.c: 151:     RC1STAbits.CREN = 1;
  1644     02F9  161D               	bsf	29,4	;volatile
  1645     02FA                     l1354:
  1646                           
  1647                           ;motorMain.c: 154:     INTCONbits.GIE = 1;
  1648     02FA  178B               	bsf	11,7	;volatile
  1649     02FB                     l1356:
  1650                           
  1651                           ;motorMain.c: 155:     INTCONbits.PEIE = 1;
  1652     02FB  170B               	bsf	11,6	;volatile
  1653     02FC                     l1358:
  1654                           
  1655                           ;motorMain.c: 156:     PIE3bits.RCIE = 1;
  1656     02FC  002E               	movlb	14	; select bank14
  1657     02FD  1699               	bsf	25,5	;volatile
  1658     02FE                     l1360:
  1659                           
  1660                           ;motorMain.c: 157:     PIE3bits.TXIE = 1;
  1661     02FE  1619               	bsf	25,4	;volatile
  1662     02FF                     l1362:
  1663                           
  1664                           ;motorMain.c: 161:         if(controls.switchA <= SWITCH_MIN){
  1665     02FF  3003               	movlw	3
  1666     0300  0020               	movlb	0	; select bank0
  1667     0301  0229               	subwf	_controls+9,w
  1668     0302  30E9               	movlw	233
  1669     0303  1903               	skipnz
  1670     0304  0228               	subwf	_controls+8,w
  1671     0305  1803               	skipnc
  1672     0306  2B08               	goto	u531
  1673     0307  2B09               	goto	u530
  1674     0308                     u531:
  1675     0308  2B1A               	goto	l104
  1676     0309                     u530:
  1677     0309                     l1364:
  1678                           
  1679                           ;motorMain.c: 162:             LATAbits.LATA0 = 1;
  1680     0309  1416               	bsf	22,0	;volatile
  1681     030A                     l1366:
  1682                           
  1683                           ;motorMain.c: 163:             MovePumpArm(controls.switchC);
  1684     030A  082D               	movf	_controls+13,w
  1685     030B  00E9               	movwf	MovePumpArm@switchValue+1
  1686     030C  082C               	movf	_controls+12,w
  1687     030D  00E8               	movwf	MovePumpArm@switchValue
  1688     030E  3184  2438  3182   	fcall	_MovePumpArm
  1689                           
  1690                           ;motorMain.c: 164:             ActivatePump(controls.switchD);
  1691     0311  0020               	movlb	0	; select bank0
  1692     0312  082F               	movf	_controls+15,w
  1693     0313  00E9               	movwf	ActivatePump@switchValue+1
  1694     0314  082E               	movf	_controls+14,w
  1695     0315  00E8               	movwf	ActivatePump@switchValue
  1696     0316  3184  246A  3182   	fcall	_ActivatePump
  1697                           
  1698                           ;motorMain.c: 165:         }
  1699     0319  2B2A               	goto	l1370
  1700     031A                     l104:	
  1701                           ;motorMain.c: 166:         else{
  1702                           
  1703                           
  1704                           ;motorMain.c: 167:             LATAbits.LATA0 = 0;
  1705     031A  1016               	bcf	22,0	;volatile
  1706     031B                     l1368:
  1707                           
  1708                           ;motorMain.c: 168:             MovePumpArm(SWITCH_MID);
  1709     031B  30DC               	movlw	220
  1710     031C  00E8               	movwf	MovePumpArm@switchValue
  1711     031D  3005               	movlw	5
  1712     031E  00E9               	movwf	MovePumpArm@switchValue+1
  1713     031F  3184  2438  3182   	fcall	_MovePumpArm
  1714                           
  1715                           ;motorMain.c: 169:             ActivatePump(SWITCH_MAX);
  1716     0322  30D0               	movlw	208
  1717     0323  0020               	movlb	0	; select bank0
  1718     0324  00E8               	movwf	ActivatePump@switchValue
  1719     0325  3007               	movlw	7
  1720     0326  00E9               	movwf	ActivatePump@switchValue+1
  1721     0327  3184  246A  3182   	fcall	_ActivatePump
  1722     032A                     l1370:
  1723                           
  1724                           ;motorMain.c: 171:         if(controls.switchB <= SWITCH_MIN){
  1725     032A  3003               	movlw	3
  1726     032B  0020               	movlb	0	; select bank0
  1727     032C  022B               	subwf	_controls+11,w
  1728     032D  30E9               	movlw	233
  1729     032E  1903               	skipnz
  1730     032F  022A               	subwf	_controls+10,w
  1731     0330  1803               	skipnc
  1732     0331  2B33               	goto	u541
  1733     0332  2B34               	goto	u540
  1734     0333                     u541:
  1735     0333  2B36               	goto	l106
  1736     0334                     u540:
  1737     0334                     l1372:
  1738                           
  1739                           ;motorMain.c: 172:             LATAbits.LATA1 = 1;
  1740     0334  1496               	bsf	22,1	;volatile
  1741                           
  1742                           ;motorMain.c: 173:         }
  1743     0335  2B37               	goto	l1374
  1744     0336                     l106:	
  1745                           ;motorMain.c: 174:         else{
  1746                           
  1747                           
  1748                           ;motorMain.c: 175:             LATAbits.LATA1 = 0;
  1749     0336  1096               	bcf	22,1	;volatile
  1750     0337                     l1374:
  1751                           
  1752                           ;motorMain.c: 177:         if(controls.switchC == SWITCH_MID){
  1753     0337  30DC               	movlw	220
  1754     0338  062C               	xorwf	_controls+12,w
  1755     0339  3005               	movlw	5
  1756     033A  1903               	skipnz
  1757     033B  062D               	xorwf	_controls+13,w
  1758     033C  1D03               	btfss	3,2
  1759     033D  2B3F               	goto	u551
  1760     033E  2B40               	goto	u550
  1761     033F                     u551:
  1762     033F  2B42               	goto	l108
  1763     0340                     u550:
  1764     0340                     l1376:
  1765                           
  1766                           ;motorMain.c: 178:             LATAbits.LATA2 = 1;
  1767     0340  1516               	bsf	22,2	;volatile
  1768                           
  1769                           ;motorMain.c: 179:         }
  1770     0341  2B43               	goto	l1378
  1771     0342                     l108:	
  1772                           ;motorMain.c: 180:         else{
  1773                           
  1774                           
  1775                           ;motorMain.c: 181:             LATAbits.LATA2 = 0;
  1776     0342  1116               	bcf	22,2	;volatile
  1777     0343                     l1378:
  1778                           
  1779                           ;motorMain.c: 183:         if(controls.switchD <= SWITCH_MIN){
  1780     0343  3003               	movlw	3
  1781     0344  022F               	subwf	_controls+15,w
  1782     0345  30E9               	movlw	233
  1783     0346  1903               	skipnz
  1784     0347  022E               	subwf	_controls+14,w
  1785     0348  1803               	skipnc
  1786     0349  2B4B               	goto	u561
  1787     034A  2B4C               	goto	u560
  1788     034B                     u561:
  1789     034B  2B4E               	goto	l110
  1790     034C                     u560:
  1791     034C                     l1380:
  1792                           
  1793                           ;motorMain.c: 184:             LATAbits.LATA3 = 1;
  1794     034C  1596               	bsf	22,3	;volatile
  1795                           
  1796                           ;motorMain.c: 185:         }
  1797     034D  2B4F               	goto	l1382
  1798     034E                     l110:	
  1799                           ;motorMain.c: 186:         else{
  1800                           
  1801                           
  1802                           ;motorMain.c: 187:             LATAbits.LATA3 = 0;
  1803     034E  1196               	bcf	22,3	;volatile
  1804     034F                     l1382:
  1805                           
  1806                           ;motorMain.c: 191:         if(currentCommand.done){
  1807     034F  0843               	movf	_currentCommand+13,w
  1808     0350  1903               	btfsc	3,2
  1809     0351  2B53               	goto	u571
  1810     0352  2B54               	goto	u570
  1811     0353                     u571:
  1812     0353  2AFF               	goto	l1362
  1813     0354                     u570:
  1814     0354                     l1384:
  1815                           
  1816                           ;motorMain.c: 192:             if(currentCommand.sendId == CONTROL_INPUT){
  1817     0354  033A               	decf	_currentCommand+4,w
  1818     0355  043B               	iorwf	_currentCommand+5,w
  1819     0356  1D03               	btfss	3,2
  1820     0357  2B59               	goto	u581
  1821     0358  2B5A               	goto	u580
  1822     0359                     u581:
  1823     0359  2B5E               	goto	l1388
  1824     035A                     u580:
  1825     035A                     l1386:
  1826                           
  1827                           ;motorMain.c: 193:                 drive();
  1828     035A  3180  20B5  3182   	fcall	_drive
  1829                           
  1830                           ;motorMain.c: 194:             }
  1831     035D  2AFF               	goto	l1362
  1832     035E                     l1388:
  1833                           
  1834                           ;motorMain.c: 196:                 CreateControlsCommand();
  1835     035E  3184  241D  3182   	fcall	_CreateControlsCommand
  1836     0361  2AFF               	goto	l1362
  1837     0362  3180  287D         	ljmp	start
  1838     0364                     __end_of_main:
  1839                           
  1840                           	psect	text1
  1841     00B5                     __ptext1:	
  1842 ;; *************** function _drive *****************
  1843 ;; Defined at:
  1844 ;;		line 232 in file "motorMain.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  power           2    0        unsigned int 
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      void 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0, pclath, cstack
  1853 ;; Tracked objects:
  1854 ;;		On entry : 0/0
  1855 ;;		On exit  : 0/0
  1856 ;;		Unchanged: 0/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1860 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1861 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1862 ;;Total ram usage:        1 bytes
  1863 ;; Hardware stack levels used: 1
  1864 ;; Hardware stack levels required when called: 3
  1865 ;; This function calls:
  1866 ;;		_CreateBreak
  1867 ;;		_CreateControlsCommand
  1868 ;;		_CreateMoveBackwardCommmand
  1869 ;;		_CreateMoveForwardCommmand
  1870 ;;		_CreateTurnLeftCommmand
  1871 ;;		_CreateTurnRightCommmand
  1872 ;; This function is called by:
  1873 ;;		_main
  1874 ;; This function uses a non-reentrant model
  1875 ;;
  1876                           
  1877     00B5                     _drive:	
  1878                           ;psect for function _drive
  1879                           
  1880     00B5                     l1226:	
  1881                           ;incstack = 0
  1882                           ; Regs used in _drive: [wreg+status,2+status,0+pclath+cstack]
  1883                           
  1884                           
  1885                           ;motorMain.c: 235:     if((controls.rightX >= 0x6A4) && (controls.rightY >= 0x546 && con
      +                          trols.rightY <= 0x672)){
  1886     00B5  0020               	movlb	0	; select bank0
  1887     00B6  0821               	movf	_controls+1,w
  1888     00B7  3A80               	xorlw	128
  1889     00B8  00EA               	movwf	??_drive
  1890     00B9  3086               	movlw	134
  1891     00BA  026A               	subwf	??_drive,w
  1892     00BB  1D03               	skipz
  1893     00BC  28BF               	goto	u365
  1894     00BD  30A4               	movlw	164
  1895     00BE  0220               	subwf	_controls,w
  1896     00BF                     u365:
  1897     00BF  1C03               	skipc
  1898     00C0  28C2               	goto	u361
  1899     00C1  28C3               	goto	u360
  1900     00C2                     u361:
  1901     00C2  28E8               	goto	l1234
  1902     00C3                     u360:
  1903     00C3                     l1228:
  1904     00C3  0020               	movlb	0	; select bank0
  1905     00C4  0823               	movf	_controls+3,w
  1906     00C5  3A80               	xorlw	128
  1907     00C6  00EA               	movwf	??_drive
  1908     00C7  3085               	movlw	133
  1909     00C8  026A               	subwf	??_drive,w
  1910     00C9  1D03               	skipz
  1911     00CA  28CD               	goto	u375
  1912     00CB  3046               	movlw	70
  1913     00CC  0222               	subwf	_controls+2,w
  1914     00CD                     u375:
  1915     00CD  1C03               	skipc
  1916     00CE  28D0               	goto	u371
  1917     00CF  28D1               	goto	u370
  1918     00D0                     u371:
  1919     00D0  28E8               	goto	l1234
  1920     00D1                     u370:
  1921     00D1                     l1230:
  1922     00D1  0020               	movlb	0	; select bank0
  1923     00D2  0823               	movf	_controls+3,w
  1924     00D3  3A80               	xorlw	128
  1925     00D4  00EA               	movwf	??_drive
  1926     00D5  3086               	movlw	134
  1927     00D6  026A               	subwf	??_drive,w
  1928     00D7  1D03               	skipz
  1929     00D8  28DB               	goto	u385
  1930     00D9  3073               	movlw	115
  1931     00DA  0222               	subwf	_controls+2,w
  1932     00DB                     u385:
  1933     00DB  1803               	skipnc
  1934     00DC  28DE               	goto	u381
  1935     00DD  28DF               	goto	u380
  1936     00DE                     u381:
  1937     00DE  28E8               	goto	l1234
  1938     00DF                     u380:
  1939     00DF                     l1232:
  1940                           
  1941                           ;motorMain.c: 236:         CreateTurnRightCommmand(power);
  1942     00DF  304B               	movlw	75
  1943     00E0  0020               	movlb	0	; select bank0
  1944     00E1  00E8               	movwf	CreateTurnRightCommmand@pwm
  1945     00E2  3000               	movlw	0
  1946     00E3  00E9               	movwf	CreateTurnRightCommmand@pwm+1
  1947     00E4  3183  23E7  3180   	fcall	_CreateTurnRightCommmand
  1948                           
  1949                           ;motorMain.c: 237:     }else if((controls.rightX <= 0x514) && (controls.rightY >= 0x546 
      +                          && controls.rightY <= 0x672)){
  1950     00E7  29C0               	goto	l156
  1951     00E8                     l1234:
  1952     00E8  0020               	movlb	0	; select bank0
  1953     00E9  0821               	movf	_controls+1,w
  1954     00EA  3A80               	xorlw	128
  1955     00EB  00EA               	movwf	??_drive
  1956     00EC  3085               	movlw	133
  1957     00ED  026A               	subwf	??_drive,w
  1958     00EE  1D03               	skipz
  1959     00EF  28F2               	goto	u395
  1960     00F0  3015               	movlw	21
  1961     00F1  0220               	subwf	_controls,w
  1962     00F2                     u395:
  1963     00F2  1803               	skipnc
  1964     00F3  28F5               	goto	u391
  1965     00F4  28F6               	goto	u390
  1966     00F5                     u391:
  1967     00F5  291B               	goto	l1242
  1968     00F6                     u390:
  1969     00F6                     l1236:
  1970     00F6  0020               	movlb	0	; select bank0
  1971     00F7  0823               	movf	_controls+3,w
  1972     00F8  3A80               	xorlw	128
  1973     00F9  00EA               	movwf	??_drive
  1974     00FA  3085               	movlw	133
  1975     00FB  026A               	subwf	??_drive,w
  1976     00FC  1D03               	skipz
  1977     00FD  2900               	goto	u405
  1978     00FE  3046               	movlw	70
  1979     00FF  0222               	subwf	_controls+2,w
  1980     0100                     u405:
  1981     0100  1C03               	skipc
  1982     0101  2903               	goto	u401
  1983     0102  2904               	goto	u400
  1984     0103                     u401:
  1985     0103  291B               	goto	l1242
  1986     0104                     u400:
  1987     0104                     l1238:
  1988     0104  0020               	movlb	0	; select bank0
  1989     0105  0823               	movf	_controls+3,w
  1990     0106  3A80               	xorlw	128
  1991     0107  00EA               	movwf	??_drive
  1992     0108  3086               	movlw	134
  1993     0109  026A               	subwf	??_drive,w
  1994     010A  1D03               	skipz
  1995     010B  290E               	goto	u415
  1996     010C  3073               	movlw	115
  1997     010D  0222               	subwf	_controls+2,w
  1998     010E                     u415:
  1999     010E  1803               	skipnc
  2000     010F  2911               	goto	u411
  2001     0110  2912               	goto	u410
  2002     0111                     u411:
  2003     0111  291B               	goto	l1242
  2004     0112                     u410:
  2005     0112                     l1240:
  2006                           
  2007                           ;motorMain.c: 238:         CreateTurnLeftCommmand(power);
  2008     0112  304B               	movlw	75
  2009     0113  0020               	movlb	0	; select bank0
  2010     0114  00E8               	movwf	CreateTurnLeftCommmand@pwm
  2011     0115  3000               	movlw	0
  2012     0116  00E9               	movwf	CreateTurnLeftCommmand@pwm+1
  2013     0117  3184  2402  3180   	fcall	_CreateTurnLeftCommmand
  2014                           
  2015                           ;motorMain.c: 239:     }else if((controls.rightY >= 0x6A4) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  2016     011A  29C0               	goto	l156
  2017     011B                     l1242:
  2018     011B  0020               	movlb	0	; select bank0
  2019     011C  0823               	movf	_controls+3,w
  2020     011D  3A80               	xorlw	128
  2021     011E  00EA               	movwf	??_drive
  2022     011F  3086               	movlw	134
  2023     0120  026A               	subwf	??_drive,w
  2024     0121  1D03               	skipz
  2025     0122  2925               	goto	u425
  2026     0123  30A4               	movlw	164
  2027     0124  0222               	subwf	_controls+2,w
  2028     0125                     u425:
  2029     0125  1C03               	skipc
  2030     0126  2928               	goto	u421
  2031     0127  2929               	goto	u420
  2032     0128                     u421:
  2033     0128  294E               	goto	l1250
  2034     0129                     u420:
  2035     0129                     l1244:
  2036     0129  0020               	movlb	0	; select bank0
  2037     012A  0821               	movf	_controls+1,w
  2038     012B  3A80               	xorlw	128
  2039     012C  00EA               	movwf	??_drive
  2040     012D  3085               	movlw	133
  2041     012E  026A               	subwf	??_drive,w
  2042     012F  1D03               	skipz
  2043     0130  2933               	goto	u435
  2044     0131  3046               	movlw	70
  2045     0132  0220               	subwf	_controls,w
  2046     0133                     u435:
  2047     0133  1C03               	skipc
  2048     0134  2936               	goto	u431
  2049     0135  2937               	goto	u430
  2050     0136                     u431:
  2051     0136  294E               	goto	l1250
  2052     0137                     u430:
  2053     0137                     l1246:
  2054     0137  0020               	movlb	0	; select bank0
  2055     0138  0821               	movf	_controls+1,w
  2056     0139  3A80               	xorlw	128
  2057     013A  00EA               	movwf	??_drive
  2058     013B  3086               	movlw	134
  2059     013C  026A               	subwf	??_drive,w
  2060     013D  1D03               	skipz
  2061     013E  2941               	goto	u445
  2062     013F  3073               	movlw	115
  2063     0140  0220               	subwf	_controls,w
  2064     0141                     u445:
  2065     0141  1803               	skipnc
  2066     0142  2944               	goto	u441
  2067     0143  2945               	goto	u440
  2068     0144                     u441:
  2069     0144  294E               	goto	l1250
  2070     0145                     u440:
  2071     0145                     l1248:
  2072                           
  2073                           ;motorMain.c: 240:         CreateMoveForwardCommmand(power);
  2074     0145  304B               	movlw	75
  2075     0146  0020               	movlb	0	; select bank0
  2076     0147  00E8               	movwf	CreateMoveForwardCommmand@pwm
  2077     0148  3000               	movlw	0
  2078     0149  00E9               	movwf	CreateMoveForwardCommmand@pwm+1
  2079     014A  3183  23A9  3180   	fcall	_CreateMoveForwardCommmand
  2080                           
  2081                           ;motorMain.c: 241:     }else if((controls.rightY <= 0x514) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  2082     014D  29C0               	goto	l156
  2083     014E                     l1250:
  2084     014E  0020               	movlb	0	; select bank0
  2085     014F  0823               	movf	_controls+3,w
  2086     0150  3A80               	xorlw	128
  2087     0151  00EA               	movwf	??_drive
  2088     0152  3085               	movlw	133
  2089     0153  026A               	subwf	??_drive,w
  2090     0154  1D03               	skipz
  2091     0155  2958               	goto	u455
  2092     0156  3015               	movlw	21
  2093     0157  0222               	subwf	_controls+2,w
  2094     0158                     u455:
  2095     0158  1803               	skipnc
  2096     0159  295B               	goto	u451
  2097     015A  295C               	goto	u450
  2098     015B                     u451:
  2099     015B  2981               	goto	l1258
  2100     015C                     u450:
  2101     015C                     l1252:
  2102     015C  0020               	movlb	0	; select bank0
  2103     015D  0821               	movf	_controls+1,w
  2104     015E  3A80               	xorlw	128
  2105     015F  00EA               	movwf	??_drive
  2106     0160  3085               	movlw	133
  2107     0161  026A               	subwf	??_drive,w
  2108     0162  1D03               	skipz
  2109     0163  2966               	goto	u465
  2110     0164  3046               	movlw	70
  2111     0165  0220               	subwf	_controls,w
  2112     0166                     u465:
  2113     0166  1C03               	skipc
  2114     0167  2969               	goto	u461
  2115     0168  296A               	goto	u460
  2116     0169                     u461:
  2117     0169  2981               	goto	l1258
  2118     016A                     u460:
  2119     016A                     l1254:
  2120     016A  0020               	movlb	0	; select bank0
  2121     016B  0821               	movf	_controls+1,w
  2122     016C  3A80               	xorlw	128
  2123     016D  00EA               	movwf	??_drive
  2124     016E  3086               	movlw	134
  2125     016F  026A               	subwf	??_drive,w
  2126     0170  1D03               	skipz
  2127     0171  2974               	goto	u475
  2128     0172  3073               	movlw	115
  2129     0173  0220               	subwf	_controls,w
  2130     0174                     u475:
  2131     0174  1803               	skipnc
  2132     0175  2977               	goto	u471
  2133     0176  2978               	goto	u470
  2134     0177                     u471:
  2135     0177  2981               	goto	l1258
  2136     0178                     u470:
  2137     0178                     l1256:
  2138                           
  2139                           ;motorMain.c: 242:         CreateMoveBackwardCommmand(power);
  2140     0178  304B               	movlw	75
  2141     0179  0020               	movlb	0	; select bank0
  2142     017A  00E8               	movwf	CreateMoveBackwardCommmand@pwm
  2143     017B  3000               	movlw	0
  2144     017C  00E9               	movwf	CreateMoveBackwardCommmand@pwm+1
  2145     017D  3183  23C8  3180   	fcall	_CreateMoveBackwardCommmand
  2146                           
  2147                           ;motorMain.c: 243:     }else if((controls.rightY >= 0x546 && controls.rightY <= 0x672) &
      +                          & (controls.rightX >= 0x546 && controls.rightX <= 0x672)){
  2148     0180  29C0               	goto	l156
  2149     0181                     l1258:
  2150     0181  0020               	movlb	0	; select bank0
  2151     0182  0823               	movf	_controls+3,w
  2152     0183  3A80               	xorlw	128
  2153     0184  00EA               	movwf	??_drive
  2154     0185  3085               	movlw	133
  2155     0186  026A               	subwf	??_drive,w
  2156     0187  1D03               	skipz
  2157     0188  298B               	goto	u485
  2158     0189  3046               	movlw	70
  2159     018A  0222               	subwf	_controls+2,w
  2160     018B                     u485:
  2161     018B  1C03               	skipc
  2162     018C  298E               	goto	u481
  2163     018D  298F               	goto	u480
  2164     018E                     u481:
  2165     018E  29BD               	goto	l1268
  2166     018F                     u480:
  2167     018F                     l1260:
  2168     018F  0020               	movlb	0	; select bank0
  2169     0190  0823               	movf	_controls+3,w
  2170     0191  3A80               	xorlw	128
  2171     0192  00EA               	movwf	??_drive
  2172     0193  3086               	movlw	134
  2173     0194  026A               	subwf	??_drive,w
  2174     0195  1D03               	skipz
  2175     0196  2999               	goto	u495
  2176     0197  3073               	movlw	115
  2177     0198  0222               	subwf	_controls+2,w
  2178     0199                     u495:
  2179     0199  1803               	skipnc
  2180     019A  299C               	goto	u491
  2181     019B  299D               	goto	u490
  2182     019C                     u491:
  2183     019C  29BD               	goto	l1268
  2184     019D                     u490:
  2185     019D                     l1262:
  2186     019D  0020               	movlb	0	; select bank0
  2187     019E  0821               	movf	_controls+1,w
  2188     019F  3A80               	xorlw	128
  2189     01A0  00EA               	movwf	??_drive
  2190     01A1  3085               	movlw	133
  2191     01A2  026A               	subwf	??_drive,w
  2192     01A3  1D03               	skipz
  2193     01A4  29A7               	goto	u505
  2194     01A5  3046               	movlw	70
  2195     01A6  0220               	subwf	_controls,w
  2196     01A7                     u505:
  2197     01A7  1C03               	skipc
  2198     01A8  29AA               	goto	u501
  2199     01A9  29AB               	goto	u500
  2200     01AA                     u501:
  2201     01AA  29BD               	goto	l1268
  2202     01AB                     u500:
  2203     01AB                     l1264:
  2204     01AB  0020               	movlb	0	; select bank0
  2205     01AC  0821               	movf	_controls+1,w
  2206     01AD  3A80               	xorlw	128
  2207     01AE  00EA               	movwf	??_drive
  2208     01AF  3086               	movlw	134
  2209     01B0  026A               	subwf	??_drive,w
  2210     01B1  1D03               	skipz
  2211     01B2  29B5               	goto	u515
  2212     01B3  3073               	movlw	115
  2213     01B4  0220               	subwf	_controls,w
  2214     01B5                     u515:
  2215     01B5  1803               	skipnc
  2216     01B6  29B8               	goto	u511
  2217     01B7  29B9               	goto	u510
  2218     01B8                     u511:
  2219     01B8  29BD               	goto	l1268
  2220     01B9                     u510:
  2221     01B9                     l1266:
  2222                           
  2223                           ;motorMain.c: 244:         CreateBreak();
  2224     01B9  3184  2453  3180   	fcall	_CreateBreak
  2225                           
  2226                           ;motorMain.c: 245:     }
  2227     01BC  29C0               	goto	l156
  2228     01BD                     l1268:
  2229                           
  2230                           ;motorMain.c: 247:         CreateControlsCommand();
  2231     01BD  3184  241D  3180   	fcall	_CreateControlsCommand
  2232     01C0                     l156:
  2233     01C0  0008               	return
  2234     01C1                     __end_of_drive:
  2235                           
  2236                           	psect	text2
  2237     03E7                     __ptext2:	
  2238 ;; *************** function _CreateTurnRightCommmand *****************
  2239 ;; Defined at:
  2240 ;;		line 251 in file "motorMain.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  pwm             2    0[BANK0 ] unsigned int 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;		None
  2245 ;; Return value:  Size  Location     Type
  2246 ;;                  1    wreg      void 
  2247 ;; Registers used:
  2248 ;;		wreg, status,2
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2258 ;;Total ram usage:        2 bytes
  2259 ;; Hardware stack levels used: 1
  2260 ;; Hardware stack levels required when called: 2
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_drive
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268     03E7                     _CreateTurnRightCommmand:	
  2269                           ;psect for function _CreateTurnRightCommmand
  2270                           
  2271     03E7                     l1142:	
  2272                           ;incstack = 0
  2273                           ; Regs used in _CreateTurnRightCommmand: [wreg+status,2]
  2274                           
  2275                           
  2276                           ;motorMain.c: 252:     currentCommand.sendId = 3;
  2277     03E7  3003               	movlw	3
  2278     03E8  0020               	movlb	0	; select bank0
  2279     03E9  00BA               	movwf	_currentCommand+4
  2280     03EA  3000               	movlw	0
  2281     03EB  00BB               	movwf	_currentCommand+5
  2282     03EC                     l1144:
  2283                           
  2284                           ;motorMain.c: 253:     currentCommand.sendIt = 0;
  2285     03EC  01B8               	clrf	_currentCommand+2
  2286     03ED  01B9               	clrf	_currentCommand+3
  2287     03EE                     l1146:
  2288                           
  2289                           ;motorMain.c: 254:     currentCommand.sendLimit = 10;
  2290     03EE  300A               	movlw	10
  2291     03EF  00B6               	movwf	_currentCommand
  2292     03F0  3000               	movlw	0
  2293     03F1  00B7               	movwf	_currentCommand+1
  2294                           
  2295                           ;motorMain.c: 255:     currentCommand.receiveId = 0;
  2296     03F2  01C1               	clrf	_currentCommand+11
  2297     03F3  01C2               	clrf	_currentCommand+12
  2298                           
  2299                           ;motorMain.c: 256:     currentCommand.receiveLimit = 0;
  2300     03F4  01BF               	clrf	_currentCommand+9
  2301     03F5  01C0               	clrf	_currentCommand+10
  2302                           
  2303                           ;motorMain.c: 257:     currentCommand.receiveIt = 0;
  2304     03F6  01BD               	clrf	_currentCommand+7
  2305     03F7  01BE               	clrf	_currentCommand+8
  2306                           
  2307                           ;motorMain.c: 258:     currentCommand.done = 0;
  2308     03F8  01C3               	clrf	_currentCommand+13
  2309     03F9                     l1148:
  2310                           
  2311                           ;motorMain.c: 260:     TurnRightCommand[7] = pwm;
  2312     03F9  0868               	movf	CreateTurnRightCommmand@pwm,w
  2313     03FA  00D5               	movwf	_TurnRightCommand+7
  2314     03FB                     l1150:
  2315                           
  2316                           ;motorMain.c: 261:     TurnRightCommand[9] = pwm;
  2317     03FB  0868               	movf	CreateTurnRightCommmand@pwm,w
  2318     03FC  00D7               	movwf	_TurnRightCommand+9
  2319     03FD                     l1152:
  2320                           
  2321                           ;motorMain.c: 262:     currentCommand.toSend = TurnRightCommand;
  2322     03FD  304E               	movlw	(low (_TurnRightCommand| 0))& (0+255)
  2323     03FE  00BC               	movwf	low ((_currentCommand| 0+6))
  2324     03FF                     l1154:
  2325                           
  2326                           ;motorMain.c: 263:     PIE3bits.TXIE = 1;
  2327     03FF  002E               	movlb	14	; select bank14
  2328     0400  1619               	bsf	25,4	;volatile
  2329     0401                     l159:
  2330     0401  0008               	return
  2331     0402                     __end_of_CreateTurnRightCommmand:
  2332                           
  2333                           	psect	text3
  2334     0402                     __ptext3:	
  2335 ;; *************** function _CreateTurnLeftCommmand *****************
  2336 ;; Defined at:
  2337 ;;		line 266 in file "motorMain.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  pwm             2    0[BANK0 ] unsigned int 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2351 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2354 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2355 ;;Total ram usage:        2 bytes
  2356 ;; Hardware stack levels used: 1
  2357 ;; Hardware stack levels required when called: 2
  2358 ;; This function calls:
  2359 ;;		Nothing
  2360 ;; This function is called by:
  2361 ;;		_drive
  2362 ;; This function uses a non-reentrant model
  2363 ;;
  2364                           
  2365     0402                     _CreateTurnLeftCommmand:	
  2366                           ;psect for function _CreateTurnLeftCommmand
  2367                           
  2368     0402                     l1156:	
  2369                           ;incstack = 0
  2370                           ; Regs used in _CreateTurnLeftCommmand: [wreg+status,2]
  2371                           
  2372                           
  2373                           ;motorMain.c: 267:     currentCommand.sendId = 4;
  2374     0402  3004               	movlw	4
  2375     0403  0020               	movlb	0	; select bank0
  2376     0404  00BA               	movwf	_currentCommand+4
  2377     0405  3000               	movlw	0
  2378     0406  00BB               	movwf	_currentCommand+5
  2379     0407                     l1158:
  2380                           
  2381                           ;motorMain.c: 268:     currentCommand.sendIt = 0;
  2382     0407  01B8               	clrf	_currentCommand+2
  2383     0408  01B9               	clrf	_currentCommand+3
  2384     0409                     l1160:
  2385                           
  2386                           ;motorMain.c: 269:     currentCommand.sendLimit = 10;
  2387     0409  300A               	movlw	10
  2388     040A  00B6               	movwf	_currentCommand
  2389     040B  3000               	movlw	0
  2390     040C  00B7               	movwf	_currentCommand+1
  2391                           
  2392                           ;motorMain.c: 270:     currentCommand.receiveId = 0;
  2393     040D  01C1               	clrf	_currentCommand+11
  2394     040E  01C2               	clrf	_currentCommand+12
  2395                           
  2396                           ;motorMain.c: 271:     currentCommand.receiveLimit = 0;
  2397     040F  01BF               	clrf	_currentCommand+9
  2398     0410  01C0               	clrf	_currentCommand+10
  2399                           
  2400                           ;motorMain.c: 272:     currentCommand.receiveIt = 0;
  2401     0411  01BD               	clrf	_currentCommand+7
  2402     0412  01BE               	clrf	_currentCommand+8
  2403                           
  2404                           ;motorMain.c: 273:     currentCommand.done = 0;
  2405     0413  01C3               	clrf	_currentCommand+13
  2406     0414                     l1162:
  2407                           
  2408                           ;motorMain.c: 275:     TurnLeftCommand[7] = pwm;
  2409     0414  0868               	movf	CreateTurnLeftCommmand@pwm,w
  2410     0415  00DF               	movwf	_TurnLeftCommand+7
  2411     0416                     l1164:
  2412                           
  2413                           ;motorMain.c: 276:     TurnLeftCommand[9] = pwm;
  2414     0416  0868               	movf	CreateTurnLeftCommmand@pwm,w
  2415     0417  00E1               	movwf	_TurnLeftCommand+9
  2416     0418                     l1166:
  2417                           
  2418                           ;motorMain.c: 277:     currentCommand.toSend = TurnLeftCommand;
  2419     0418  3058               	movlw	(low (_TurnLeftCommand| 0))& (0+255)
  2420     0419  00BC               	movwf	low ((_currentCommand| 0+6))
  2421     041A                     l1168:
  2422                           
  2423                           ;motorMain.c: 278:     PIE3bits.TXIE = 1;
  2424     041A  002E               	movlb	14	; select bank14
  2425     041B  1619               	bsf	25,4	;volatile
  2426     041C                     l162:
  2427     041C  0008               	return
  2428     041D                     __end_of_CreateTurnLeftCommmand:
  2429                           
  2430                           	psect	text4
  2431     03A9                     __ptext4:	
  2432 ;; *************** function _CreateMoveForwardCommmand *****************
  2433 ;; Defined at:
  2434 ;;		line 281 in file "motorMain.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;  pwm             2    0[BANK0 ] unsigned int 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;		None
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  1    wreg      void 
  2441 ;; Registers used:
  2442 ;;		wreg, status,2
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2451 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2452 ;;Total ram usage:        2 bytes
  2453 ;; Hardware stack levels used: 1
  2454 ;; Hardware stack levels required when called: 2
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_drive
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462     03A9                     _CreateMoveForwardCommmand:	
  2463                           ;psect for function _CreateMoveForwardCommmand
  2464                           
  2465     03A9                     l1170:	
  2466                           ;incstack = 0
  2467                           ; Regs used in _CreateMoveForwardCommmand: [wreg+status,2]
  2468                           
  2469                           
  2470                           ;motorMain.c: 282:     currentCommand.sendId = 5;
  2471     03A9  3005               	movlw	5
  2472     03AA  0020               	movlb	0	; select bank0
  2473     03AB  00BA               	movwf	_currentCommand+4
  2474     03AC  3000               	movlw	0
  2475     03AD  00BB               	movwf	_currentCommand+5
  2476     03AE                     l1172:
  2477                           
  2478                           ;motorMain.c: 283:     currentCommand.sendIt = 0;
  2479     03AE  01B8               	clrf	_currentCommand+2
  2480     03AF  01B9               	clrf	_currentCommand+3
  2481     03B0                     l1174:
  2482                           
  2483                           ;motorMain.c: 284:     currentCommand.sendLimit = 10;
  2484     03B0  300A               	movlw	10
  2485     03B1  00B6               	movwf	_currentCommand
  2486     03B2  3000               	movlw	0
  2487     03B3  00B7               	movwf	_currentCommand+1
  2488                           
  2489                           ;motorMain.c: 285:     currentCommand.receiveId = 0;
  2490     03B4  01C1               	clrf	_currentCommand+11
  2491     03B5  01C2               	clrf	_currentCommand+12
  2492                           
  2493                           ;motorMain.c: 286:     currentCommand.receiveLimit = 0;
  2494     03B6  01BF               	clrf	_currentCommand+9
  2495     03B7  01C0               	clrf	_currentCommand+10
  2496                           
  2497                           ;motorMain.c: 287:     currentCommand.receiveIt = 0;
  2498     03B8  01BD               	clrf	_currentCommand+7
  2499     03B9  01BE               	clrf	_currentCommand+8
  2500                           
  2501                           ;motorMain.c: 288:     currentCommand.done = 0;
  2502     03BA  01C3               	clrf	_currentCommand+13
  2503     03BB                     l1176:
  2504                           
  2505                           ;motorMain.c: 290:     MoveForwardCommand[7] = pwm;
  2506     03BB  0868               	movf	CreateMoveForwardCommmand@pwm,w
  2507     03BC  0021               	movlb	1	; select bank1
  2508     03BD  00C2               	movwf	(_MoveForwardCommand^(0+128)+7)
  2509     03BE                     l1178:
  2510                           
  2511                           ;motorMain.c: 291:     MoveForwardCommand[9] = pwm;
  2512     03BE  0020               	movlb	0	; select bank0
  2513     03BF  0868               	movf	CreateMoveForwardCommmand@pwm,w
  2514     03C0  0021               	movlb	1	; select bank1
  2515     03C1  00C4               	movwf	(_MoveForwardCommand^(0+128)+9)
  2516     03C2                     l1180:
  2517                           
  2518                           ;motorMain.c: 292:     currentCommand.toSend = MoveForwardCommand;
  2519     03C2  30BB               	movlw	(low (_MoveForwardCommand| 0))& (0+255)
  2520     03C3  0020               	movlb	0	; select bank0
  2521     03C4  00BC               	movwf	low ((_currentCommand| 0+6))
  2522     03C5                     l1182:
  2523                           
  2524                           ;motorMain.c: 293:     PIE3bits.TXIE = 1;
  2525     03C5  002E               	movlb	14	; select bank14
  2526     03C6  1619               	bsf	25,4	;volatile
  2527     03C7                     l165:
  2528     03C7  0008               	return
  2529     03C8                     __end_of_CreateMoveForwardCommmand:
  2530                           
  2531                           	psect	text5
  2532     03C8                     __ptext5:	
  2533 ;; *************** function _CreateMoveBackwardCommmand *****************
  2534 ;; Defined at:
  2535 ;;		line 296 in file "motorMain.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;  pwm             2    0[BANK0 ] unsigned int 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2553 ;;Total ram usage:        2 bytes
  2554 ;; Hardware stack levels used: 1
  2555 ;; Hardware stack levels required when called: 2
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_drive
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563     03C8                     _CreateMoveBackwardCommmand:	
  2564                           ;psect for function _CreateMoveBackwardCommmand
  2565                           
  2566     03C8                     l1184:	
  2567                           ;incstack = 0
  2568                           ; Regs used in _CreateMoveBackwardCommmand: [wreg+status,2]
  2569                           
  2570                           
  2571                           ;motorMain.c: 297:     currentCommand.sendId = 6;
  2572     03C8  3006               	movlw	6
  2573     03C9  0020               	movlb	0	; select bank0
  2574     03CA  00BA               	movwf	_currentCommand+4
  2575     03CB  3000               	movlw	0
  2576     03CC  00BB               	movwf	_currentCommand+5
  2577     03CD                     l1186:
  2578                           
  2579                           ;motorMain.c: 298:     currentCommand.sendIt = 0;
  2580     03CD  01B8               	clrf	_currentCommand+2
  2581     03CE  01B9               	clrf	_currentCommand+3
  2582     03CF                     l1188:
  2583                           
  2584                           ;motorMain.c: 299:     currentCommand.sendLimit = 10;
  2585     03CF  300A               	movlw	10
  2586     03D0  00B6               	movwf	_currentCommand
  2587     03D1  3000               	movlw	0
  2588     03D2  00B7               	movwf	_currentCommand+1
  2589                           
  2590                           ;motorMain.c: 300:     currentCommand.receiveId = 0;
  2591     03D3  01C1               	clrf	_currentCommand+11
  2592     03D4  01C2               	clrf	_currentCommand+12
  2593                           
  2594                           ;motorMain.c: 301:     currentCommand.receiveLimit = 0;
  2595     03D5  01BF               	clrf	_currentCommand+9
  2596     03D6  01C0               	clrf	_currentCommand+10
  2597                           
  2598                           ;motorMain.c: 302:     currentCommand.receiveIt = 0;
  2599     03D7  01BD               	clrf	_currentCommand+7
  2600     03D8  01BE               	clrf	_currentCommand+8
  2601                           
  2602                           ;motorMain.c: 303:     currentCommand.done = 0;
  2603     03D9  01C3               	clrf	_currentCommand+13
  2604     03DA                     l1190:
  2605                           
  2606                           ;motorMain.c: 305:     MoveBackwardCommand[7] = pwm;
  2607     03DA  0868               	movf	CreateMoveBackwardCommmand@pwm,w
  2608     03DB  0021               	movlb	1	; select bank1
  2609     03DC  00B8               	movwf	(_MoveBackwardCommand^(0+128)+7)
  2610     03DD                     l1192:
  2611                           
  2612                           ;motorMain.c: 306:     MoveBackwardCommand[9] = pwm;
  2613     03DD  0020               	movlb	0	; select bank0
  2614     03DE  0868               	movf	CreateMoveBackwardCommmand@pwm,w
  2615     03DF  0021               	movlb	1	; select bank1
  2616     03E0  00BA               	movwf	(_MoveBackwardCommand^(0+128)+9)
  2617     03E1                     l1194:
  2618                           
  2619                           ;motorMain.c: 307:     currentCommand.toSend = MoveBackwardCommand;
  2620     03E1  30B1               	movlw	(low (_MoveBackwardCommand| 0))& (0+255)
  2621     03E2  0020               	movlb	0	; select bank0
  2622     03E3  00BC               	movwf	low ((_currentCommand| 0+6))
  2623     03E4                     l1196:
  2624                           
  2625                           ;motorMain.c: 308:     PIE3bits.TXIE = 1;
  2626     03E4  002E               	movlb	14	; select bank14
  2627     03E5  1619               	bsf	25,4	;volatile
  2628     03E6                     l168:
  2629     03E6  0008               	return
  2630     03E7                     __end_of_CreateMoveBackwardCommmand:
  2631                           
  2632                           	psect	text6
  2633     041D                     __ptext6:	
  2634 ;; *************** function _CreateControlsCommand *****************
  2635 ;; Defined at:
  2636 ;;		line 324 in file "motorMain.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;		None
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2654 ;;Total ram usage:        0 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; Hardware stack levels required when called: 2
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;;		_drive
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665     041D                     _CreateControlsCommand:	
  2666                           ;psect for function _CreateControlsCommand
  2667                           
  2668     041D                     l1128:	
  2669                           ;incstack = 0
  2670                           ; Regs used in _CreateControlsCommand: [wreg+status,2]
  2671                           
  2672                           
  2673                           ;motorMain.c: 325:     currentCommand.receiveId = CONTROL_INPUT;
  2674     041D  3001               	movlw	1
  2675     041E  0020               	movlb	0	; select bank0
  2676     041F  00C1               	movwf	_currentCommand+11
  2677     0420  3000               	movlw	0
  2678     0421  00C2               	movwf	_currentCommand+12
  2679                           
  2680                           ;motorMain.c: 326:     currentCommand.receiveLimit = 26;
  2681     0422  301A               	movlw	26
  2682     0423  00BF               	movwf	_currentCommand+9
  2683     0424  3000               	movlw	0
  2684     0425  00C0               	movwf	_currentCommand+10
  2685     0426                     l1130:
  2686                           
  2687                           ;motorMain.c: 327:     currentCommand.receiveIt = 0;
  2688     0426  01BD               	clrf	_currentCommand+7
  2689     0427  01BE               	clrf	_currentCommand+8
  2690     0428                     l1132:
  2691                           
  2692                           ;motorMain.c: 328:     currentCommand.sendId = CONTROL_OUTPUT;
  2693     0428  3001               	movlw	1
  2694     0429  00BA               	movwf	_currentCommand+4
  2695     042A  3000               	movlw	0
  2696     042B  00BB               	movwf	_currentCommand+5
  2697     042C                     l1134:
  2698                           
  2699                           ;motorMain.c: 329:     currentCommand.toSend = (unsigned char*) GetUserDataCommand;
  2700     042C  3062               	movlw	(low (_GetUserDataCommand| 0))& (0+255)
  2701     042D  00BC               	movwf	low ((_currentCommand| 0+6))
  2702     042E                     l1136:
  2703                           
  2704                           ;motorMain.c: 330:     currentCommand.sendIt = 0;
  2705     042E  01B8               	clrf	_currentCommand+2
  2706     042F  01B9               	clrf	_currentCommand+3
  2707                           
  2708                           ;motorMain.c: 331:     currentCommand.sendLimit = 6;
  2709     0430  3006               	movlw	6
  2710     0431  00B6               	movwf	_currentCommand
  2711     0432  3000               	movlw	0
  2712     0433  00B7               	movwf	_currentCommand+1
  2713     0434                     l1138:
  2714                           
  2715                           ;motorMain.c: 332:     currentCommand.done = 0;
  2716     0434  01C3               	clrf	_currentCommand+13
  2717     0435                     l1140:
  2718                           
  2719                           ;motorMain.c: 333:     PIE3bits.TXIE = 1;
  2720     0435  002E               	movlb	14	; select bank14
  2721     0436  1619               	bsf	25,4	;volatile
  2722     0437                     l174:
  2723     0437  0008               	return
  2724     0438                     __end_of_CreateControlsCommand:
  2725                           
  2726                           	psect	text7
  2727     0453                     __ptext7:	
  2728 ;; *************** function _CreateBreak *****************
  2729 ;; Defined at:
  2730 ;;		line 311 in file "motorMain.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg, status,2
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2748 ;;Total ram usage:        0 bytes
  2749 ;; Hardware stack levels used: 1
  2750 ;; Hardware stack levels required when called: 2
  2751 ;; This function calls:
  2752 ;;		Nothing
  2753 ;; This function is called by:
  2754 ;;		_drive
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758     0453                     _CreateBreak:	
  2759                           ;psect for function _CreateBreak
  2760                           
  2761     0453                     l1198:	
  2762                           ;incstack = 0
  2763                           ; Regs used in _CreateBreak: [wreg+status,2]
  2764                           
  2765                           
  2766                           ;motorMain.c: 312:     currentCommand.sendId = 7;
  2767     0453  3007               	movlw	7
  2768     0454  0020               	movlb	0	; select bank0
  2769     0455  00BA               	movwf	_currentCommand+4
  2770     0456  3000               	movlw	0
  2771     0457  00BB               	movwf	_currentCommand+5
  2772     0458                     l1200:
  2773                           
  2774                           ;motorMain.c: 313:     currentCommand.sendIt = 0;
  2775     0458  01B8               	clrf	_currentCommand+2
  2776     0459  01B9               	clrf	_currentCommand+3
  2777     045A                     l1202:
  2778                           
  2779                           ;motorMain.c: 314:     currentCommand.sendLimit = 10;
  2780     045A  300A               	movlw	10
  2781     045B  00B6               	movwf	_currentCommand
  2782     045C  3000               	movlw	0
  2783     045D  00B7               	movwf	_currentCommand+1
  2784                           
  2785                           ;motorMain.c: 315:     currentCommand.receiveId = 0;
  2786     045E  01C1               	clrf	_currentCommand+11
  2787     045F  01C2               	clrf	_currentCommand+12
  2788                           
  2789                           ;motorMain.c: 316:     currentCommand.receiveLimit = 0;
  2790     0460  01BF               	clrf	_currentCommand+9
  2791     0461  01C0               	clrf	_currentCommand+10
  2792                           
  2793                           ;motorMain.c: 317:     currentCommand.receiveIt = 0;
  2794     0462  01BD               	clrf	_currentCommand+7
  2795     0463  01BE               	clrf	_currentCommand+8
  2796                           
  2797                           ;motorMain.c: 318:     currentCommand.done = 0;
  2798     0464  01C3               	clrf	_currentCommand+13
  2799     0465                     l1204:
  2800                           
  2801                           ;motorMain.c: 320:     currentCommand.toSend = Break;
  2802     0465  30A7               	movlw	(low (_Break| 0))& (0+255)
  2803     0466  00BC               	movwf	low ((_currentCommand| 0+6))
  2804     0467                     l1206:
  2805                           
  2806                           ;motorMain.c: 321:     PIE3bits.TXIE = 1;
  2807     0467  002E               	movlb	14	; select bank14
  2808     0468  1619               	bsf	25,4	;volatile
  2809     0469                     l171:
  2810     0469  0008               	return
  2811     046A                     __end_of_CreateBreak:
  2812                           
  2813                           	psect	text8
  2814     047A                     __ptext8:	
  2815 ;; *************** function _SetUpPumpArm *****************
  2816 ;; Defined at:
  2817 ;;		line 338 in file "motorMain.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;                  1    wreg      void 
  2824 ;; Registers used:
  2825 ;;		None
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/0
  2828 ;;		On exit  : 0/0
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2835 ;;Total ram usage:        0 bytes
  2836 ;; Hardware stack levels used: 1
  2837 ;; Hardware stack levels required when called: 2
  2838 ;; This function calls:
  2839 ;;		Nothing
  2840 ;; This function is called by:
  2841 ;;		_main
  2842 ;; This function uses a non-reentrant model
  2843 ;;
  2844                           
  2845     047A                     _SetUpPumpArm:	
  2846                           ;psect for function _SetUpPumpArm
  2847                           
  2848     047A                     l1208:	
  2849                           ;incstack = 0
  2850                           ; Regs used in _SetUpPumpArm: []
  2851                           
  2852                           
  2853                           ;motorMain.c: 339:     TRISBbits.TRISB0 = 0;
  2854     047A  0020               	movlb	0	; select bank0
  2855     047B  1012               	bcf	18,0	;volatile
  2856                           
  2857                           ;motorMain.c: 340:     TRISBbits.TRISB1 = 0;
  2858     047C  1092               	bcf	18,1	;volatile
  2859                           
  2860                           ;motorMain.c: 341:     ANSELBbits.ANSB0 = 0;
  2861     047D  003E               	movlb	30	; select bank30
  2862     047E  1043               	bcf	67,0	;volatile
  2863                           
  2864                           ;motorMain.c: 342:     ANSELBbits.ANSB1 = 0;
  2865     047F  10C3               	bcf	67,1	;volatile
  2866                           
  2867                           ;motorMain.c: 344:     LATBbits.LATB0 = 0;
  2868     0480  0020               	movlb	0	; select bank0
  2869     0481  1017               	bcf	23,0	;volatile
  2870                           
  2871                           ;motorMain.c: 345:     LATBbits.LATB1 = 0;
  2872     0482  1097               	bcf	23,1	;volatile
  2873     0483                     l177:
  2874     0483  0008               	return
  2875     0484                     __end_of_SetUpPumpArm:
  2876                           
  2877                           	psect	text9
  2878     0484                     __ptext9:	
  2879 ;; *************** function _SetUpPump *****************
  2880 ;; Defined at:
  2881 ;;		line 349 in file "motorMain.c"
  2882 ;; Parameters:    Size  Location     Type
  2883 ;;		None
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;		None
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      void 
  2888 ;; Registers used:
  2889 ;;		None
  2890 ;; Tracked objects:
  2891 ;;		On entry : 0/0
  2892 ;;		On exit  : 0/0
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2899 ;;Total ram usage:        0 bytes
  2900 ;; Hardware stack levels used: 1
  2901 ;; Hardware stack levels required when called: 2
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_main
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909     0484                     _SetUpPump:	
  2910                           ;psect for function _SetUpPump
  2911                           
  2912     0484                     l1210:	
  2913                           ;incstack = 0
  2914                           ; Regs used in _SetUpPump: []
  2915                           
  2916                           
  2917                           ;motorMain.c: 350:     TRISBbits.TRISB2 = 0;
  2918     0484  0020               	movlb	0	; select bank0
  2919     0485  1112               	bcf	18,2	;volatile
  2920                           
  2921                           ;motorMain.c: 351:     TRISBbits.TRISB3 = 0;
  2922     0486  1192               	bcf	18,3	;volatile
  2923                           
  2924                           ;motorMain.c: 352:     ANSELBbits.ANSB2 = 0;
  2925     0487  003E               	movlb	30	; select bank30
  2926     0488  1143               	bcf	67,2	;volatile
  2927                           
  2928                           ;motorMain.c: 353:     ANSELBbits.ANSB3 = 0;
  2929     0489  11C3               	bcf	67,3	;volatile
  2930                           
  2931                           ;motorMain.c: 355:     LATBbits.LATB2 = 0;
  2932     048A  0020               	movlb	0	; select bank0
  2933     048B  1117               	bcf	23,2	;volatile
  2934                           
  2935                           ;motorMain.c: 356:     LATBbits.LATB3 = 0;
  2936     048C  1197               	bcf	23,3	;volatile
  2937     048D                     l180:
  2938     048D  0008               	return
  2939     048E                     __end_of_SetUpPump:
  2940                           
  2941                           	psect	text10
  2942     0438                     __ptext10:	
  2943 ;; *************** function _MovePumpArm *****************
  2944 ;; Defined at:
  2945 ;;		line 359 in file "motorMain.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;  switchValue     2    0[BANK0 ] int 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;                  1    wreg      void 
  2952 ;; Registers used:
  2953 ;;		wreg, status,2, status,0
  2954 ;; Tracked objects:
  2955 ;;		On entry : 0/0
  2956 ;;		On exit  : 0/0
  2957 ;;		Unchanged: 0/0
  2958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2959 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;Total ram usage:        2 bytes
  2964 ;; Hardware stack levels used: 1
  2965 ;; Hardware stack levels required when called: 2
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_main
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973     0438                     _MovePumpArm:	
  2974                           ;psect for function _MovePumpArm
  2975                           
  2976     0438                     l1212:	
  2977                           ;incstack = 0
  2978                           ; Regs used in _MovePumpArm: [wreg+status,2+status,0]
  2979                           
  2980                           
  2981                           ;motorMain.c: 360:     LATBbits.LATB0 = 0;
  2982     0438  0020               	movlb	0	; select bank0
  2983     0439  1017               	bcf	23,0	;volatile
  2984                           
  2985                           ;motorMain.c: 361:     LATBbits.LATB1 = 0;
  2986     043A  1097               	bcf	23,1	;volatile
  2987     043B                     l1214:
  2988                           
  2989                           ;motorMain.c: 362:     if(switchValue == SWITCH_MIN){
  2990     043B  30E8               	movlw	232
  2991     043C  0668               	xorwf	MovePumpArm@switchValue,w
  2992     043D  3003               	movlw	3
  2993     043E  1903               	skipnz
  2994     043F  0669               	xorwf	MovePumpArm@switchValue+1,w
  2995     0440  1D03               	btfss	3,2
  2996     0441  2C43               	goto	u331
  2997     0442  2C44               	goto	u330
  2998     0443                     u331:
  2999     0443  2C47               	goto	l1218
  3000     0444                     u330:
  3001     0444                     l1216:
  3002                           
  3003                           ;motorMain.c: 363:             LATBbits.LATB0 = 1;
  3004     0444  1417               	bsf	23,0	;volatile
  3005                           
  3006                           ;motorMain.c: 364:             LATBbits.LATB1 = 0;
  3007     0445  1097               	bcf	23,1	;volatile
  3008                           
  3009                           ;motorMain.c: 365:     }
  3010     0446  2C52               	goto	l186
  3011     0447                     l1218:
  3012     0447  30D0               	movlw	208
  3013     0448  0668               	xorwf	MovePumpArm@switchValue,w
  3014     0449  3007               	movlw	7
  3015     044A  1903               	skipnz
  3016     044B  0669               	xorwf	MovePumpArm@switchValue+1,w
  3017     044C  1D03               	btfss	3,2
  3018     044D  2C4F               	goto	u341
  3019     044E  2C50               	goto	u340
  3020     044F                     u341:
  3021     044F  2C52               	goto	l186
  3022     0450                     u340:
  3023     0450                     l1220:
  3024                           
  3025                           ;motorMain.c: 367:             LATBbits.LATB0 = 0;
  3026     0450  1017               	bcf	23,0	;volatile
  3027                           
  3028                           ;motorMain.c: 368:             LATBbits.LATB1 = 1;
  3029     0451  1497               	bsf	23,1	;volatile
  3030     0452                     l186:
  3031     0452  0008               	return
  3032     0453                     __end_of_MovePumpArm:
  3033                           
  3034                           	psect	text11
  3035     046A                     __ptext11:	
  3036 ;; *************** function _ActivatePump *****************
  3037 ;; Defined at:
  3038 ;;		line 372 in file "motorMain.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  switchValue     2    0[BANK0 ] int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;Total ram usage:        2 bytes
  3057 ;; Hardware stack levels used: 1
  3058 ;; Hardware stack levels required when called: 2
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_main
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066     046A                     _ActivatePump:	
  3067                           ;psect for function _ActivatePump
  3068                           
  3069     046A                     l1222:	
  3070                           ;incstack = 0
  3071                           ; Regs used in _ActivatePump: [wreg]
  3072                           
  3073                           
  3074                           ;motorMain.c: 373:     if(switchValue <= SWITCH_MIN){
  3075     046A  3003               	movlw	3
  3076     046B  0020               	movlb	0	; select bank0
  3077     046C  0269               	subwf	ActivatePump@switchValue+1,w
  3078     046D  30E9               	movlw	233
  3079     046E  1903               	skipnz
  3080     046F  0268               	subwf	ActivatePump@switchValue,w
  3081     0470  1803               	skipnc
  3082     0471  2C73               	goto	u351
  3083     0472  2C74               	goto	u350
  3084     0473                     u351:
  3085     0473  2C77               	goto	l189
  3086     0474                     u350:
  3087     0474                     l1224:
  3088                           
  3089                           ;motorMain.c: 374:         LATBbits.LATB2 = 1;
  3090     0474  1517               	bsf	23,2	;volatile
  3091                           
  3092                           ;motorMain.c: 375:         LATBbits.LATB3 = 0;
  3093     0475  1197               	bcf	23,3	;volatile
  3094                           
  3095                           ;motorMain.c: 376:     }
  3096     0476  2C79               	goto	l191
  3097     0477                     l189:	
  3098                           ;motorMain.c: 377:     else{
  3099                           
  3100                           
  3101                           ;motorMain.c: 378:         LATBbits.LATB2 = 0;
  3102     0477  1117               	bcf	23,2	;volatile
  3103                           
  3104                           ;motorMain.c: 379:         LATBbits.LATB3 = 0;
  3105     0478  1197               	bcf	23,3	;volatile
  3106     0479                     l191:
  3107     0479  0008               	return
  3108     047A                     __end_of_ActivatePump:
  3109                           
  3110                           	psect	intentry
  3111     0004                     __pintentry:	
  3112 ;; *************** function _myFunction *****************
  3113 ;; Defined at:
  3114 ;;		line 382 in file "motorMain.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;		None
  3117 ;; Auto vars:     Size  Location     Type
  3118 ;;  input           2    7[COMMON] int 
  3119 ;; Return value:  Size  Location     Type
  3120 ;;                  1    wreg      void 
  3121 ;; Registers used:
  3122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3123 ;; Tracked objects:
  3124 ;;		On entry : 0/0
  3125 ;;		On exit  : 0/0
  3126 ;;		Unchanged: 0/0
  3127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3129 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3131 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3132 ;;Total ram usage:        4 bytes
  3133 ;; Hardware stack levels used: 1
  3134 ;; Hardware stack levels required when called: 1
  3135 ;; This function calls:
  3136 ;;		_GetControllerInput
  3137 ;; This function is called by:
  3138 ;;		Interrupt level 1
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142     0004                     _myFunction:
  3143                           
  3144                           ;incstack = 0
  3145     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  3146                           
  3147                           ; Regs used in _myFunction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3148     0005  3180               	pagesel	$
  3149     0006                     i1l1390:
  3150                           
  3151                           ;motorMain.c: 383:     if(PIR3bits.RCIF == 1){
  3152     0006  002E               	movlb	14	; select bank14
  3153     0007  1E8F               	btfss	15,5	;volatile
  3154     0008  280A               	goto	u59_21
  3155     0009  280B               	goto	u59_20
  3156     000A                     u59_21:
  3157     000A  2841               	goto	i1l196
  3158     000B                     u59_20:
  3159     000B                     i1l1392:
  3160                           
  3161                           ;motorMain.c: 384:         int input = RCREG;
  3162     000B  0022               	movlb	2	; select bank2
  3163     000C  0819               	movf	25,w	;volatile
  3164     000D  00F5               	movwf	??_myFunction
  3165     000E  01F6               	clrf	??_myFunction+1
  3166     000F  0875               	movf	??_myFunction,w
  3167     0010  00F7               	movwf	myFunction@input
  3168     0011  0876               	movf	??_myFunction+1,w
  3169     0012  00F8               	movwf	myFunction@input+1
  3170     0013                     i1l1394:
  3171                           
  3172                           ;motorMain.c: 385:         if(currentCommand.receiveId == CONTROL_INPUT){
  3173     0013  0020               	movlb	0	; select bank0
  3174     0014  0341               	decf	_currentCommand+11,w
  3175     0015  0442               	iorwf	_currentCommand+12,w
  3176     0016  1D03               	btfss	3,2
  3177     0017  2819               	goto	u60_21
  3178     0018  281A               	goto	u60_20
  3179     0019                     u60_21:
  3180     0019  2828               	goto	i1l1400
  3181     001A                     u60_20:
  3182     001A                     i1l1396:
  3183                           
  3184                           ;motorMain.c: 386:             GetControllerInput(input);
  3185     001A  0878               	movf	myFunction@input+1,w
  3186     001B  00F1               	movwf	GetControllerInput@input+1
  3187     001C  0877               	movf	myFunction@input,w
  3188     001D  00F0               	movwf	GetControllerInput@input
  3189     001E  3181  21C1  3180   	fcall	_GetControllerInput
  3190     0021                     i1l1398:
  3191                           
  3192                           ;motorMain.c: 387:             currentCommand.receiveIt = currentCommand.receiveIt + 1;
  3193     0021  0020               	movlb	0	; select bank0
  3194     0022  083D               	movf	_currentCommand+7,w
  3195     0023  3E01               	addlw	1
  3196     0024  00BD               	movwf	_currentCommand+7
  3197     0025  3000               	movlw	0
  3198     0026  3D3E               	addwfc	_currentCommand+8,w
  3199     0027  00BE               	movwf	_currentCommand+8
  3200     0028                     i1l1400:
  3201                           
  3202                           ;motorMain.c: 389:         if(currentCommand.receiveIt >= currentCommand.receiveLimit){
  3203     0028  083E               	movf	_currentCommand+8,w
  3204     0029  3A80               	xorlw	128
  3205     002A  00F5               	movwf	??_myFunction
  3206     002B  0840               	movf	_currentCommand+10,w
  3207     002C  3A80               	xorlw	128
  3208     002D  0275               	subwf	??_myFunction,w
  3209     002E  1D03               	skipz
  3210     002F  2832               	goto	u61_25
  3211     0030  083F               	movf	_currentCommand+9,w
  3212     0031  023D               	subwf	_currentCommand+7,w
  3213     0032                     u61_25:
  3214     0032  1C03               	skipc
  3215     0033  2835               	goto	u61_21
  3216     0034  2836               	goto	u61_20
  3217     0035                     u61_21:
  3218     0035  2839               	goto	i1l1404
  3219     0036                     u61_20:
  3220     0036                     i1l1402:
  3221                           
  3222                           ;motorMain.c: 390:             currentCommand.done = 1;
  3223     0036  0020               	movlb	0	; select bank0
  3224     0037  01C3               	clrf	_currentCommand+13
  3225     0038  0AC3               	incf	_currentCommand+13,f
  3226     0039                     i1l1404:
  3227                           
  3228                           ;motorMain.c: 392:         inputStage++;
  3229     0039  3001               	movlw	1
  3230     003A  0020               	movlb	0	; select bank0
  3231     003B  07C6               	addwf	_inputStage,f
  3232     003C  3000               	movlw	0
  3233     003D  3DC7               	addwfc	_inputStage+1,f
  3234     003E                     i1l1406:
  3235                           
  3236                           ;motorMain.c: 393:         PIR3bits.RCIF =0;
  3237     003E  002E               	movlb	14	; select bank14
  3238     003F  128F               	bcf	15,5	;volatile
  3239                           
  3240                           ;motorMain.c: 394:     }
  3241     0040  287B               	goto	i1l204
  3242     0041                     i1l196:	
  3243                           ;motorMain.c: 395:     else if(PIR3bits.TXIF == 1){
  3244                           
  3245     0041  1E0F               	btfss	15,4	;volatile
  3246     0042  2844               	goto	u62_21
  3247     0043  2845               	goto	u62_20
  3248     0044                     u62_21:
  3249     0044  287B               	goto	i1l204
  3250     0045                     u62_20:
  3251     0045                     i1l1408:
  3252                           
  3253                           ;motorMain.c: 396:         if(currentCommand.sendIt >= currentCommand.sendLimit){
  3254     0045  0020               	movlb	0	; select bank0
  3255     0046  0839               	movf	_currentCommand+3,w
  3256     0047  3A80               	xorlw	128
  3257     0048  00F5               	movwf	??_myFunction
  3258     0049  0837               	movf	_currentCommand+1,w
  3259     004A  3A80               	xorlw	128
  3260     004B  0275               	subwf	??_myFunction,w
  3261     004C  1D03               	skipz
  3262     004D  2850               	goto	u63_25
  3263     004E  0836               	movf	_currentCommand,w
  3264     004F  0238               	subwf	_currentCommand+2,w
  3265     0050                     u63_25:
  3266     0050  1C03               	skipc
  3267     0051  2853               	goto	u63_21
  3268     0052  2854               	goto	u63_20
  3269     0053                     u63_21:
  3270     0053  2868               	goto	i1l1416
  3271     0054                     u63_20:
  3272     0054                     i1l1410:
  3273                           
  3274                           ;motorMain.c: 397:             PIE3bits.TXIE = 0;
  3275     0054  002E               	movlb	14	; select bank14
  3276     0055  1219               	bcf	25,4	;volatile
  3277     0056                     i1l1412:
  3278                           
  3279                           ;motorMain.c: 398:             if(currentCommand.receiveLimit <= 0){
  3280     0056  0020               	movlb	0	; select bank0
  3281     0057  0840               	movf	_currentCommand+10,w
  3282     0058  3A80               	xorlw	128
  3283     0059  00F5               	movwf	??_myFunction
  3284     005A  3080               	movlw	128
  3285     005B  0275               	subwf	??_myFunction,w
  3286     005C  1D03               	skipz
  3287     005D  2860               	goto	u64_25
  3288     005E  3001               	movlw	1
  3289     005F  023F               	subwf	_currentCommand+9,w
  3290     0060                     u64_25:
  3291     0060  1803               	skipnc
  3292     0061  2863               	goto	u64_21
  3293     0062  2864               	goto	u64_20
  3294     0063                     u64_21:
  3295     0063  2879               	goto	i1l1420
  3296     0064                     u64_20:
  3297     0064                     i1l1414:
  3298                           
  3299                           ;motorMain.c: 399:                 currentCommand.done = 1;
  3300     0064  0020               	movlb	0	; select bank0
  3301     0065  01C3               	clrf	_currentCommand+13
  3302     0066  0AC3               	incf	_currentCommand+13,f
  3303     0067  2879               	goto	i1l1420
  3304     0068                     i1l1416:
  3305                           
  3306                           ;motorMain.c: 403:             TX1REGbits.TX1REG = currentCommand.toSend[currentCommand.
      +                          sendIt];
  3307     0068  0020               	movlb	0	; select bank0
  3308     0069  0838               	movf	_currentCommand+2,w
  3309     006A  073C               	addwf	low ((_currentCommand| 0+6)),w
  3310     006B  00F5               	movwf	??_myFunction
  3311     006C  0875               	movf	??_myFunction,w
  3312     006D  0086               	movwf	6
  3313     006E  0187               	clrf	7
  3314     006F  0801               	movf	1,w
  3315     0070  0022               	movlb	2	; select bank2
  3316     0071  009A               	movwf	26	;volatile
  3317     0072                     i1l1418:
  3318                           
  3319                           ;motorMain.c: 404:             currentCommand.sendIt = currentCommand.sendIt + 1;
  3320     0072  0020               	movlb	0	; select bank0
  3321     0073  0838               	movf	_currentCommand+2,w
  3322     0074  3E01               	addlw	1
  3323     0075  00B8               	movwf	_currentCommand+2
  3324     0076  3000               	movlw	0
  3325     0077  3D39               	addwfc	_currentCommand+3,w
  3326     0078  00B9               	movwf	_currentCommand+3
  3327     0079                     i1l1420:
  3328                           
  3329                           ;motorMain.c: 406:         PIR3bits.TXIF = 0;
  3330     0079  002E               	movlb	14	; select bank14
  3331     007A  120F               	bcf	15,4	;volatile
  3332     007B                     i1l204:
  3333     007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3334     007C  0009               	retfie
  3335     007D                     __end_of_myFunction:
  3336                           
  3337                           	psect	text13
  3338     01C1                     __ptext13:	
  3339 ;; *************** function _GetControllerInput *****************
  3340 ;; Defined at:
  3341 ;;		line 203 in file "motorMain.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  input           2    0[COMMON] int 
  3344 ;; Auto vars:     Size  Location     Type
  3345 ;;		None
  3346 ;; Return value:  Size  Location     Type
  3347 ;;                  1    wreg      void 
  3348 ;; Registers used:
  3349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3350 ;; Tracked objects:
  3351 ;;		On entry : 0/0
  3352 ;;		On exit  : 0/0
  3353 ;;		Unchanged: 0/0
  3354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3355 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3358 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3359 ;;Total ram usage:        5 bytes
  3360 ;; Hardware stack levels used: 1
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_myFunction
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368     01C1                     _GetControllerInput:	
  3369                           ;psect for function _GetControllerInput
  3370                           
  3371     01C1                     i1l1270:	
  3372                           ;incstack = 0
  3373                           ; Regs used in _GetControllerInput: [wreg-fsr1h+status,2+status,0]
  3374                           
  3375                           
  3376                           ;motorMain.c: 204:     if(currentCommand.receiveIt <0 ){
  3377     01C1  3007               	movlw	7
  3378     01C2  3E36               	addlw	(low (_currentCommand| 0))& (0+255)
  3379     01C3  0086               	movwf	6
  3380     01C4  0187               	clrf	7
  3381     01C5  3141               	addfsr 1,1
  3382     01C6  1F81               	btfss	1,7
  3383     01C7  29C9               	goto	u52_21
  3384     01C8  29CA               	goto	u52_20
  3385     01C9                     u52_21:
  3386     01C9  2A86               	goto	i1l1318
  3387     01CA                     u52_20:
  3388     01CA  2ACA               	goto	i1l121
  3389     01CB                     i1l1274:
  3390     01CB  0871               	movf	GetControllerInput@input+1,w
  3391     01CC  00B5               	movwf	_controls+21
  3392     01CD  0870               	movf	GetControllerInput@input,w
  3393     01CE  00B4               	movwf	_controls+20
  3394     01CF  2ACA               	goto	i1l121
  3395     01D0                     i1l1276:
  3396     01D0  3014               	movlw	20
  3397     01D1  3E20               	addlw	(low (_controls| 0))& (0+255)
  3398     01D2  0086               	movwf	6
  3399     01D3  0187               	clrf	7
  3400     01D4  0871               	movf	GetControllerInput@input+1,w
  3401     01D5  00F3               	movwf	??_GetControllerInput+1
  3402     01D6  0870               	movf	GetControllerInput@input,w
  3403     01D7  00F2               	movwf	??_GetControllerInput
  3404     01D8  0872               	movf	??_GetControllerInput,w
  3405     01D9  00F3               	movwf	??_GetControllerInput+1
  3406     01DA  01F2               	clrf	??_GetControllerInput
  3407     01DB  3F40               	moviw [0]fsr1
  3408     01DC  0772               	addwf	??_GetControllerInput,w
  3409     01DD  00A0               	movwf	_controls
  3410     01DE  3F41               	moviw [1]fsr1
  3411     01DF  3D73               	addwfc	??_GetControllerInput+1,w
  3412     01E0  00A1               	movwf	_controls+1
  3413     01E1  2ACA               	goto	i1l121
  3414     01E2                     i1l1280:
  3415     01E2  3014               	movlw	20
  3416     01E3  3E20               	addlw	(low (_controls| 0))& (0+255)
  3417     01E4  0086               	movwf	6
  3418     01E5  0187               	clrf	7
  3419     01E6  0871               	movf	GetControllerInput@input+1,w
  3420     01E7  00F3               	movwf	??_GetControllerInput+1
  3421     01E8  0870               	movf	GetControllerInput@input,w
  3422     01E9  00F2               	movwf	??_GetControllerInput
  3423     01EA  0872               	movf	??_GetControllerInput,w
  3424     01EB  00F3               	movwf	??_GetControllerInput+1
  3425     01EC  01F2               	clrf	??_GetControllerInput
  3426     01ED  3F40               	moviw [0]fsr1
  3427     01EE  0772               	addwf	??_GetControllerInput,w
  3428     01EF  00A2               	movwf	_controls+2
  3429     01F0  3F41               	moviw [1]fsr1
  3430     01F1  3D73               	addwfc	??_GetControllerInput+1,w
  3431     01F2  00A3               	movwf	_controls+3
  3432     01F3  2ACA               	goto	i1l121
  3433     01F4                     i1l1284:
  3434     01F4  3014               	movlw	20
  3435     01F5  3E20               	addlw	(low (_controls| 0))& (0+255)
  3436     01F6  0086               	movwf	6
  3437     01F7  0187               	clrf	7
  3438     01F8  0871               	movf	GetControllerInput@input+1,w
  3439     01F9  00F3               	movwf	??_GetControllerInput+1
  3440     01FA  0870               	movf	GetControllerInput@input,w
  3441     01FB  00F2               	movwf	??_GetControllerInput
  3442     01FC  0872               	movf	??_GetControllerInput,w
  3443     01FD  00F3               	movwf	??_GetControllerInput+1
  3444     01FE  01F2               	clrf	??_GetControllerInput
  3445     01FF  3F40               	moviw [0]fsr1
  3446     0200  0772               	addwf	??_GetControllerInput,w
  3447     0201  00A4               	movwf	_controls+4
  3448     0202  3F41               	moviw [1]fsr1
  3449     0203  3D73               	addwfc	??_GetControllerInput+1,w
  3450     0204  00A5               	movwf	_controls+5
  3451     0205  2ACA               	goto	i1l121
  3452     0206                     i1l1288:
  3453     0206  3014               	movlw	20
  3454     0207  3E20               	addlw	(low (_controls| 0))& (0+255)
  3455     0208  0086               	movwf	6
  3456     0209  0187               	clrf	7
  3457     020A  0871               	movf	GetControllerInput@input+1,w
  3458     020B  00F3               	movwf	??_GetControllerInput+1
  3459     020C  0870               	movf	GetControllerInput@input,w
  3460     020D  00F2               	movwf	??_GetControllerInput
  3461     020E  0872               	movf	??_GetControllerInput,w
  3462     020F  00F3               	movwf	??_GetControllerInput+1
  3463     0210  01F2               	clrf	??_GetControllerInput
  3464     0211  3F40               	moviw [0]fsr1
  3465     0212  0772               	addwf	??_GetControllerInput,w
  3466     0213  00A6               	movwf	_controls+6
  3467     0214  3F41               	moviw [1]fsr1
  3468     0215  3D73               	addwfc	??_GetControllerInput+1,w
  3469     0216  00A7               	movwf	_controls+7
  3470     0217  2ACA               	goto	i1l121
  3471     0218                     i1l1292:
  3472     0218  3014               	movlw	20
  3473     0219  3E20               	addlw	(low (_controls| 0))& (0+255)
  3474     021A  0086               	movwf	6
  3475     021B  0187               	clrf	7
  3476     021C  0871               	movf	GetControllerInput@input+1,w
  3477     021D  00F3               	movwf	??_GetControllerInput+1
  3478     021E  0870               	movf	GetControllerInput@input,w
  3479     021F  00F2               	movwf	??_GetControllerInput
  3480     0220  0872               	movf	??_GetControllerInput,w
  3481     0221  00F3               	movwf	??_GetControllerInput+1
  3482     0222  01F2               	clrf	??_GetControllerInput
  3483     0223  3F40               	moviw [0]fsr1
  3484     0224  0772               	addwf	??_GetControllerInput,w
  3485     0225  00A8               	movwf	_controls+8
  3486     0226  3F41               	moviw [1]fsr1
  3487     0227  3D73               	addwfc	??_GetControllerInput+1,w
  3488     0228  00A9               	movwf	_controls+9
  3489     0229  2ACA               	goto	i1l121
  3490     022A                     i1l1296:
  3491     022A  3014               	movlw	20
  3492     022B  3E20               	addlw	(low (_controls| 0))& (0+255)
  3493     022C  0086               	movwf	6
  3494     022D  0187               	clrf	7
  3495     022E  0871               	movf	GetControllerInput@input+1,w
  3496     022F  00F3               	movwf	??_GetControllerInput+1
  3497     0230  0870               	movf	GetControllerInput@input,w
  3498     0231  00F2               	movwf	??_GetControllerInput
  3499     0232  0872               	movf	??_GetControllerInput,w
  3500     0233  00F3               	movwf	??_GetControllerInput+1
  3501     0234  01F2               	clrf	??_GetControllerInput
  3502     0235  3F40               	moviw [0]fsr1
  3503     0236  0772               	addwf	??_GetControllerInput,w
  3504     0237  00AA               	movwf	_controls+10
  3505     0238  3F41               	moviw [1]fsr1
  3506     0239  3D73               	addwfc	??_GetControllerInput+1,w
  3507     023A  00AB               	movwf	_controls+11
  3508     023B  2ACA               	goto	i1l121
  3509     023C                     i1l1300:
  3510     023C  3014               	movlw	20
  3511     023D  3E20               	addlw	(low (_controls| 0))& (0+255)
  3512     023E  0086               	movwf	6
  3513     023F  0187               	clrf	7
  3514     0240  0871               	movf	GetControllerInput@input+1,w
  3515     0241  00F3               	movwf	??_GetControllerInput+1
  3516     0242  0870               	movf	GetControllerInput@input,w
  3517     0243  00F2               	movwf	??_GetControllerInput
  3518     0244  0872               	movf	??_GetControllerInput,w
  3519     0245  00F3               	movwf	??_GetControllerInput+1
  3520     0246  01F2               	clrf	??_GetControllerInput
  3521     0247  3F40               	moviw [0]fsr1
  3522     0248  0772               	addwf	??_GetControllerInput,w
  3523     0249  00AC               	movwf	_controls+12
  3524     024A  3F41               	moviw [1]fsr1
  3525     024B  3D73               	addwfc	??_GetControllerInput+1,w
  3526     024C  00AD               	movwf	_controls+13
  3527     024D  2ACA               	goto	i1l121
  3528     024E                     i1l1304:
  3529     024E  3014               	movlw	20
  3530     024F  3E20               	addlw	(low (_controls| 0))& (0+255)
  3531     0250  0086               	movwf	6
  3532     0251  0187               	clrf	7
  3533     0252  0871               	movf	GetControllerInput@input+1,w
  3534     0253  00F3               	movwf	??_GetControllerInput+1
  3535     0254  0870               	movf	GetControllerInput@input,w
  3536     0255  00F2               	movwf	??_GetControllerInput
  3537     0256  0872               	movf	??_GetControllerInput,w
  3538     0257  00F3               	movwf	??_GetControllerInput+1
  3539     0258  01F2               	clrf	??_GetControllerInput
  3540     0259  3F40               	moviw [0]fsr1
  3541     025A  0772               	addwf	??_GetControllerInput,w
  3542     025B  00AE               	movwf	_controls+14
  3543     025C  3F41               	moviw [1]fsr1
  3544     025D  3D73               	addwfc	??_GetControllerInput+1,w
  3545     025E  00AF               	movwf	_controls+15
  3546     025F  2ACA               	goto	i1l121
  3547     0260                     i1l1308:
  3548     0260  3014               	movlw	20
  3549     0261  3E20               	addlw	(low (_controls| 0))& (0+255)
  3550     0262  0086               	movwf	6
  3551     0263  0187               	clrf	7
  3552     0264  0871               	movf	GetControllerInput@input+1,w
  3553     0265  00F3               	movwf	??_GetControllerInput+1
  3554     0266  0870               	movf	GetControllerInput@input,w
  3555     0267  00F2               	movwf	??_GetControllerInput
  3556     0268  0872               	movf	??_GetControllerInput,w
  3557     0269  00F3               	movwf	??_GetControllerInput+1
  3558     026A  01F2               	clrf	??_GetControllerInput
  3559     026B  3F40               	moviw [0]fsr1
  3560     026C  0772               	addwf	??_GetControllerInput,w
  3561     026D  00B0               	movwf	_controls+16
  3562     026E  3F41               	moviw [1]fsr1
  3563     026F  3D73               	addwfc	??_GetControllerInput+1,w
  3564     0270  00B1               	movwf	_controls+17
  3565     0271  2ACA               	goto	i1l121
  3566     0272                     i1l1312:
  3567     0272  3014               	movlw	20
  3568     0273  3E20               	addlw	(low (_controls| 0))& (0+255)
  3569     0274  0086               	movwf	6
  3570     0275  0187               	clrf	7
  3571     0276  0871               	movf	GetControllerInput@input+1,w
  3572     0277  00F3               	movwf	??_GetControllerInput+1
  3573     0278  0870               	movf	GetControllerInput@input,w
  3574     0279  00F2               	movwf	??_GetControllerInput
  3575     027A  0872               	movf	??_GetControllerInput,w
  3576     027B  00F3               	movwf	??_GetControllerInput+1
  3577     027C  01F2               	clrf	??_GetControllerInput
  3578     027D  3F40               	moviw [0]fsr1
  3579     027E  0772               	addwf	??_GetControllerInput,w
  3580     027F  00B2               	movwf	_controls+18
  3581     0280  3F41               	moviw [1]fsr1
  3582     0281  3D73               	addwfc	??_GetControllerInput+1,w
  3583     0282  00B3               	movwf	_controls+19
  3584     0283                     i1l1314:
  3585     0283  01F9               	clrf	_currentInput
  3586     0284  01FA               	clrf	_currentInput+1
  3587     0285  2ACA               	goto	i1l121
  3588     0286                     i1l1318:
  3589                           
  3590                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3591                           ; Switch size 1, requested type "simple"
  3592                           ; Number of cases is 1, Range of values is 0 to 0
  3593                           ; switch strategies available:
  3594                           ; Name         Instructions Cycles
  3595                           ; simple_byte            4     3 (average)
  3596                           ; direct_byte            8     6 (fixed)
  3597                           ; jumptable            260     6 (fixed)
  3598                           ;	Chosen strategy is simple_byte
  3599     0286  0020               	movlb	0	; select bank0
  3600     0287  083E               	movf	_currentCommand+8,w
  3601     0288  3A00               	xorlw	0	; case 0
  3602     0289  1903               	skipnz
  3603     028A  2A8C               	goto	i1l1442
  3604     028B  2ACA               	goto	i1l121
  3605     028C                     i1l1442:
  3606                           
  3607                           ; Switch size 1, requested type "simple"
  3608                           ; Number of cases is 20, Range of values is 6 to 25
  3609                           ; switch strategies available:
  3610                           ; Name         Instructions Cycles
  3611                           ; direct_byte           49     9 (fixed)
  3612                           ; simple_byte           61    31 (average)
  3613                           ; jumptable            263     9 (fixed)
  3614                           ;	Chosen strategy is simple_byte
  3615     028C  083D               	movf	_currentCommand+7,w
  3616     028D  3A06               	xorlw	6	; case 6
  3617     028E  1903               	skipnz
  3618     028F  29CB               	goto	i1l1274
  3619     0290  3A01               	xorlw	1	; case 7
  3620     0291  1903               	skipnz
  3621     0292  29D0               	goto	i1l1276
  3622     0293  3A0F               	xorlw	15	; case 8
  3623     0294  1903               	skipnz
  3624     0295  29CB               	goto	i1l1274
  3625     0296  3A01               	xorlw	1	; case 9
  3626     0297  1903               	skipnz
  3627     0298  29E2               	goto	i1l1280
  3628     0299  3A03               	xorlw	3	; case 10
  3629     029A  1903               	skipnz
  3630     029B  29CB               	goto	i1l1274
  3631     029C  3A01               	xorlw	1	; case 11
  3632     029D  1903               	skipnz
  3633     029E  29F4               	goto	i1l1284
  3634     029F  3A07               	xorlw	7	; case 12
  3635     02A0  1903               	skipnz
  3636     02A1  29CB               	goto	i1l1274
  3637     02A2  3A01               	xorlw	1	; case 13
  3638     02A3  1903               	skipnz
  3639     02A4  2A06               	goto	i1l1288
  3640     02A5  3A03               	xorlw	3	; case 14
  3641     02A6  1903               	skipnz
  3642     02A7  29CB               	goto	i1l1274
  3643     02A8  3A01               	xorlw	1	; case 15
  3644     02A9  1903               	skipnz
  3645     02AA  2A18               	goto	i1l1292
  3646     02AB  3A1F               	xorlw	31	; case 16
  3647     02AC  1903               	skipnz
  3648     02AD  29CB               	goto	i1l1274
  3649     02AE  3A01               	xorlw	1	; case 17
  3650     02AF  1903               	skipnz
  3651     02B0  2A2A               	goto	i1l1296
  3652     02B1  3A03               	xorlw	3	; case 18
  3653     02B2  1903               	skipnz
  3654     02B3  29CB               	goto	i1l1274
  3655     02B4  3A01               	xorlw	1	; case 19
  3656     02B5  1903               	skipnz
  3657     02B6  2A3C               	goto	i1l1300
  3658     02B7  3A07               	xorlw	7	; case 20
  3659     02B8  1903               	skipnz
  3660     02B9  29CB               	goto	i1l1274
  3661     02BA  3A01               	xorlw	1	; case 21
  3662     02BB  1903               	skipnz
  3663     02BC  2A4E               	goto	i1l1304
  3664     02BD  3A03               	xorlw	3	; case 22
  3665     02BE  1903               	skipnz
  3666     02BF  29CB               	goto	i1l1274
  3667     02C0  3A01               	xorlw	1	; case 23
  3668     02C1  1903               	skipnz
  3669     02C2  2A60               	goto	i1l1308
  3670     02C3  3A0F               	xorlw	15	; case 24
  3671     02C4  1903               	skipnz
  3672     02C5  29CB               	goto	i1l1274
  3673     02C6  3A01               	xorlw	1	; case 25
  3674     02C7  1903               	skipnz
  3675     02C8  2A72               	goto	i1l1312
  3676     02C9  2ACA               	goto	i1l121
  3677     02CA                     i1l121:
  3678     02CA  0008               	return
  3679     02CB                     __end_of_GetControllerInput:
  3680     007E                     btemp	set	126	;btemp
  3681     007E                     int$flags	set	126
  3682     007E                     wtemp0	set	126
  3683                           
  3684                           	psect	config
  3685                           
  3686                           ;Config register CONFIG1 @ 0x8007
  3687                           ;	External Oscillator mode selection bits
  3688                           ;	FEXTOSC = ECH, EC above 8MHz; PFM set to high power
  3689                           ;	Power-up default value for COSC bits
  3690                           ;	RSTOSC = HFINT32, HFINTOSC with OSCFRQ= 32 MHz and CDIV = 1:1
  3691                           ;	Clock Out Enable bit
  3692                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  3693                           ;	Clock Switch Enable bit
  3694                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3695                           ;	Fail-Safe Clock Monitor Enable bit
  3696                           ;	FCMEN = OFF, FSCM timer disabled
  3697     8007                     	org	32775
  3698     8007  1F8F               	dw	8079
  3699                           
  3700                           ;Config register CONFIG2 @ 0x8008
  3701                           ;	Master Clear Enable bit
  3702                           ;	MCLRE = ON, MCLR pin is Master Clear function
  3703                           ;	Power-up Timer Enable bit
  3704                           ;	PWRTE = OFF, PWRT disabled
  3705                           ;	Low-Power BOR enable bit
  3706                           ;	LPBOREN = OFF, ULPBOR disabled
  3707                           ;	Brown-out reset enable bits
  3708                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  3709                           ;	Brown-out Reset Voltage Selection
  3710                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
  3711                           ;	Zero-cross detect disable
  3712                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
  3713                           ;	Peripheral Pin Select one-way control
  3714                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  3715                           ;	Stack Overflow/Underflow Reset Enable bit
  3716                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  3717                           ;	Background Debugger
  3718                           ;	DEBUG = 0x1, unprogrammed default
  3719     8008                     	org	32776
  3720     8008  3FFF               	dw	16383
  3721                           
  3722                           ;Config register CONFIG3 @ 0x8009
  3723                           ;	WDT Period Select bits
  3724                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3725                           ;	WDT operating mode
  3726                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  3727                           ;	WDT Window Select bits
  3728                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3729                           ;	WDT input clock selector
  3730                           ;	WDTCCS = SC, Software Control
  3731     8009                     	org	32777
  3732     8009  3F9F               	dw	16287
  3733                           
  3734                           ;Config register CONFIG4 @ 0x800A
  3735                           ;	UserNVM self-write protection bits
  3736                           ;	WRT = OFF, Write protection off
  3737                           ;	Scanner Enable bit
  3738                           ;	SCANE = available, Scanner module is available for use
  3739                           ;	Low Voltage Programming Enable bit
  3740                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
  3741     800A                     	org	32778
  3742     800A  3FFF               	dw	16383
  3743                           
  3744                           ;Config register CONFIG5 @ 0x800B
  3745                           ;	UserNVM Program memory code protection bit
  3746                           ;	CP = OFF, Program Memory code protection disabled
  3747                           ;	DataNVM code protection bit
  3748                           ;	CPD = OFF, Data EEPROM code protection disabled
  3749     800B                     	org	32779
  3750     800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    2
    Data        71
    BSS         78
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80      3      75
    BANK1            80      0      73
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 

    currentCommand$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 

    S34command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myFunction in COMMON

    _myFunction->_GetControllerInput

Critical Paths under _main in BANK0

    _main->_drive
    _drive->_CreateMoveBackwardCommmand
    _drive->_CreateMoveForwardCommmand
    _drive->_CreateTurnLeftCommmand
    _drive->_CreateTurnRightCommmand

Critical Paths under _myFunction in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myFunction in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myFunction in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myFunction in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myFunction in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myFunction in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myFunction in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myFunction in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myFunction in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myFunction in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myFunction in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myFunction in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myFunction in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     939
                       _ActivatePump
              _CreateControlsCommand
                        _MovePumpArm
                          _SetUpPump
                       _SetUpPumpArm
                              _drive
 ---------------------------------------------------------------------------------
 (1) _drive                                                3     3      0     569
                                              2 BANK0      1     1      0
                        _CreateBreak
              _CreateControlsCommand
         _CreateMoveBackwardCommmand
          _CreateMoveForwardCommmand
             _CreateTurnLeftCommmand
            _CreateTurnRightCommmand
 ---------------------------------------------------------------------------------
 (2) _CreateTurnRightCommmand                              2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateTurnLeftCommmand                               2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveForwardCommmand                            2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveBackwardCommmand                           2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateControlsCommand                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateBreak                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpPumpArm                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpPump                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MovePumpArm                                          2     0      2     196
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ActivatePump                                         2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myFunction                                           4     4      0     539
                                              5 COMMON     4     4      0
                 _GetControllerInput
 ---------------------------------------------------------------------------------
 (4) _GetControllerInput                                   5     3      2     516
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ActivatePump
   _CreateControlsCommand
   _MovePumpArm
   _SetUpPump
   _SetUpPumpArm
   _drive
     _CreateBreak
     _CreateControlsCommand
     _CreateMoveBackwardCommmand
     _CreateMoveForwardCommmand
     _CreateTurnLeftCommmand
     _CreateTurnRightCommmand

 _myFunction (ROOT)
   _GetControllerInput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Mar 28 10:47:27 2024

                               l110 034E                                 l104 031A  
                               l106 0336                                 l108 0342  
                               l162 041C                                 l171 0469  
                               l180 048D                                 l156 01C0  
                               l165 03C7                                 l174 0437  
                               l191 0479                                 l159 0401  
                               l168 03E6                                 l177 0483  
                               l186 0452                                 l189 0477  
                               u400 0104                                 u401 0103  
                               u330 0444                                 u410 0112  
                               u331 0443                                 u411 0111  
                               u340 0450                                 u500 01AB  
                               u420 0129                                 u341 044F  
                               u501 01AA                                 u421 0128  
                               u405 0100                                 u350 0474  
                               u510 01B9                                 u430 0137  
                               u351 0473                                 u511 01B8  
                               u431 0136                                 u415 010E  
                               u440 0145                                 u360 00C3  
                               u505 01A7                                 u441 0144  
                               u425 0125                                 u361 00C2  
                               u450 015C                                 u370 00D1  
                               u530 0309                                 u515 01B5  
                               u451 015B                                 u435 0133  
                               u371 00D0                                 u531 0308  
                               u460 016A                                 u380 00DF  
                               u540 0334                                 u461 0169  
                               u445 0141                                 u381 00DE  
                               u365 00BF                                 u541 0333  
                               u470 0178                                 u390 00F6  
                               u550 0340                                 u471 0177  
                               u455 0158                                 u391 00F5  
                               u375 00CD                                 u551 033F  
                               u480 018F                                 u560 034C  
                               u481 018E                                 u465 0166  
                               u385 00DB                                 u561 034B  
                               u490 019D                                 u570 0354  
                               u491 019C                                 u475 0174  
                               u395 00F2                                 u571 0353  
                               u580 035A                                 u485 018B  
                               u581 0359                                 u495 0199  
     __end_of_CreateControlsCommand 0438                                 wreg 0009  
        ?_CreateMoveForwardCommmand 0068                        _BAUD1CONbits 011F  
                              l1200 0458                                l1210 0484  
                              l1202 045A                                l1130 0426  
                              l1220 0450                                l1212 0438  
                              l1204 0465                                l1140 0435  
                              l1132 0428                                l1222 046A  
                              l1214 043B                                l1206 0467  
                              l1134 042C                                l1150 03FB  
                              l1142 03E7                                l1230 00D1  
                              l1224 0474                                l1216 0444  
                              l1208 047A                                l1136 042E  
                              l1128 041D                                l1160 0409  
                              l1152 03FD                                l1144 03EC  
                              l1240 0112                                l1232 00DF  
                              l1218 0447                                l1138 0434  
                              l1170 03A9                                l1162 0414  
                              l1154 03FF                                l1146 03EE  
                              l1250 014E                                l1242 011B  
                              l1234 00E8                                l1226 00B5  
                              l1330 02E0                                l1180 03C2  
                              l1172 03AE                                l1164 0416  
                              l1156 0402                                l1148 03F9  
                              l1260 018F                                l1252 015C  
                              l1244 0129                                l1236 00F6  
                              l1228 00C3                                l1340 02ED  
                              l1332 02E1                                l1324 02CB  
                              l1190 03DA                                l1182 03C5  
                              l1174 03B0                                l1166 0418  
                              l1158 0407                                l1262 019D  
                              l1254 016A                                l1246 0137  
                              l1238 0104                                l1350 02F8  
                              l1342 02EF                                l1334 02E4  
                              l1326 02D8                                l1192 03DD  
                              l1184 03C8                                l1176 03BB  
                              l1168 041A                                l1264 01AB  
                              l1256 0178                                l1248 0145  
                              l1360 02FE                                l1352 02F9  
                              l1344 02F2                                l1336 02E6  
                              l1328 02DE                                l1194 03E1  
                              l1186 03CD                                l1178 03BE  
                              l1266 01B9                                l1258 0181  
                              l1370 032A                                l1362 02FF  
                              l1354 02FA                                l1346 02F5  
                              l1338 02EB                                l1196 03E4  
                              l1188 03CF                                l1268 01BD  
                              l1380 034C                                l1372 0334  
                              l1364 0309                                l1356 02FB  
                              l1348 02F7                                l1198 0453  
                              l1382 034F                                l1374 0337  
                              l1366 030A                                l1358 02FC  
                              l1384 0354                                l1376 0340  
                              l1368 031B                                l1386 035A  
                              l1378 0343                                l1388 035E  
               __end_of_CreateBreak 046A                                _main 02CB  
                              fsr0h 0005                                fsr1h 0007  
                              indf0 0000                                fsr0l 0004  
                              indf1 0001                                fsr1l 0006  
                              btemp 007E                                start 007D  
            MovePumpArm@switchValue 0068           CreateTurnLeftCommmand@pwm 0068  
                             ?_main 0070                               i1l121 02CA  
                             i1l204 007B                               i1l196 0041  
                             _RCREG 0119                               u52_20 01CA  
                             u60_20 001A                               u52_21 01C9  
                             u60_21 0019                               u61_20 0036  
                             u61_21 0035                               u61_25 0032  
                             u62_20 0045                               u62_21 0044  
                             u63_20 0054                               u63_21 0053  
                             u63_25 0050                               u64_20 0064  
                             u64_21 0063                               u64_25 0060  
                             u59_20 000B                               u59_21 000A  
                _GetControllerInput 01C1                               _Break 00A7  
 __end_of_CreateMoveForwardCommmand 03C8           ??_CreateTurnRightCommmand 006A  
                             _drive 00B5                 ?_GetControllerInput 0070  
                             status 0003                               wtemp0 007E  
                   __initialization 007F                        __end_of_main 0364  
               _MoveBackwardCommand 00B1                ??_GetControllerInput 0072  
                            ??_main 006B                         _CreateBreak 0453  
                     ??_MovePumpArm 006A                              ?_drive 0070  
                            i1l1300 023C                              i1l1312 0272  
                            i1l1304 024E                              i1l1400 0028  
                            i1l1314 0283                              i1l1410 0054  
                            i1l1402 0036                              _RC5PPS 0F25  
                            i1l1308 0260                              i1l1420 0079  
                            i1l1412 0056                              i1l1404 0039  
                            i1l1318 0286                              i1l1270 01C1  
                            i1l1414 0064                              i1l1406 003E  
                            i1l1280 01E2                              i1l1416 0068  
                            i1l1408 0045                              i1l1442 028C  
                            i1l1274 01CB                              i1l1418 0072  
                            i1l1292 0218                              i1l1284 01F4  
                            i1l1276 01D0                              i1l1390 0006  
                            i1l1296 022A                              i1l1288 0206  
                            i1l1392 000B                              i1l1394 0013  
                            i1l1396 001A                              i1l1398 0021  
                      _ActivatePump 046A              _CreateTurnLeftCommmand 0402  
                      __pdataCOMMON 007B             __end_of__initialization 00B1  
               __end_of_MovePumpArm 0453                       ?_SetUpPumpArm 0070  
                    __pcstackCOMMON 0070                        __pidataBANK0 0389  
                      __pidataBANK1 0364                       __end_of_drive 01C1  
                  _TurnRightCommand 004E         ??_CreateMoveForwardCommmand 006A  
                           ??_drive 006A                          __pbssBANK0 0020  
                        __pbssBANK1 00C5                   __end_of_SetUpPump 048E  
             __end_of_CONTROL_INPUT 049E                      ??_SetUpPumpArm 0068  
                        __pmaintext 02CB                          __pintentry 0004  
        CreateTurnRightCommmand@pwm 0068               _CreateControlsCommand 041D  
                       _MovePumpArm 0438                             _Command 00DB  
     CreateMoveBackwardCommmand@pwm 0068           _CreateMoveForwardCommmand 03A9  
                           __ptext1 00B5                             __ptext2 03E7  
                           __ptext3 0402                             __ptext4 03A9  
                           __ptext5 03C8                             __ptext6 041D  
                           __ptext7 0453                             __ptext8 047A  
                           __ptext9 0484        ??_CreateMoveBackwardCommmand 006A  
                        _myFunction 0004                          _inputStage 0046  
                      ?_CreateBreak 0070                             clrloop0 0495  
              end_of_initialization 00B1                             init_ram 048E  
                           initloop 048F             ?_CreateTurnLeftCommmand 0068  
                   myFunction@input 0077            ?_CreateTurnRightCommmand 0068  
           ActivatePump@switchValue 0068              ?_CreateControlsCommand 0070  
              __end_of_SetUpPumpArm 0484                           _TRISAbits 0011  
                         _TRISBbits 0012                           _TRISCbits 0013  
                   _TurnLeftCommand 0058                           _RXPPSbits 0ECB  
    __end_of_CreateTurnLeftCommmand 041D                       __pidataCOMMON 049A  
                       ?_myFunction 0070                 start_initialization 007F  
                    _CONTROL_OUTPUT 007B                           _SetUpPump 0484  
                    _currentCommand 0036                         __pdataBANK0 0048  
                       __pdataBANK1 00A0     __end_of_CreateTurnRightCommmand 0402  
                _MoveForwardCommand 00BB  __end_of_CreateMoveBackwardCommmand 03E7  
        _CreateMoveBackwardCommmand 03C8             _EnableLaserScopeCommand 00A0  
                       __pbssCOMMON 0079                           ___latbits 0002  
                     __pcstackBANK0 0068                        ?_MovePumpArm 0068  
                      _currentInput 0079                          ?_SetUpPump 0070  
           GetControllerInput@input 0070                           _commandIt 0044  
                          _LATAbits 0016                            _LATBbits 0017  
                         clear_ram0 0494                            _PIE3bits 0719  
                      _SetUpPumpArm 047A                       ?_ActivatePump 0068  
                          _PIR3bits 070F             ??_CreateControlsCommand 0068  
                          _Controls 00C5                         ??_SetUpPump 0068  
                     _CONTROL_INPUT 049C                      ??_ActivatePump 006A  
        __end_of_GetControllerInput 02CB        CreateMoveForwardCommmand@pwm 0068  
                       _SP1BRGLbits 011B                          _ANSELAbits 0F38  
                        _ANSELBbits 0F43                          _ANSELCbits 0F4E  
                      ??_myFunction 0075                            __ptext10 0438  
                          __ptext11 046A                            __ptext13 01C1  
                          _controls 0020                          _RC1STAbits 011D  
                __end_of_myFunction 007D                            int$flags 007E  
       ?_CreateMoveBackwardCommmand 0068                          _INTCONbits 000B  
                          intlevel1 0000                  _GetUserDataCommand 0062  
                     __pstringtext1 049C                          _TX1REGbits 011A  
              __end_of_ActivatePump 047A                       ??_CreateBreak 0068  
          ??_CreateTurnLeftCommmand 006A                          _TX1STAbits 011E  
           _CreateTurnRightCommmand 03E7                          _SWITCH_MID 0048  
                        _SWITCH_MAX 004C                          _SWITCH_MIN 004A  

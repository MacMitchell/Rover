

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Mar 27 15:01:14 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F18855
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31     0000                     
    32                           ; Generated 21/06/2023 GMT
    33                           ; 
    34                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution. Publication is not required when
    48                           ;        this file is used in an embedded application.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F18855 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66     0000                     	;# 
    67     0001                     	;# 
    68     0002                     	;# 
    69     0003                     	;# 
    70     0004                     	;# 
    71     0005                     	;# 
    72     0006                     	;# 
    73     0007                     	;# 
    74     0008                     	;# 
    75     0009                     	;# 
    76     000A                     	;# 
    77     000B                     	;# 
    78     000C                     	;# 
    79     000D                     	;# 
    80     000E                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0013                     	;# 
    85     0016                     	;# 
    86     0017                     	;# 
    87     0018                     	;# 
    88     001C                     	;# 
    89     001C                     	;# 
    90     001D                     	;# 
    91     001D                     	;# 
    92     001E                     	;# 
    93     001F                     	;# 
    94     008C                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     008E                     	;# 
    99     008F                     	;# 
   100     0090                     	;# 
   101     0090                     	;# 
   102     0091                     	;# 
   103     0093                     	;# 
   104     0094                     	;# 
   105     0095                     	;# 
   106     0096                     	;# 
   107     0097                     	;# 
   108     0098                     	;# 
   109     0099                     	;# 
   110     009A                     	;# 
   111     009B                     	;# 
   112     009C                     	;# 
   113     009D                     	;# 
   114     009E                     	;# 
   115     010C                     	;# 
   116     010D                     	;# 
   117     010E                     	;# 
   118     010E                     	;# 
   119     010F                     	;# 
   120     0110                     	;# 
   121     0110                     	;# 
   122     0111                     	;# 
   123     0112                     	;# 
   124     0112                     	;# 
   125     0113                     	;# 
   126     0114                     	;# 
   127     0114                     	;# 
   128     0115                     	;# 
   129     0116                     	;# 
   130     0116                     	;# 
   131     0117                     	;# 
   132     0119                     	;# 
   133     0119                     	;# 
   134     0119                     	;# 
   135     011A                     	;# 
   136     011A                     	;# 
   137     011A                     	;# 
   138     011B                     	;# 
   139     011B                     	;# 
   140     011B                     	;# 
   141     011B                     	;# 
   142     011B                     	;# 
   143     011C                     	;# 
   144     011C                     	;# 
   145     011C                     	;# 
   146     011D                     	;# 
   147     011D                     	;# 
   148     011D                     	;# 
   149     011E                     	;# 
   150     011E                     	;# 
   151     011E                     	;# 
   152     011F                     	;# 
   153     011F                     	;# 
   154     011F                     	;# 
   155     011F                     	;# 
   156     011F                     	;# 
   157     018C                     	;# 
   158     018D                     	;# 
   159     018E                     	;# 
   160     018F                     	;# 
   161     0190                     	;# 
   162     0191                     	;# 
   163     0192                     	;# 
   164     0196                     	;# 
   165     0197                     	;# 
   166     0198                     	;# 
   167     0199                     	;# 
   168     019A                     	;# 
   169     019B                     	;# 
   170     019C                     	;# 
   171     020C                     	;# 
   172     020C                     	;# 
   173     020D                     	;# 
   174     020E                     	;# 
   175     020F                     	;# 
   176     020F                     	;# 
   177     0210                     	;# 
   178     0210                     	;# 
   179     0211                     	;# 
   180     0211                     	;# 
   181     0212                     	;# 
   182     0212                     	;# 
   183     0213                     	;# 
   184     0214                     	;# 
   185     0215                     	;# 
   186     0215                     	;# 
   187     0216                     	;# 
   188     0216                     	;# 
   189     0217                     	;# 
   190     0217                     	;# 
   191     0218                     	;# 
   192     0218                     	;# 
   193     0219                     	;# 
   194     021A                     	;# 
   195     021B                     	;# 
   196     021B                     	;# 
   197     021C                     	;# 
   198     021C                     	;# 
   199     021D                     	;# 
   200     021D                     	;# 
   201     021E                     	;# 
   202     021F                     	;# 
   203     028C                     	;# 
   204     028C                     	;# 
   205     028D                     	;# 
   206     028D                     	;# 
   207     028E                     	;# 
   208     028F                     	;# 
   209     0290                     	;# 
   210     0290                     	;# 
   211     0291                     	;# 
   212     0292                     	;# 
   213     0292                     	;# 
   214     0293                     	;# 
   215     0293                     	;# 
   216     0294                     	;# 
   217     0295                     	;# 
   218     0296                     	;# 
   219     0296                     	;# 
   220     0297                     	;# 
   221     0298                     	;# 
   222     0298                     	;# 
   223     0299                     	;# 
   224     0299                     	;# 
   225     029A                     	;# 
   226     029B                     	;# 
   227     029C                     	;# 
   228     029C                     	;# 
   229     029D                     	;# 
   230     030C                     	;# 
   231     030C                     	;# 
   232     030D                     	;# 
   233     030E                     	;# 
   234     030F                     	;# 
   235     0310                     	;# 
   236     0310                     	;# 
   237     0311                     	;# 
   238     0312                     	;# 
   239     0313                     	;# 
   240     0314                     	;# 
   241     0314                     	;# 
   242     0315                     	;# 
   243     0316                     	;# 
   244     0317                     	;# 
   245     0318                     	;# 
   246     0318                     	;# 
   247     0319                     	;# 
   248     031A                     	;# 
   249     031B                     	;# 
   250     031C                     	;# 
   251     031C                     	;# 
   252     031D                     	;# 
   253     031E                     	;# 
   254     031F                     	;# 
   255     038C                     	;# 
   256     038C                     	;# 
   257     038D                     	;# 
   258     038E                     	;# 
   259     0390                     	;# 
   260     0390                     	;# 
   261     0391                     	;# 
   262     0392                     	;# 
   263     040C                     	;# 
   264     040D                     	;# 
   265     040E                     	;# 
   266     040F                     	;# 
   267     0410                     	;# 
   268     0411                     	;# 
   269     0416                     	;# 
   270     0416                     	;# 
   271     0417                     	;# 
   272     0418                     	;# 
   273     0418                     	;# 
   274     0419                     	;# 
   275     041A                     	;# 
   276     041A                     	;# 
   277     041B                     	;# 
   278     041C                     	;# 
   279     041C                     	;# 
   280     041D                     	;# 
   281     041E                     	;# 
   282     041F                     	;# 
   283     048C                     	;# 
   284     048C                     	;# 
   285     048D                     	;# 
   286     048E                     	;# 
   287     048F                     	;# 
   288     048F                     	;# 
   289     0490                     	;# 
   290     0491                     	;# 
   291     0492                     	;# 
   292     0492                     	;# 
   293     0493                     	;# 
   294     0494                     	;# 
   295     0495                     	;# 
   296     0495                     	;# 
   297     0496                     	;# 
   298     0497                     	;# 
   299     0498                     	;# 
   300     0499                     	;# 
   301     049A                     	;# 
   302     049B                     	;# 
   303     049C                     	;# 
   304     049D                     	;# 
   305     050C                     	;# 
   306     050C                     	;# 
   307     050D                     	;# 
   308     050E                     	;# 
   309     050F                     	;# 
   310     050F                     	;# 
   311     0510                     	;# 
   312     0511                     	;# 
   313     0512                     	;# 
   314     0512                     	;# 
   315     0513                     	;# 
   316     0514                     	;# 
   317     0515                     	;# 
   318     0515                     	;# 
   319     0516                     	;# 
   320     0517                     	;# 
   321     0518                     	;# 
   322     0519                     	;# 
   323     051A                     	;# 
   324     051B                     	;# 
   325     051C                     	;# 
   326     051D                     	;# 
   327     058C                     	;# 
   328     058C                     	;# 
   329     058D                     	;# 
   330     058E                     	;# 
   331     058F                     	;# 
   332     058F                     	;# 
   333     0590                     	;# 
   334     0591                     	;# 
   335     0592                     	;# 
   336     0593                     	;# 
   337     060C                     	;# 
   338     060D                     	;# 
   339     060E                     	;# 
   340     060F                     	;# 
   341     0610                     	;# 
   342     0611                     	;# 
   343     0612                     	;# 
   344     0613                     	;# 
   345     0614                     	;# 
   346     0616                     	;# 
   347     0617                     	;# 
   348     0618                     	;# 
   349     0619                     	;# 
   350     061A                     	;# 
   351     061B                     	;# 
   352     061C                     	;# 
   353     061D                     	;# 
   354     061E                     	;# 
   355     068C                     	;# 
   356     068D                     	;# 
   357     068E                     	;# 
   358     068F                     	;# 
   359     0690                     	;# 
   360     0691                     	;# 
   361     0692                     	;# 
   362     0693                     	;# 
   363     0694                     	;# 
   364     070C                     	;# 
   365     070D                     	;# 
   366     070E                     	;# 
   367     070F                     	;# 
   368     0710                     	;# 
   369     0711                     	;# 
   370     0712                     	;# 
   371     0713                     	;# 
   372     0714                     	;# 
   373     0716                     	;# 
   374     0717                     	;# 
   375     0718                     	;# 
   376     0719                     	;# 
   377     071A                     	;# 
   378     071B                     	;# 
   379     071C                     	;# 
   380     071D                     	;# 
   381     071E                     	;# 
   382     0796                     	;# 
   383     0797                     	;# 
   384     0798                     	;# 
   385     0799                     	;# 
   386     079A                     	;# 
   387     079B                     	;# 
   388     080C                     	;# 
   389     080D                     	;# 
   390     080E                     	;# 
   391     080F                     	;# 
   392     0810                     	;# 
   393     0811                     	;# 
   394     0812                     	;# 
   395     0813                     	;# 
   396     0814                     	;# 
   397     081A                     	;# 
   398     081B                     	;# 
   399     081C                     	;# 
   400     081D                     	;# 
   401     081E                     	;# 
   402     081F                     	;# 
   403     088C                     	;# 
   404     088D                     	;# 
   405     088E                     	;# 
   406     088F                     	;# 
   407     0890                     	;# 
   408     0891                     	;# 
   409     0892                     	;# 
   410     0893                     	;# 
   411     0895                     	;# 
   412     0896                     	;# 
   413     0897                     	;# 
   414     0898                     	;# 
   415     0899                     	;# 
   416     089A                     	;# 
   417     089B                     	;# 
   418     090C                     	;# 
   419     090E                     	;# 
   420     090F                     	;# 
   421     091F                     	;# 
   422     091F                     	;# 
   423     098F                     	;# 
   424     098F                     	;# 
   425     0990                     	;# 
   426     0991                     	;# 
   427     0992                     	;# 
   428     0993                     	;# 
   429     0994                     	;# 
   430     0995                     	;# 
   431     0996                     	;# 
   432     0997                     	;# 
   433     0E0F                     	;# 
   434     0E10                     	;# 
   435     0E11                     	;# 
   436     0E12                     	;# 
   437     0E13                     	;# 
   438     0E14                     	;# 
   439     0E15                     	;# 
   440     0E16                     	;# 
   441     0E17                     	;# 
   442     0E18                     	;# 
   443     0E19                     	;# 
   444     0E1A                     	;# 
   445     0E1B                     	;# 
   446     0E1C                     	;# 
   447     0E1D                     	;# 
   448     0E1E                     	;# 
   449     0E1F                     	;# 
   450     0E20                     	;# 
   451     0E21                     	;# 
   452     0E22                     	;# 
   453     0E23                     	;# 
   454     0E24                     	;# 
   455     0E25                     	;# 
   456     0E26                     	;# 
   457     0E27                     	;# 
   458     0E28                     	;# 
   459     0E29                     	;# 
   460     0E2A                     	;# 
   461     0E2B                     	;# 
   462     0E2C                     	;# 
   463     0E2D                     	;# 
   464     0E2E                     	;# 
   465     0E2F                     	;# 
   466     0E30                     	;# 
   467     0E31                     	;# 
   468     0E32                     	;# 
   469     0E33                     	;# 
   470     0E34                     	;# 
   471     0E35                     	;# 
   472     0E36                     	;# 
   473     0E37                     	;# 
   474     0E8F                     	;# 
   475     0E90                     	;# 
   476     0E91                     	;# 
   477     0E92                     	;# 
   478     0E93                     	;# 
   479     0E94                     	;# 
   480     0E95                     	;# 
   481     0E96                     	;# 
   482     0E97                     	;# 
   483     0E9C                     	;# 
   484     0E9D                     	;# 
   485     0E9E                     	;# 
   486     0EA1                     	;# 
   487     0EA2                     	;# 
   488     0EA3                     	;# 
   489     0EA4                     	;# 
   490     0EA5                     	;# 
   491     0EA9                     	;# 
   492     0EAA                     	;# 
   493     0EAB                     	;# 
   494     0EAC                     	;# 
   495     0EB1                     	;# 
   496     0EB2                     	;# 
   497     0EB3                     	;# 
   498     0EB8                     	;# 
   499     0EB9                     	;# 
   500     0EBA                     	;# 
   501     0EBB                     	;# 
   502     0EBC                     	;# 
   503     0EBD                     	;# 
   504     0EBE                     	;# 
   505     0EC3                     	;# 
   506     0EC5                     	;# 
   507     0EC6                     	;# 
   508     0EC7                     	;# 
   509     0EC8                     	;# 
   510     0EC9                     	;# 
   511     0ECA                     	;# 
   512     0ECB                     	;# 
   513     0ECC                     	;# 
   514     0F10                     	;# 
   515     0F11                     	;# 
   516     0F12                     	;# 
   517     0F13                     	;# 
   518     0F14                     	;# 
   519     0F15                     	;# 
   520     0F16                     	;# 
   521     0F17                     	;# 
   522     0F18                     	;# 
   523     0F19                     	;# 
   524     0F1A                     	;# 
   525     0F1B                     	;# 
   526     0F1C                     	;# 
   527     0F1D                     	;# 
   528     0F1E                     	;# 
   529     0F1F                     	;# 
   530     0F20                     	;# 
   531     0F21                     	;# 
   532     0F22                     	;# 
   533     0F23                     	;# 
   534     0F24                     	;# 
   535     0F25                     	;# 
   536     0F26                     	;# 
   537     0F27                     	;# 
   538     0F38                     	;# 
   539     0F39                     	;# 
   540     0F3A                     	;# 
   541     0F3B                     	;# 
   542     0F3C                     	;# 
   543     0F3D                     	;# 
   544     0F3E                     	;# 
   545     0F3F                     	;# 
   546     0F40                     	;# 
   547     0F41                     	;# 
   548     0F43                     	;# 
   549     0F44                     	;# 
   550     0F45                     	;# 
   551     0F46                     	;# 
   552     0F47                     	;# 
   553     0F48                     	;# 
   554     0F49                     	;# 
   555     0F4A                     	;# 
   556     0F4B                     	;# 
   557     0F4C                     	;# 
   558     0F4E                     	;# 
   559     0F4F                     	;# 
   560     0F50                     	;# 
   561     0F51                     	;# 
   562     0F52                     	;# 
   563     0F53                     	;# 
   564     0F54                     	;# 
   565     0F55                     	;# 
   566     0F56                     	;# 
   567     0F57                     	;# 
   568     0F65                     	;# 
   569     0F68                     	;# 
   570     0F69                     	;# 
   571     0F6A                     	;# 
   572     0F6B                     	;# 
   573     0FE4                     	;# 
   574     0FE5                     	;# 
   575     0FE6                     	;# 
   576     0FE7                     	;# 
   577     0FE8                     	;# 
   578     0FE9                     	;# 
   579     0FEA                     	;# 
   580     0FEB                     	;# 
   581     0FED                     	;# 
   582     0FEE                     	;# 
   583     0FEF                     	;# 
   584     0000                     	;# 
   585     0001                     	;# 
   586     0002                     	;# 
   587     0003                     	;# 
   588     0004                     	;# 
   589     0005                     	;# 
   590     0006                     	;# 
   591     0007                     	;# 
   592     0008                     	;# 
   593     0009                     	;# 
   594     000A                     	;# 
   595     000B                     	;# 
   596     000C                     	;# 
   597     000D                     	;# 
   598     000E                     	;# 
   599     0010                     	;# 
   600     0011                     	;# 
   601     0012                     	;# 
   602     0013                     	;# 
   603     0016                     	;# 
   604     0017                     	;# 
   605     0018                     	;# 
   606     001C                     	;# 
   607     001C                     	;# 
   608     001D                     	;# 
   609     001D                     	;# 
   610     001E                     	;# 
   611     001F                     	;# 
   612     008C                     	;# 
   613     008C                     	;# 
   614     008D                     	;# 
   615     008E                     	;# 
   616     008E                     	;# 
   617     008F                     	;# 
   618     0090                     	;# 
   619     0090                     	;# 
   620     0091                     	;# 
   621     0093                     	;# 
   622     0094                     	;# 
   623     0095                     	;# 
   624     0096                     	;# 
   625     0097                     	;# 
   626     0098                     	;# 
   627     0099                     	;# 
   628     009A                     	;# 
   629     009B                     	;# 
   630     009C                     	;# 
   631     009D                     	;# 
   632     009E                     	;# 
   633     010C                     	;# 
   634     010D                     	;# 
   635     010E                     	;# 
   636     010E                     	;# 
   637     010F                     	;# 
   638     0110                     	;# 
   639     0110                     	;# 
   640     0111                     	;# 
   641     0112                     	;# 
   642     0112                     	;# 
   643     0113                     	;# 
   644     0114                     	;# 
   645     0114                     	;# 
   646     0115                     	;# 
   647     0116                     	;# 
   648     0116                     	;# 
   649     0117                     	;# 
   650     0119                     	;# 
   651     0119                     	;# 
   652     0119                     	;# 
   653     011A                     	;# 
   654     011A                     	;# 
   655     011A                     	;# 
   656     011B                     	;# 
   657     011B                     	;# 
   658     011B                     	;# 
   659     011B                     	;# 
   660     011B                     	;# 
   661     011C                     	;# 
   662     011C                     	;# 
   663     011C                     	;# 
   664     011D                     	;# 
   665     011D                     	;# 
   666     011D                     	;# 
   667     011E                     	;# 
   668     011E                     	;# 
   669     011E                     	;# 
   670     011F                     	;# 
   671     011F                     	;# 
   672     011F                     	;# 
   673     011F                     	;# 
   674     011F                     	;# 
   675     018C                     	;# 
   676     018D                     	;# 
   677     018E                     	;# 
   678     018F                     	;# 
   679     0190                     	;# 
   680     0191                     	;# 
   681     0192                     	;# 
   682     0196                     	;# 
   683     0197                     	;# 
   684     0198                     	;# 
   685     0199                     	;# 
   686     019A                     	;# 
   687     019B                     	;# 
   688     019C                     	;# 
   689     020C                     	;# 
   690     020C                     	;# 
   691     020D                     	;# 
   692     020E                     	;# 
   693     020F                     	;# 
   694     020F                     	;# 
   695     0210                     	;# 
   696     0210                     	;# 
   697     0211                     	;# 
   698     0211                     	;# 
   699     0212                     	;# 
   700     0212                     	;# 
   701     0213                     	;# 
   702     0214                     	;# 
   703     0215                     	;# 
   704     0215                     	;# 
   705     0216                     	;# 
   706     0216                     	;# 
   707     0217                     	;# 
   708     0217                     	;# 
   709     0218                     	;# 
   710     0218                     	;# 
   711     0219                     	;# 
   712     021A                     	;# 
   713     021B                     	;# 
   714     021B                     	;# 
   715     021C                     	;# 
   716     021C                     	;# 
   717     021D                     	;# 
   718     021D                     	;# 
   719     021E                     	;# 
   720     021F                     	;# 
   721     028C                     	;# 
   722     028C                     	;# 
   723     028D                     	;# 
   724     028D                     	;# 
   725     028E                     	;# 
   726     028F                     	;# 
   727     0290                     	;# 
   728     0290                     	;# 
   729     0291                     	;# 
   730     0292                     	;# 
   731     0292                     	;# 
   732     0293                     	;# 
   733     0293                     	;# 
   734     0294                     	;# 
   735     0295                     	;# 
   736     0296                     	;# 
   737     0296                     	;# 
   738     0297                     	;# 
   739     0298                     	;# 
   740     0298                     	;# 
   741     0299                     	;# 
   742     0299                     	;# 
   743     029A                     	;# 
   744     029B                     	;# 
   745     029C                     	;# 
   746     029C                     	;# 
   747     029D                     	;# 
   748     030C                     	;# 
   749     030C                     	;# 
   750     030D                     	;# 
   751     030E                     	;# 
   752     030F                     	;# 
   753     0310                     	;# 
   754     0310                     	;# 
   755     0311                     	;# 
   756     0312                     	;# 
   757     0313                     	;# 
   758     0314                     	;# 
   759     0314                     	;# 
   760     0315                     	;# 
   761     0316                     	;# 
   762     0317                     	;# 
   763     0318                     	;# 
   764     0318                     	;# 
   765     0319                     	;# 
   766     031A                     	;# 
   767     031B                     	;# 
   768     031C                     	;# 
   769     031C                     	;# 
   770     031D                     	;# 
   771     031E                     	;# 
   772     031F                     	;# 
   773     038C                     	;# 
   774     038C                     	;# 
   775     038D                     	;# 
   776     038E                     	;# 
   777     0390                     	;# 
   778     0390                     	;# 
   779     0391                     	;# 
   780     0392                     	;# 
   781     040C                     	;# 
   782     040D                     	;# 
   783     040E                     	;# 
   784     040F                     	;# 
   785     0410                     	;# 
   786     0411                     	;# 
   787     0416                     	;# 
   788     0416                     	;# 
   789     0417                     	;# 
   790     0418                     	;# 
   791     0418                     	;# 
   792     0419                     	;# 
   793     041A                     	;# 
   794     041A                     	;# 
   795     041B                     	;# 
   796     041C                     	;# 
   797     041C                     	;# 
   798     041D                     	;# 
   799     041E                     	;# 
   800     041F                     	;# 
   801     048C                     	;# 
   802     048C                     	;# 
   803     048D                     	;# 
   804     048E                     	;# 
   805     048F                     	;# 
   806     048F                     	;# 
   807     0490                     	;# 
   808     0491                     	;# 
   809     0492                     	;# 
   810     0492                     	;# 
   811     0493                     	;# 
   812     0494                     	;# 
   813     0495                     	;# 
   814     0495                     	;# 
   815     0496                     	;# 
   816     0497                     	;# 
   817     0498                     	;# 
   818     0499                     	;# 
   819     049A                     	;# 
   820     049B                     	;# 
   821     049C                     	;# 
   822     049D                     	;# 
   823     050C                     	;# 
   824     050C                     	;# 
   825     050D                     	;# 
   826     050E                     	;# 
   827     050F                     	;# 
   828     050F                     	;# 
   829     0510                     	;# 
   830     0511                     	;# 
   831     0512                     	;# 
   832     0512                     	;# 
   833     0513                     	;# 
   834     0514                     	;# 
   835     0515                     	;# 
   836     0515                     	;# 
   837     0516                     	;# 
   838     0517                     	;# 
   839     0518                     	;# 
   840     0519                     	;# 
   841     051A                     	;# 
   842     051B                     	;# 
   843     051C                     	;# 
   844     051D                     	;# 
   845     058C                     	;# 
   846     058C                     	;# 
   847     058D                     	;# 
   848     058E                     	;# 
   849     058F                     	;# 
   850     058F                     	;# 
   851     0590                     	;# 
   852     0591                     	;# 
   853     0592                     	;# 
   854     0593                     	;# 
   855     060C                     	;# 
   856     060D                     	;# 
   857     060E                     	;# 
   858     060F                     	;# 
   859     0610                     	;# 
   860     0611                     	;# 
   861     0612                     	;# 
   862     0613                     	;# 
   863     0614                     	;# 
   864     0616                     	;# 
   865     0617                     	;# 
   866     0618                     	;# 
   867     0619                     	;# 
   868     061A                     	;# 
   869     061B                     	;# 
   870     061C                     	;# 
   871     061D                     	;# 
   872     061E                     	;# 
   873     068C                     	;# 
   874     068D                     	;# 
   875     068E                     	;# 
   876     068F                     	;# 
   877     0690                     	;# 
   878     0691                     	;# 
   879     0692                     	;# 
   880     0693                     	;# 
   881     0694                     	;# 
   882     070C                     	;# 
   883     070D                     	;# 
   884     070E                     	;# 
   885     070F                     	;# 
   886     0710                     	;# 
   887     0711                     	;# 
   888     0712                     	;# 
   889     0713                     	;# 
   890     0714                     	;# 
   891     0716                     	;# 
   892     0717                     	;# 
   893     0718                     	;# 
   894     0719                     	;# 
   895     071A                     	;# 
   896     071B                     	;# 
   897     071C                     	;# 
   898     071D                     	;# 
   899     071E                     	;# 
   900     0796                     	;# 
   901     0797                     	;# 
   902     0798                     	;# 
   903     0799                     	;# 
   904     079A                     	;# 
   905     079B                     	;# 
   906     080C                     	;# 
   907     080D                     	;# 
   908     080E                     	;# 
   909     080F                     	;# 
   910     0810                     	;# 
   911     0811                     	;# 
   912     0812                     	;# 
   913     0813                     	;# 
   914     0814                     	;# 
   915     081A                     	;# 
   916     081B                     	;# 
   917     081C                     	;# 
   918     081D                     	;# 
   919     081E                     	;# 
   920     081F                     	;# 
   921     088C                     	;# 
   922     088D                     	;# 
   923     088E                     	;# 
   924     088F                     	;# 
   925     0890                     	;# 
   926     0891                     	;# 
   927     0892                     	;# 
   928     0893                     	;# 
   929     0895                     	;# 
   930     0896                     	;# 
   931     0897                     	;# 
   932     0898                     	;# 
   933     0899                     	;# 
   934     089A                     	;# 
   935     089B                     	;# 
   936     090C                     	;# 
   937     090E                     	;# 
   938     090F                     	;# 
   939     091F                     	;# 
   940     091F                     	;# 
   941     098F                     	;# 
   942     098F                     	;# 
   943     0990                     	;# 
   944     0991                     	;# 
   945     0992                     	;# 
   946     0993                     	;# 
   947     0994                     	;# 
   948     0995                     	;# 
   949     0996                     	;# 
   950     0997                     	;# 
   951     0E0F                     	;# 
   952     0E10                     	;# 
   953     0E11                     	;# 
   954     0E12                     	;# 
   955     0E13                     	;# 
   956     0E14                     	;# 
   957     0E15                     	;# 
   958     0E16                     	;# 
   959     0E17                     	;# 
   960     0E18                     	;# 
   961     0E19                     	;# 
   962     0E1A                     	;# 
   963     0E1B                     	;# 
   964     0E1C                     	;# 
   965     0E1D                     	;# 
   966     0E1E                     	;# 
   967     0E1F                     	;# 
   968     0E20                     	;# 
   969     0E21                     	;# 
   970     0E22                     	;# 
   971     0E23                     	;# 
   972     0E24                     	;# 
   973     0E25                     	;# 
   974     0E26                     	;# 
   975     0E27                     	;# 
   976     0E28                     	;# 
   977     0E29                     	;# 
   978     0E2A                     	;# 
   979     0E2B                     	;# 
   980     0E2C                     	;# 
   981     0E2D                     	;# 
   982     0E2E                     	;# 
   983     0E2F                     	;# 
   984     0E30                     	;# 
   985     0E31                     	;# 
   986     0E32                     	;# 
   987     0E33                     	;# 
   988     0E34                     	;# 
   989     0E35                     	;# 
   990     0E36                     	;# 
   991     0E37                     	;# 
   992     0E8F                     	;# 
   993     0E90                     	;# 
   994     0E91                     	;# 
   995     0E92                     	;# 
   996     0E93                     	;# 
   997     0E94                     	;# 
   998     0E95                     	;# 
   999     0E96                     	;# 
  1000     0E97                     	;# 
  1001     0E9C                     	;# 
  1002     0E9D                     	;# 
  1003     0E9E                     	;# 
  1004     0EA1                     	;# 
  1005     0EA2                     	;# 
  1006     0EA3                     	;# 
  1007     0EA4                     	;# 
  1008     0EA5                     	;# 
  1009     0EA9                     	;# 
  1010     0EAA                     	;# 
  1011     0EAB                     	;# 
  1012     0EAC                     	;# 
  1013     0EB1                     	;# 
  1014     0EB2                     	;# 
  1015     0EB3                     	;# 
  1016     0EB8                     	;# 
  1017     0EB9                     	;# 
  1018     0EBA                     	;# 
  1019     0EBB                     	;# 
  1020     0EBC                     	;# 
  1021     0EBD                     	;# 
  1022     0EBE                     	;# 
  1023     0EC3                     	;# 
  1024     0EC5                     	;# 
  1025     0EC6                     	;# 
  1026     0EC7                     	;# 
  1027     0EC8                     	;# 
  1028     0EC9                     	;# 
  1029     0ECA                     	;# 
  1030     0ECB                     	;# 
  1031     0ECC                     	;# 
  1032     0F10                     	;# 
  1033     0F11                     	;# 
  1034     0F12                     	;# 
  1035     0F13                     	;# 
  1036     0F14                     	;# 
  1037     0F15                     	;# 
  1038     0F16                     	;# 
  1039     0F17                     	;# 
  1040     0F18                     	;# 
  1041     0F19                     	;# 
  1042     0F1A                     	;# 
  1043     0F1B                     	;# 
  1044     0F1C                     	;# 
  1045     0F1D                     	;# 
  1046     0F1E                     	;# 
  1047     0F1F                     	;# 
  1048     0F20                     	;# 
  1049     0F21                     	;# 
  1050     0F22                     	;# 
  1051     0F23                     	;# 
  1052     0F24                     	;# 
  1053     0F25                     	;# 
  1054     0F26                     	;# 
  1055     0F27                     	;# 
  1056     0F38                     	;# 
  1057     0F39                     	;# 
  1058     0F3A                     	;# 
  1059     0F3B                     	;# 
  1060     0F3C                     	;# 
  1061     0F3D                     	;# 
  1062     0F3E                     	;# 
  1063     0F3F                     	;# 
  1064     0F40                     	;# 
  1065     0F41                     	;# 
  1066     0F43                     	;# 
  1067     0F44                     	;# 
  1068     0F45                     	;# 
  1069     0F46                     	;# 
  1070     0F47                     	;# 
  1071     0F48                     	;# 
  1072     0F49                     	;# 
  1073     0F4A                     	;# 
  1074     0F4B                     	;# 
  1075     0F4C                     	;# 
  1076     0F4E                     	;# 
  1077     0F4F                     	;# 
  1078     0F50                     	;# 
  1079     0F51                     	;# 
  1080     0F52                     	;# 
  1081     0F53                     	;# 
  1082     0F54                     	;# 
  1083     0F55                     	;# 
  1084     0F56                     	;# 
  1085     0F57                     	;# 
  1086     0F65                     	;# 
  1087     0F68                     	;# 
  1088     0F69                     	;# 
  1089     0F6A                     	;# 
  1090     0F6B                     	;# 
  1091     0FE4                     	;# 
  1092     0FE5                     	;# 
  1093     0FE6                     	;# 
  1094     0FE7                     	;# 
  1095     0FE8                     	;# 
  1096     0FE9                     	;# 
  1097     0FEA                     	;# 
  1098     0FEB                     	;# 
  1099     0FED                     	;# 
  1100     0FEE                     	;# 
  1101     0FEF                     	;# 
  1102                           
  1103                           	psect	idataCOMMON
  1104     0436                     __pidataCOMMON:
  1105                           
  1106                           ;initializer for _CONTROL_OUTPUT
  1107     0436  3401               	retlw	1
  1108     0437  3400               	retlw	0
  1109                           
  1110                           	psect	idataBANK0
  1111     0364                     __pidataBANK0:
  1112                           
  1113                           ;initializer for _SWITCH_MID
  1114     0364  34DC               	retlw	220
  1115     0365  3405               	retlw	5
  1116                           
  1117                           ;initializer for _SWITCH_MIN
  1118     0366  344C               	retlw	76
  1119     0367  3404               	retlw	4
  1120                           
  1121                           ;initializer for _SWITCH_MAX
  1122     0368  346C               	retlw	108
  1123     0369  3407               	retlw	7
  1124                           
  1125                           ;initializer for _TurnRightCommand
  1126     036A  34FE               	retlw	254
  1127     036B  3419               	retlw	25
  1128     036C  3401               	retlw	1
  1129     036D  3406               	retlw	6
  1130     036E  3404               	retlw	4
  1131     036F  3400               	retlw	0
  1132     0370  3402               	retlw	2
  1133     0371  3432               	retlw	50
  1134     0372  3401               	retlw	1
  1135     0373  3432               	retlw	50
  1136                           
  1137                           ;initializer for _TurnLeftCommand
  1138     0374  34FE               	retlw	254
  1139     0375  3419               	retlw	25
  1140     0376  3401               	retlw	1
  1141     0377  3406               	retlw	6
  1142     0378  3404               	retlw	4
  1143     0379  3400               	retlw	0
  1144     037A  3401               	retlw	1
  1145     037B  3432               	retlw	50
  1146     037C  3402               	retlw	2
  1147     037D  3432               	retlw	50
  1148                           
  1149                           ;initializer for _GetUserDataCommand
  1150     037E  34FE               	retlw	254
  1151     037F  3419               	retlw	25
  1152     0380  3401               	retlw	1
  1153     0381  3405               	retlw	5
  1154     0382  3400               	retlw	0
  1155     0383  3400               	retlw	0
  1156                           
  1157                           	psect	idataBANK1
  1158     033F                     __pidataBANK1:
  1159                           
  1160                           ;initializer for _EnableLaserScopeCommand
  1161     033F  34FE               	retlw	254
  1162     0340  3419               	retlw	25
  1163     0341  3401               	retlw	1
  1164     0342  3408               	retlw	8
  1165     0343  3401               	retlw	1
  1166     0344  3400               	retlw	0
  1167     0345  3401               	retlw	1
  1168                           
  1169                           ;initializer for _Break
  1170     0346  34FE               	retlw	254
  1171     0347  3419               	retlw	25
  1172     0348  3401               	retlw	1
  1173     0349  3406               	retlw	6
  1174     034A  3404               	retlw	4
  1175     034B  3400               	retlw	0
  1176     034C  3400               	retlw	0
  1177     034D  3400               	retlw	0
  1178     034E  3400               	retlw	0
  1179     034F  3400               	retlw	0
  1180                           
  1181                           ;initializer for _MoveBackwardCommand
  1182     0350  34FE               	retlw	254
  1183     0351  3419               	retlw	25
  1184     0352  3401               	retlw	1
  1185     0353  3406               	retlw	6
  1186     0354  3404               	retlw	4
  1187     0355  3400               	retlw	0
  1188     0356  3402               	retlw	2
  1189     0357  3432               	retlw	50
  1190     0358  3402               	retlw	2
  1191     0359  3432               	retlw	50
  1192                           
  1193                           ;initializer for _MoveForwardCommand
  1194     035A  34FE               	retlw	254
  1195     035B  3419               	retlw	25
  1196     035C  3401               	retlw	1
  1197     035D  3406               	retlw	6
  1198     035E  3404               	retlw	4
  1199     035F  3400               	retlw	0
  1200     0360  3401               	retlw	1
  1201     0361  3432               	retlw	50
  1202     0362  3401               	retlw	1
  1203     0363  3432               	retlw	50
  1204                           
  1205                           	psect	stringtext1
  1206     0438                     __pstringtext1:
  1207     0438                     _CONTROL_INPUT:
  1208     0438  3401               	retlw	1
  1209     0439  3400               	retlw	0
  1210     043A                     __end_of_CONTROL_INPUT:
  1211     000B                     _INTCONbits	set	11
  1212     0013                     _TRISCbits	set	19
  1213     0016                     _LATAbits	set	22
  1214     0011                     _TRISAbits	set	17
  1215     011A                     _TX1REGbits	set	282
  1216     0119                     _RCREG	set	281
  1217     011D                     _RC1STAbits	set	285
  1218     011B                     _SP1BRGLbits	set	283
  1219     011E                     _TX1STAbits	set	286
  1220     011F                     _BAUD1CONbits	set	287
  1221     070F                     _PIR3bits	set	1807
  1222     0719                     _PIE3bits	set	1817
  1223     0ECB                     _RXPPSbits	set	3787
  1224     0F4E                     _ANSELCbits	set	3918
  1225     0F25                     _RC5PPS	set	3877
  1226     0F38                     _ANSELAbits	set	3896
  1227                           
  1228                           	psect	cinit
  1229     007F                     start_initialization:	
  1230                           ; #config settings
  1231                           
  1232     007F                     __initialization:
  1233                           
  1234                           ; Initialize objects allocated to COMMON
  1235     007F  3184  2436  3180   	fcall	__pidataCOMMON	;fetch initializer
  1236     0082  00FB               	movwf	__pdataCOMMON& (0+127)
  1237     0083  3184  2437  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  1238     0086  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1239                           
  1240                           ; Initialize objects allocated to BANK0
  1241     0087  3064               	movlw	low __pidataBANK0
  1242     0088  0084               	movwf	4
  1243     0089  3083               	movlw	(high __pidataBANK0)| (0+128)
  1244     008A  0085               	movwf	5
  1245     008B  3048               	movlw	low __pdataBANK0
  1246     008C  0086               	movwf	6
  1247     008D  3000               	movlw	high __pdataBANK0
  1248     008E  0087               	movwf	7
  1249     008F  3020               	movlw	32
  1250     0090  3184  242A  3180   	fcall	init_ram
  1251                           
  1252                           ; Initialize objects allocated to BANK1
  1253     0093  303F               	movlw	low __pidataBANK1
  1254     0094  0084               	movwf	4
  1255     0095  3083               	movlw	(high __pidataBANK1)| (0+128)
  1256     0096  0085               	movwf	5
  1257     0097  30A0               	movlw	low __pdataBANK1
  1258     0098  0086               	movwf	6
  1259     0099  3000               	movlw	high __pdataBANK1
  1260     009A  0087               	movwf	7
  1261     009B  3025               	movlw	37
  1262     009C  3184  242A  3180   	fcall	init_ram
  1263                           
  1264                           ; Clear objects allocated to COMMON
  1265     009F  01F9               	clrf	__pbssCOMMON& (0+127)
  1266     00A0  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1267                           
  1268                           ; Clear objects allocated to BANK0
  1269     00A1  3020               	movlw	low __pbssBANK0
  1270     00A2  0084               	movwf	4
  1271     00A3  3000               	movlw	high __pbssBANK0
  1272     00A4  0085               	movwf	5
  1273     00A5  3028               	movlw	40
  1274     00A6  3184  2430  3180   	fcall	clear_ram0
  1275                           
  1276                           ; Clear objects allocated to BANK1
  1277     00A9  30C5               	movlw	low __pbssBANK1
  1278     00AA  0084               	movwf	4
  1279     00AB  3000               	movlw	high __pbssBANK1
  1280     00AC  0085               	movwf	5
  1281     00AD  3024               	movlw	36
  1282     00AE  3184  2430  3180   	fcall	clear_ram0
  1283     00B1                     end_of_initialization:	
  1284                           ;End of C runtime variable initialization code
  1285                           
  1286     00B1                     __end_of__initialization:
  1287     00B1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1288     00B2  0020               	movlb	0
  1289     00B3  3182  2ACB         	ljmp	_main	;jump to C main() function
  1290                           
  1291                           	psect	bssCOMMON
  1292     0079                     __pbssCOMMON:
  1293     0079                     _currentInput:
  1294     0079                     	ds	2
  1295                           
  1296                           	psect	dataCOMMON
  1297     007B                     __pdataCOMMON:
  1298     007B                     _CONTROL_OUTPUT:
  1299     007B                     	ds	2
  1300                           
  1301                           	psect	bssBANK0
  1302     0020                     __pbssBANK0:
  1303     0020                     _controls:
  1304     0020                     	ds	22
  1305     0036                     _currentCommand:
  1306     0036                     	ds	14
  1307     0044                     _commandIt:
  1308     0044                     	ds	2
  1309     0046                     _inputStage:
  1310     0046                     	ds	2
  1311                           
  1312                           	psect	dataBANK0
  1313     0048                     __pdataBANK0:
  1314     0048                     _SWITCH_MID:
  1315     0048                     	ds	2
  1316     004A                     _SWITCH_MIN:
  1317     004A                     	ds	2
  1318     004C                     _SWITCH_MAX:
  1319     004C                     	ds	2
  1320     004E                     _TurnRightCommand:
  1321     004E                     	ds	10
  1322     0058                     _TurnLeftCommand:
  1323     0058                     	ds	10
  1324     0062                     _GetUserDataCommand:
  1325     0062                     	ds	6
  1326                           
  1327                           	psect	bssBANK1
  1328     00C5                     __pbssBANK1:
  1329     00C5                     _Controls:
  1330     00C5                     	ds	22
  1331     00DB                     _Command:
  1332     00DB                     	ds	14
  1333                           
  1334                           	psect	dataBANK1
  1335     00A0                     __pdataBANK1:
  1336     00A0                     _EnableLaserScopeCommand:
  1337     00A0                     	ds	7
  1338     00A7                     _Break:
  1339     00A7                     	ds	10
  1340     00B1                     _MoveBackwardCommand:
  1341     00B1                     	ds	10
  1342     00BB                     _MoveForwardCommand:
  1343     00BB                     	ds	10
  1344                           
  1345                           	psect	inittext
  1346     042A                     init_ram:
  1347     042A  00FE               	movwf	btemp
  1348     042B                     initloop:
  1349     042B  0012               	moviw fsr0++
  1350     042C  001E               	movwi fsr1++
  1351     042D  0BFE               	decfsz	btemp,f
  1352     042E  2C2B               	goto	initloop
  1353     042F  3400               	retlw	0
  1354                           
  1355                           	psect	clrtext
  1356     0430                     clear_ram0:	
  1357                           ;	Called with FSR0 containing the base address, and
  1358                           ;	WREG with the size to clear
  1359                           
  1360     0430  0064               	clrwdt	;clear the watchdog before getting into this loop
  1361     0431                     clrloop0:
  1362     0431  0180               	clrf	0	;clear RAM location pointed to by FSR
  1363     0432  3101               	addfsr 0,1
  1364     0433  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1365     0434  2C31               	goto	clrloop0	;have we reached the end yet?
  1366     0435  3400               	retlw	0	;all done for this memory range, return
  1367                           
  1368                           	psect	cstackCOMMON
  1369     0070                     __pcstackCOMMON:
  1370     0070                     ?_CreateControlsCommand:
  1371     0070                     ?_drive:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374     0070                     ?_CreateBreak:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377     0070                     ?_main:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380     0070                     ?_GetControllerInput:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383     0070                     ?_myFunction:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386     0070                     GetControllerInput@input:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389                           
  1390                           ; 2 bytes @ 0x0
  1391     0070                     	ds	2
  1392     0072                     ??_GetControllerInput:
  1393                           
  1394                           ; 1 bytes @ 0x2
  1395     0072                     	ds	3
  1396     0075                     ??_myFunction:
  1397                           
  1398                           ; 1 bytes @ 0x5
  1399     0075                     	ds	2
  1400     0077                     myFunction@input:
  1401                           
  1402                           ; 2 bytes @ 0x7
  1403     0077                     	ds	2
  1404                           
  1405                           	psect	cstackBANK0
  1406     0068                     __pcstackBANK0:
  1407     0068                     ??_CreateControlsCommand:
  1408     0068                     ?_CreateTurnRightCommmand:	
  1409                           ; 1 bytes @ 0x0
  1410                           
  1411     0068                     ?_CreateTurnLeftCommmand:	
  1412                           ; 1 bytes @ 0x0
  1413                           
  1414     0068                     ?_CreateMoveForwardCommmand:	
  1415                           ; 1 bytes @ 0x0
  1416                           
  1417     0068                     ?_CreateMoveBackwardCommmand:	
  1418                           ; 1 bytes @ 0x0
  1419                           
  1420     0068                     ??_CreateBreak:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423     0068                     CreateTurnRightCommmand@pwm:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426     0068                     CreateTurnLeftCommmand@pwm:	
  1427                           ; 2 bytes @ 0x0
  1428                           
  1429     0068                     CreateMoveForwardCommmand@pwm:	
  1430                           ; 2 bytes @ 0x0
  1431                           
  1432     0068                     CreateMoveBackwardCommmand@pwm:	
  1433                           ; 2 bytes @ 0x0
  1434                           
  1435                           
  1436                           ; 2 bytes @ 0x0
  1437     0068                     	ds	2
  1438     006A                     ??_drive:
  1439     006A                     ??_CreateTurnRightCommmand:	
  1440                           ; 1 bytes @ 0x2
  1441                           
  1442     006A                     ??_CreateTurnLeftCommmand:	
  1443                           ; 1 bytes @ 0x2
  1444                           
  1445     006A                     ??_CreateMoveForwardCommmand:	
  1446                           ; 1 bytes @ 0x2
  1447                           
  1448     006A                     ??_CreateMoveBackwardCommmand:	
  1449                           ; 1 bytes @ 0x2
  1450                           
  1451                           
  1452                           ; 1 bytes @ 0x2
  1453     006A                     	ds	1
  1454     006B                     ??_main:
  1455                           
  1456                           	psect	maintext
  1457     02CB                     __pmaintext:	
  1458                           ; 1 bytes @ 0x3
  1459 ;;
  1460 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1461 ;;
  1462 ;; *************** function _main *****************
  1463 ;; Defined at:
  1464 ;;		line 103 in file "motorMain.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0, pclath, cstack
  1473 ;; Tracked objects:
  1474 ;;		On entry : B1F/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels required when called: 4
  1484 ;; This function calls:
  1485 ;;		_CreateControlsCommand
  1486 ;;		_drive
  1487 ;; This function is called by:
  1488 ;;		Startup code after reset
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492     02CB                     _main:	
  1493                           ;psect for function _main
  1494                           
  1495     02CB                     l1247:	
  1496                           ;incstack = 0
  1497                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1498                           
  1499                           
  1500                           ;motorMain.c: 105:    TRISAbits.TRISA5 = 1;
  1501     02CB  0020               	movlb	0	; select bank0
  1502     02CC  1691               	bsf	17,5	;volatile
  1503                           
  1504                           ;motorMain.c: 106:     ANSELAbits.ANSA5 = 0;
  1505     02CD  003E               	movlb	30	; select bank30
  1506     02CE  12B8               	bcf	56,5	;volatile
  1507                           
  1508                           ;motorMain.c: 108:     TRISAbits.TRISA0 = 0;
  1509     02CF  0020               	movlb	0	; select bank0
  1510     02D0  1011               	bcf	17,0	;volatile
  1511                           
  1512                           ;motorMain.c: 109:     TRISAbits.TRISA1 = 0;
  1513     02D1  1091               	bcf	17,1	;volatile
  1514                           
  1515                           ;motorMain.c: 110:     TRISAbits.TRISA2 = 0;
  1516     02D2  1111               	bcf	17,2	;volatile
  1517                           
  1518                           ;motorMain.c: 111:     TRISAbits.TRISA3 = 0;
  1519     02D3  1191               	bcf	17,3	;volatile
  1520                           
  1521                           ;motorMain.c: 114:     LATAbits.LATA0 = 0;
  1522     02D4  1016               	bcf	22,0	;volatile
  1523                           
  1524                           ;motorMain.c: 115:     LATAbits.LATA1 = 0;
  1525     02D5  1096               	bcf	22,1	;volatile
  1526                           
  1527                           ;motorMain.c: 116:     LATAbits.LATA2 = 0;
  1528     02D6  1116               	bcf	22,2	;volatile
  1529                           
  1530                           ;motorMain.c: 117:     LATAbits.LATA3 = 0;
  1531     02D7  1196               	bcf	22,3	;volatile
  1532                           
  1533                           ;motorMain.c: 120:     BAUD1CONbits.BRG16=1;
  1534     02D8  0022               	movlb	2	; select bank2
  1535     02D9  159F               	bsf	31,3	;volatile
  1536                           
  1537                           ;motorMain.c: 122:     TX1STAbits.BRGH = 0x1;
  1538     02DA  151E               	bsf	30,2	;volatile
  1539     02DB                     l1249:
  1540                           
  1541                           ;motorMain.c: 126:     RC5PPS = 0x10;
  1542     02DB  3010               	movlw	16
  1543     02DC  003E               	movlb	30	; select bank30
  1544     02DD  00A5               	movwf	37	;volatile
  1545     02DE                     l1251:
  1546                           
  1547                           ;motorMain.c: 127:     TRISCbits.TRISC5 = 0;
  1548     02DE  0020               	movlb	0	; select bank0
  1549     02DF  1293               	bcf	19,5	;volatile
  1550     02E0                     l1253:
  1551                           
  1552                           ;motorMain.c: 129:     RXPPSbits.RXPPS = 0x16;
  1553     02E0  003D               	movlb	29	; select bank29
  1554     02E1  084B               	movf	75,w	;volatile
  1555     02E2  39E0               	andlw	-32
  1556     02E3  3816               	iorlw	22
  1557     02E4  00CB               	movwf	75	;volatile
  1558     02E5                     l1255:
  1559                           
  1560                           ;motorMain.c: 130:     TRISCbits.TRISC6 = 1;
  1561     02E5  0020               	movlb	0	; select bank0
  1562     02E6  1713               	bsf	19,6	;volatile
  1563     02E7                     l1257:
  1564                           
  1565                           ;motorMain.c: 131:     ANSELCbits.ANSC6 = 0;
  1566     02E7  003E               	movlb	30	; select bank30
  1567     02E8  134E               	bcf	78,6	;volatile
  1568     02E9                     l1259:
  1569                           
  1570                           ;motorMain.c: 134:     SP1BRGLbits.SP1BRGL = 68;
  1571     02E9  3044               	movlw	68
  1572     02EA  0022               	movlb	2	; select bank2
  1573     02EB  009B               	movwf	27	;volatile
  1574     02EC                     l1261:
  1575                           
  1576                           ;motorMain.c: 136:     CreateControlsCommand();
  1577     02EC  3183  23F8  3182   	fcall	_CreateControlsCommand
  1578     02EF                     l1263:
  1579                           
  1580                           ;motorMain.c: 139:     RC1STAbits.SPEN = 1;
  1581     02EF  0022               	movlb	2	; select bank2
  1582     02F0  179D               	bsf	29,7	;volatile
  1583     02F1                     l1265:
  1584                           
  1585                           ;motorMain.c: 140:     TX1STAbits.TXEN =1;
  1586     02F1  169E               	bsf	30,5	;volatile
  1587     02F2                     l1267:
  1588                           
  1589                           ;motorMain.c: 141:     TX1STAbits.SYNC=0;
  1590     02F2  121E               	bcf	30,4	;volatile
  1591     02F3                     l1269:
  1592                           
  1593                           ;motorMain.c: 143:     RC1STAbits.CREN = 1;
  1594     02F3  161D               	bsf	29,4	;volatile
  1595     02F4                     l1271:
  1596                           
  1597                           ;motorMain.c: 146:     INTCONbits.GIE = 1;
  1598     02F4  178B               	bsf	11,7	;volatile
  1599     02F5                     l1273:
  1600                           
  1601                           ;motorMain.c: 147:     INTCONbits.PEIE = 1;
  1602     02F5  170B               	bsf	11,6	;volatile
  1603     02F6                     l1275:
  1604                           
  1605                           ;motorMain.c: 148:     PIE3bits.RCIE = 1;
  1606     02F6  002E               	movlb	14	; select bank14
  1607     02F7  1699               	bsf	25,5	;volatile
  1608     02F8                     l1277:
  1609                           
  1610                           ;motorMain.c: 149:     PIE3bits.TXIE = 1;
  1611     02F8  1619               	bsf	25,4	;volatile
  1612     02F9                     l1279:
  1613                           
  1614                           ;motorMain.c: 153:         if(controls.switchA < SWITCH_MIN){
  1615     02F9  3004               	movlw	4
  1616     02FA  0020               	movlb	0	; select bank0
  1617     02FB  0229               	subwf	_controls+9,w
  1618     02FC  304C               	movlw	76
  1619     02FD  1903               	skipnz
  1620     02FE  0228               	subwf	_controls+8,w
  1621     02FF  1803               	skipnc
  1622     0300  2B02               	goto	u471
  1623     0301  2B03               	goto	u470
  1624     0302                     u471:
  1625     0302  2B05               	goto	l90
  1626     0303                     u470:
  1627     0303                     l1281:
  1628                           
  1629                           ;motorMain.c: 154:             LATAbits.LATA0 = 1;
  1630     0303  1416               	bsf	22,0	;volatile
  1631                           
  1632                           ;motorMain.c: 155:         }
  1633     0304  2B06               	goto	l1283
  1634     0305                     l90:	
  1635                           ;motorMain.c: 156:         else{
  1636                           
  1637                           
  1638                           ;motorMain.c: 157:             LATAbits.LATA0 = 0;
  1639     0305  1016               	bcf	22,0	;volatile
  1640     0306                     l1283:
  1641                           
  1642                           ;motorMain.c: 159:         if(controls.switchB <= SWITCH_MIN){
  1643     0306  3004               	movlw	4
  1644     0307  022B               	subwf	_controls+11,w
  1645     0308  304D               	movlw	77
  1646     0309  1903               	skipnz
  1647     030A  022A               	subwf	_controls+10,w
  1648     030B  1803               	skipnc
  1649     030C  2B0E               	goto	u481
  1650     030D  2B0F               	goto	u480
  1651     030E                     u481:
  1652     030E  2B11               	goto	l92
  1653     030F                     u480:
  1654     030F                     l1285:
  1655                           
  1656                           ;motorMain.c: 160:             LATAbits.LATA1 = 1;
  1657     030F  1496               	bsf	22,1	;volatile
  1658                           
  1659                           ;motorMain.c: 161:         }
  1660     0310  2B12               	goto	l1287
  1661     0311                     l92:	
  1662                           ;motorMain.c: 162:         else{
  1663                           
  1664                           
  1665                           ;motorMain.c: 163:             LATAbits.LATA1 = 0;
  1666     0311  1096               	bcf	22,1	;volatile
  1667     0312                     l1287:
  1668                           
  1669                           ;motorMain.c: 165:         if(controls.switchC == SWITCH_MID){
  1670     0312  30DC               	movlw	220
  1671     0313  062C               	xorwf	_controls+12,w
  1672     0314  3005               	movlw	5
  1673     0315  1903               	skipnz
  1674     0316  062D               	xorwf	_controls+13,w
  1675     0317  1D03               	btfss	3,2
  1676     0318  2B1A               	goto	u491
  1677     0319  2B1B               	goto	u490
  1678     031A                     u491:
  1679     031A  2B1D               	goto	l94
  1680     031B                     u490:
  1681     031B                     l1289:
  1682                           
  1683                           ;motorMain.c: 166:             LATAbits.LATA2 = 1;
  1684     031B  1516               	bsf	22,2	;volatile
  1685                           
  1686                           ;motorMain.c: 167:         }
  1687     031C  2B1E               	goto	l1291
  1688     031D                     l94:	
  1689                           ;motorMain.c: 168:         else{
  1690                           
  1691                           
  1692                           ;motorMain.c: 169:             LATAbits.LATA2 = 0;
  1693     031D  1116               	bcf	22,2	;volatile
  1694     031E                     l1291:
  1695                           
  1696                           ;motorMain.c: 171:         if(controls.switchD <= SWITCH_MIN){
  1697     031E  3004               	movlw	4
  1698     031F  022F               	subwf	_controls+15,w
  1699     0320  304D               	movlw	77
  1700     0321  1903               	skipnz
  1701     0322  022E               	subwf	_controls+14,w
  1702     0323  1803               	skipnc
  1703     0324  2B26               	goto	u501
  1704     0325  2B27               	goto	u500
  1705     0326                     u501:
  1706     0326  2B29               	goto	l96
  1707     0327                     u500:
  1708     0327                     l1293:
  1709                           
  1710                           ;motorMain.c: 172:             LATAbits.LATA3 = 1;
  1711     0327  1596               	bsf	22,3	;volatile
  1712                           
  1713                           ;motorMain.c: 173:         }
  1714     0328  2B2A               	goto	l1295
  1715     0329                     l96:	
  1716                           ;motorMain.c: 174:         else{
  1717                           
  1718                           
  1719                           ;motorMain.c: 175:             LATAbits.LATA3 = 0;
  1720     0329  1196               	bcf	22,3	;volatile
  1721     032A                     l1295:
  1722                           
  1723                           ;motorMain.c: 177:         if(currentCommand.done){
  1724     032A  0843               	movf	_currentCommand+13,w
  1725     032B  1903               	btfsc	3,2
  1726     032C  2B2E               	goto	u511
  1727     032D  2B2F               	goto	u510
  1728     032E                     u511:
  1729     032E  2AF9               	goto	l1279
  1730     032F                     u510:
  1731     032F                     l1297:
  1732                           
  1733                           ;motorMain.c: 178:             if(currentCommand.sendId == CONTROL_INPUT){
  1734     032F  033A               	decf	_currentCommand+4,w
  1735     0330  043B               	iorwf	_currentCommand+5,w
  1736     0331  1D03               	btfss	3,2
  1737     0332  2B34               	goto	u521
  1738     0333  2B35               	goto	u520
  1739     0334                     u521:
  1740     0334  2B39               	goto	l1301
  1741     0335                     u520:
  1742     0335                     l1299:
  1743                           
  1744                           ;motorMain.c: 179:                 drive();
  1745     0335  3180  20B5  3182   	fcall	_drive
  1746                           
  1747                           ;motorMain.c: 180:             }
  1748     0338  2AF9               	goto	l1279
  1749     0339                     l1301:
  1750                           
  1751                           ;motorMain.c: 182:                 CreateControlsCommand();
  1752     0339  3183  23F8  3182   	fcall	_CreateControlsCommand
  1753     033C  2AF9               	goto	l1279
  1754     033D  3180  287D         	ljmp	start
  1755     033F                     __end_of_main:
  1756                           
  1757                           	psect	text1
  1758     00B5                     __ptext1:	
  1759 ;; *************** function _drive *****************
  1760 ;; Defined at:
  1761 ;;		line 218 in file "motorMain.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  power           2    0        unsigned int 
  1766 ;; Return value:  Size  Location     Type
  1767 ;;                  1    wreg      void 
  1768 ;; Registers used:
  1769 ;;		wreg, status,2, status,0, pclath, cstack
  1770 ;; Tracked objects:
  1771 ;;		On entry : 0/0
  1772 ;;		On exit  : 0/0
  1773 ;;		Unchanged: 0/0
  1774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1779 ;;Total ram usage:        1 bytes
  1780 ;; Hardware stack levels used: 1
  1781 ;; Hardware stack levels required when called: 3
  1782 ;; This function calls:
  1783 ;;		_CreateBreak
  1784 ;;		_CreateControlsCommand
  1785 ;;		_CreateMoveBackwardCommmand
  1786 ;;		_CreateMoveForwardCommmand
  1787 ;;		_CreateTurnLeftCommmand
  1788 ;;		_CreateTurnRightCommmand
  1789 ;; This function is called by:
  1790 ;;		_main
  1791 ;; This function uses a non-reentrant model
  1792 ;;
  1793                           
  1794     00B5                     _drive:	
  1795                           ;psect for function _drive
  1796                           
  1797     00B5                     l1149:	
  1798                           ;incstack = 0
  1799                           ; Regs used in _drive: [wreg+status,2+status,0+pclath+cstack]
  1800                           
  1801                           
  1802                           ;motorMain.c: 221:     if((controls.rightX >= 0x6A4) && (controls.rightY >= 0x546 && con
      +                          trols.rightY <= 0x672)){
  1803     00B5  0020               	movlb	0	; select bank0
  1804     00B6  0821               	movf	_controls+1,w
  1805     00B7  3A80               	xorlw	128
  1806     00B8  00EA               	movwf	??_drive
  1807     00B9  3086               	movlw	134
  1808     00BA  026A               	subwf	??_drive,w
  1809     00BB  1D03               	skipz
  1810     00BC  28BF               	goto	u305
  1811     00BD  30A4               	movlw	164
  1812     00BE  0220               	subwf	_controls,w
  1813     00BF                     u305:
  1814     00BF  1C03               	skipc
  1815     00C0  28C2               	goto	u301
  1816     00C1  28C3               	goto	u300
  1817     00C2                     u301:
  1818     00C2  28E8               	goto	l1157
  1819     00C3                     u300:
  1820     00C3                     l1151:
  1821     00C3  0020               	movlb	0	; select bank0
  1822     00C4  0823               	movf	_controls+3,w
  1823     00C5  3A80               	xorlw	128
  1824     00C6  00EA               	movwf	??_drive
  1825     00C7  3085               	movlw	133
  1826     00C8  026A               	subwf	??_drive,w
  1827     00C9  1D03               	skipz
  1828     00CA  28CD               	goto	u315
  1829     00CB  3046               	movlw	70
  1830     00CC  0222               	subwf	_controls+2,w
  1831     00CD                     u315:
  1832     00CD  1C03               	skipc
  1833     00CE  28D0               	goto	u311
  1834     00CF  28D1               	goto	u310
  1835     00D0                     u311:
  1836     00D0  28E8               	goto	l1157
  1837     00D1                     u310:
  1838     00D1                     l1153:
  1839     00D1  0020               	movlb	0	; select bank0
  1840     00D2  0823               	movf	_controls+3,w
  1841     00D3  3A80               	xorlw	128
  1842     00D4  00EA               	movwf	??_drive
  1843     00D5  3086               	movlw	134
  1844     00D6  026A               	subwf	??_drive,w
  1845     00D7  1D03               	skipz
  1846     00D8  28DB               	goto	u325
  1847     00D9  3073               	movlw	115
  1848     00DA  0222               	subwf	_controls+2,w
  1849     00DB                     u325:
  1850     00DB  1803               	skipnc
  1851     00DC  28DE               	goto	u321
  1852     00DD  28DF               	goto	u320
  1853     00DE                     u321:
  1854     00DE  28E8               	goto	l1157
  1855     00DF                     u320:
  1856     00DF                     l1155:
  1857                           
  1858                           ;motorMain.c: 222:         CreateTurnRightCommmand(power);
  1859     00DF  304B               	movlw	75
  1860     00E0  0020               	movlb	0	; select bank0
  1861     00E1  00E8               	movwf	CreateTurnRightCommmand@pwm
  1862     00E2  3000               	movlw	0
  1863     00E3  00E9               	movwf	CreateTurnRightCommmand@pwm+1
  1864     00E4  3183  23C2  3180   	fcall	_CreateTurnRightCommmand
  1865                           
  1866                           ;motorMain.c: 223:     }else if((controls.rightX <= 0x514) && (controls.rightY >= 0x546 
      +                          && controls.rightY <= 0x672)){
  1867     00E7  29C0               	goto	l142
  1868     00E8                     l1157:
  1869     00E8  0020               	movlb	0	; select bank0
  1870     00E9  0821               	movf	_controls+1,w
  1871     00EA  3A80               	xorlw	128
  1872     00EB  00EA               	movwf	??_drive
  1873     00EC  3085               	movlw	133
  1874     00ED  026A               	subwf	??_drive,w
  1875     00EE  1D03               	skipz
  1876     00EF  28F2               	goto	u335
  1877     00F0  3015               	movlw	21
  1878     00F1  0220               	subwf	_controls,w
  1879     00F2                     u335:
  1880     00F2  1803               	skipnc
  1881     00F3  28F5               	goto	u331
  1882     00F4  28F6               	goto	u330
  1883     00F5                     u331:
  1884     00F5  291B               	goto	l1165
  1885     00F6                     u330:
  1886     00F6                     l1159:
  1887     00F6  0020               	movlb	0	; select bank0
  1888     00F7  0823               	movf	_controls+3,w
  1889     00F8  3A80               	xorlw	128
  1890     00F9  00EA               	movwf	??_drive
  1891     00FA  3085               	movlw	133
  1892     00FB  026A               	subwf	??_drive,w
  1893     00FC  1D03               	skipz
  1894     00FD  2900               	goto	u345
  1895     00FE  3046               	movlw	70
  1896     00FF  0222               	subwf	_controls+2,w
  1897     0100                     u345:
  1898     0100  1C03               	skipc
  1899     0101  2903               	goto	u341
  1900     0102  2904               	goto	u340
  1901     0103                     u341:
  1902     0103  291B               	goto	l1165
  1903     0104                     u340:
  1904     0104                     l1161:
  1905     0104  0020               	movlb	0	; select bank0
  1906     0105  0823               	movf	_controls+3,w
  1907     0106  3A80               	xorlw	128
  1908     0107  00EA               	movwf	??_drive
  1909     0108  3086               	movlw	134
  1910     0109  026A               	subwf	??_drive,w
  1911     010A  1D03               	skipz
  1912     010B  290E               	goto	u355
  1913     010C  3073               	movlw	115
  1914     010D  0222               	subwf	_controls+2,w
  1915     010E                     u355:
  1916     010E  1803               	skipnc
  1917     010F  2911               	goto	u351
  1918     0110  2912               	goto	u350
  1919     0111                     u351:
  1920     0111  291B               	goto	l1165
  1921     0112                     u350:
  1922     0112                     l1163:
  1923                           
  1924                           ;motorMain.c: 224:         CreateTurnLeftCommmand(power);
  1925     0112  304B               	movlw	75
  1926     0113  0020               	movlb	0	; select bank0
  1927     0114  00E8               	movwf	CreateTurnLeftCommmand@pwm
  1928     0115  3000               	movlw	0
  1929     0116  00E9               	movwf	CreateTurnLeftCommmand@pwm+1
  1930     0117  3183  23DD  3180   	fcall	_CreateTurnLeftCommmand
  1931                           
  1932                           ;motorMain.c: 225:     }else if((controls.rightY >= 0x6A4) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  1933     011A  29C0               	goto	l142
  1934     011B                     l1165:
  1935     011B  0020               	movlb	0	; select bank0
  1936     011C  0823               	movf	_controls+3,w
  1937     011D  3A80               	xorlw	128
  1938     011E  00EA               	movwf	??_drive
  1939     011F  3086               	movlw	134
  1940     0120  026A               	subwf	??_drive,w
  1941     0121  1D03               	skipz
  1942     0122  2925               	goto	u365
  1943     0123  30A4               	movlw	164
  1944     0124  0222               	subwf	_controls+2,w
  1945     0125                     u365:
  1946     0125  1C03               	skipc
  1947     0126  2928               	goto	u361
  1948     0127  2929               	goto	u360
  1949     0128                     u361:
  1950     0128  294E               	goto	l1173
  1951     0129                     u360:
  1952     0129                     l1167:
  1953     0129  0020               	movlb	0	; select bank0
  1954     012A  0821               	movf	_controls+1,w
  1955     012B  3A80               	xorlw	128
  1956     012C  00EA               	movwf	??_drive
  1957     012D  3085               	movlw	133
  1958     012E  026A               	subwf	??_drive,w
  1959     012F  1D03               	skipz
  1960     0130  2933               	goto	u375
  1961     0131  3046               	movlw	70
  1962     0132  0220               	subwf	_controls,w
  1963     0133                     u375:
  1964     0133  1C03               	skipc
  1965     0134  2936               	goto	u371
  1966     0135  2937               	goto	u370
  1967     0136                     u371:
  1968     0136  294E               	goto	l1173
  1969     0137                     u370:
  1970     0137                     l1169:
  1971     0137  0020               	movlb	0	; select bank0
  1972     0138  0821               	movf	_controls+1,w
  1973     0139  3A80               	xorlw	128
  1974     013A  00EA               	movwf	??_drive
  1975     013B  3086               	movlw	134
  1976     013C  026A               	subwf	??_drive,w
  1977     013D  1D03               	skipz
  1978     013E  2941               	goto	u385
  1979     013F  3073               	movlw	115
  1980     0140  0220               	subwf	_controls,w
  1981     0141                     u385:
  1982     0141  1803               	skipnc
  1983     0142  2944               	goto	u381
  1984     0143  2945               	goto	u380
  1985     0144                     u381:
  1986     0144  294E               	goto	l1173
  1987     0145                     u380:
  1988     0145                     l1171:
  1989                           
  1990                           ;motorMain.c: 226:         CreateMoveForwardCommmand(power);
  1991     0145  304B               	movlw	75
  1992     0146  0020               	movlb	0	; select bank0
  1993     0147  00E8               	movwf	CreateMoveForwardCommmand@pwm
  1994     0148  3000               	movlw	0
  1995     0149  00E9               	movwf	CreateMoveForwardCommmand@pwm+1
  1996     014A  3183  2384  3180   	fcall	_CreateMoveForwardCommmand
  1997                           
  1998                           ;motorMain.c: 227:     }else if((controls.rightY <= 0x514) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  1999     014D  29C0               	goto	l142
  2000     014E                     l1173:
  2001     014E  0020               	movlb	0	; select bank0
  2002     014F  0823               	movf	_controls+3,w
  2003     0150  3A80               	xorlw	128
  2004     0151  00EA               	movwf	??_drive
  2005     0152  3085               	movlw	133
  2006     0153  026A               	subwf	??_drive,w
  2007     0154  1D03               	skipz
  2008     0155  2958               	goto	u395
  2009     0156  3015               	movlw	21
  2010     0157  0222               	subwf	_controls+2,w
  2011     0158                     u395:
  2012     0158  1803               	skipnc
  2013     0159  295B               	goto	u391
  2014     015A  295C               	goto	u390
  2015     015B                     u391:
  2016     015B  2981               	goto	l1181
  2017     015C                     u390:
  2018     015C                     l1175:
  2019     015C  0020               	movlb	0	; select bank0
  2020     015D  0821               	movf	_controls+1,w
  2021     015E  3A80               	xorlw	128
  2022     015F  00EA               	movwf	??_drive
  2023     0160  3085               	movlw	133
  2024     0161  026A               	subwf	??_drive,w
  2025     0162  1D03               	skipz
  2026     0163  2966               	goto	u405
  2027     0164  3046               	movlw	70
  2028     0165  0220               	subwf	_controls,w
  2029     0166                     u405:
  2030     0166  1C03               	skipc
  2031     0167  2969               	goto	u401
  2032     0168  296A               	goto	u400
  2033     0169                     u401:
  2034     0169  2981               	goto	l1181
  2035     016A                     u400:
  2036     016A                     l1177:
  2037     016A  0020               	movlb	0	; select bank0
  2038     016B  0821               	movf	_controls+1,w
  2039     016C  3A80               	xorlw	128
  2040     016D  00EA               	movwf	??_drive
  2041     016E  3086               	movlw	134
  2042     016F  026A               	subwf	??_drive,w
  2043     0170  1D03               	skipz
  2044     0171  2974               	goto	u415
  2045     0172  3073               	movlw	115
  2046     0173  0220               	subwf	_controls,w
  2047     0174                     u415:
  2048     0174  1803               	skipnc
  2049     0175  2977               	goto	u411
  2050     0176  2978               	goto	u410
  2051     0177                     u411:
  2052     0177  2981               	goto	l1181
  2053     0178                     u410:
  2054     0178                     l1179:
  2055                           
  2056                           ;motorMain.c: 228:         CreateMoveBackwardCommmand(power);
  2057     0178  304B               	movlw	75
  2058     0179  0020               	movlb	0	; select bank0
  2059     017A  00E8               	movwf	CreateMoveBackwardCommmand@pwm
  2060     017B  3000               	movlw	0
  2061     017C  00E9               	movwf	CreateMoveBackwardCommmand@pwm+1
  2062     017D  3183  23A3  3180   	fcall	_CreateMoveBackwardCommmand
  2063                           
  2064                           ;motorMain.c: 229:     }else if((controls.rightY >= 0x546 && controls.rightY <= 0x672) &
      +                          & (controls.rightX >= 0x546 && controls.rightX <= 0x672)){
  2065     0180  29C0               	goto	l142
  2066     0181                     l1181:
  2067     0181  0020               	movlb	0	; select bank0
  2068     0182  0823               	movf	_controls+3,w
  2069     0183  3A80               	xorlw	128
  2070     0184  00EA               	movwf	??_drive
  2071     0185  3085               	movlw	133
  2072     0186  026A               	subwf	??_drive,w
  2073     0187  1D03               	skipz
  2074     0188  298B               	goto	u425
  2075     0189  3046               	movlw	70
  2076     018A  0222               	subwf	_controls+2,w
  2077     018B                     u425:
  2078     018B  1C03               	skipc
  2079     018C  298E               	goto	u421
  2080     018D  298F               	goto	u420
  2081     018E                     u421:
  2082     018E  29BD               	goto	l1191
  2083     018F                     u420:
  2084     018F                     l1183:
  2085     018F  0020               	movlb	0	; select bank0
  2086     0190  0823               	movf	_controls+3,w
  2087     0191  3A80               	xorlw	128
  2088     0192  00EA               	movwf	??_drive
  2089     0193  3086               	movlw	134
  2090     0194  026A               	subwf	??_drive,w
  2091     0195  1D03               	skipz
  2092     0196  2999               	goto	u435
  2093     0197  3073               	movlw	115
  2094     0198  0222               	subwf	_controls+2,w
  2095     0199                     u435:
  2096     0199  1803               	skipnc
  2097     019A  299C               	goto	u431
  2098     019B  299D               	goto	u430
  2099     019C                     u431:
  2100     019C  29BD               	goto	l1191
  2101     019D                     u430:
  2102     019D                     l1185:
  2103     019D  0020               	movlb	0	; select bank0
  2104     019E  0821               	movf	_controls+1,w
  2105     019F  3A80               	xorlw	128
  2106     01A0  00EA               	movwf	??_drive
  2107     01A1  3085               	movlw	133
  2108     01A2  026A               	subwf	??_drive,w
  2109     01A3  1D03               	skipz
  2110     01A4  29A7               	goto	u445
  2111     01A5  3046               	movlw	70
  2112     01A6  0220               	subwf	_controls,w
  2113     01A7                     u445:
  2114     01A7  1C03               	skipc
  2115     01A8  29AA               	goto	u441
  2116     01A9  29AB               	goto	u440
  2117     01AA                     u441:
  2118     01AA  29BD               	goto	l1191
  2119     01AB                     u440:
  2120     01AB                     l1187:
  2121     01AB  0020               	movlb	0	; select bank0
  2122     01AC  0821               	movf	_controls+1,w
  2123     01AD  3A80               	xorlw	128
  2124     01AE  00EA               	movwf	??_drive
  2125     01AF  3086               	movlw	134
  2126     01B0  026A               	subwf	??_drive,w
  2127     01B1  1D03               	skipz
  2128     01B2  29B5               	goto	u455
  2129     01B3  3073               	movlw	115
  2130     01B4  0220               	subwf	_controls,w
  2131     01B5                     u455:
  2132     01B5  1803               	skipnc
  2133     01B6  29B8               	goto	u451
  2134     01B7  29B9               	goto	u450
  2135     01B8                     u451:
  2136     01B8  29BD               	goto	l1191
  2137     01B9                     u450:
  2138     01B9                     l1189:
  2139                           
  2140                           ;motorMain.c: 230:         CreateBreak();
  2141     01B9  3184  2413  3180   	fcall	_CreateBreak
  2142                           
  2143                           ;motorMain.c: 231:     }
  2144     01BC  29C0               	goto	l142
  2145     01BD                     l1191:
  2146                           
  2147                           ;motorMain.c: 233:         CreateControlsCommand();
  2148     01BD  3183  23F8  3180   	fcall	_CreateControlsCommand
  2149     01C0                     l142:
  2150     01C0  0008               	return
  2151     01C1                     __end_of_drive:
  2152                           
  2153                           	psect	text2
  2154     03C2                     __ptext2:	
  2155 ;; *************** function _CreateTurnRightCommmand *****************
  2156 ;; Defined at:
  2157 ;;		line 237 in file "motorMain.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  pwm             2    0[BANK0 ] unsigned int 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;		None
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2171 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2175 ;;Total ram usage:        2 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 2
  2178 ;; This function calls:
  2179 ;;		Nothing
  2180 ;; This function is called by:
  2181 ;;		_drive
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185     03C2                     _CreateTurnRightCommmand:	
  2186                           ;psect for function _CreateTurnRightCommmand
  2187                           
  2188     03C2                     l1083:	
  2189                           ;incstack = 0
  2190                           ; Regs used in _CreateTurnRightCommmand: [wreg+status,2]
  2191                           
  2192                           
  2193                           ;motorMain.c: 238:     currentCommand.sendId = 3;
  2194     03C2  3003               	movlw	3
  2195     03C3  0020               	movlb	0	; select bank0
  2196     03C4  00BA               	movwf	_currentCommand+4
  2197     03C5  3000               	movlw	0
  2198     03C6  00BB               	movwf	_currentCommand+5
  2199     03C7                     l1085:
  2200                           
  2201                           ;motorMain.c: 239:     currentCommand.sendIt = 0;
  2202     03C7  01B8               	clrf	_currentCommand+2
  2203     03C8  01B9               	clrf	_currentCommand+3
  2204     03C9                     l1087:
  2205                           
  2206                           ;motorMain.c: 240:     currentCommand.sendLimit = 10;
  2207     03C9  300A               	movlw	10
  2208     03CA  00B6               	movwf	_currentCommand
  2209     03CB  3000               	movlw	0
  2210     03CC  00B7               	movwf	_currentCommand+1
  2211                           
  2212                           ;motorMain.c: 241:     currentCommand.receiveId = 0;
  2213     03CD  01C1               	clrf	_currentCommand+11
  2214     03CE  01C2               	clrf	_currentCommand+12
  2215                           
  2216                           ;motorMain.c: 242:     currentCommand.receiveLimit = 0;
  2217     03CF  01BF               	clrf	_currentCommand+9
  2218     03D0  01C0               	clrf	_currentCommand+10
  2219                           
  2220                           ;motorMain.c: 243:     currentCommand.receiveIt = 0;
  2221     03D1  01BD               	clrf	_currentCommand+7
  2222     03D2  01BE               	clrf	_currentCommand+8
  2223                           
  2224                           ;motorMain.c: 244:     currentCommand.done = 0;
  2225     03D3  01C3               	clrf	_currentCommand+13
  2226     03D4                     l1089:
  2227                           
  2228                           ;motorMain.c: 246:     TurnRightCommand[7] = pwm;
  2229     03D4  0868               	movf	CreateTurnRightCommmand@pwm,w
  2230     03D5  00D5               	movwf	_TurnRightCommand+7
  2231     03D6                     l1091:
  2232                           
  2233                           ;motorMain.c: 247:     TurnRightCommand[9] = pwm;
  2234     03D6  0868               	movf	CreateTurnRightCommmand@pwm,w
  2235     03D7  00D7               	movwf	_TurnRightCommand+9
  2236     03D8                     l1093:
  2237                           
  2238                           ;motorMain.c: 248:     currentCommand.toSend = TurnRightCommand;
  2239     03D8  304E               	movlw	(low (_TurnRightCommand| 0))& (0+255)
  2240     03D9  00BC               	movwf	low ((_currentCommand| 0+6))
  2241     03DA                     l1095:
  2242                           
  2243                           ;motorMain.c: 249:     PIE3bits.TXIE = 1;
  2244     03DA  002E               	movlb	14	; select bank14
  2245     03DB  1619               	bsf	25,4	;volatile
  2246     03DC                     l145:
  2247     03DC  0008               	return
  2248     03DD                     __end_of_CreateTurnRightCommmand:
  2249                           
  2250                           	psect	text3
  2251     03DD                     __ptext3:	
  2252 ;; *************** function _CreateTurnLeftCommmand *****************
  2253 ;; Defined at:
  2254 ;;		line 252 in file "motorMain.c"
  2255 ;; Parameters:    Size  Location     Type
  2256 ;;  pwm             2    0[BANK0 ] unsigned int 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;		None
  2259 ;; Return value:  Size  Location     Type
  2260 ;;                  1    wreg      void 
  2261 ;; Registers used:
  2262 ;;		wreg, status,2
  2263 ;; Tracked objects:
  2264 ;;		On entry : 0/0
  2265 ;;		On exit  : 0/0
  2266 ;;		Unchanged: 0/0
  2267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2272 ;;Total ram usage:        2 bytes
  2273 ;; Hardware stack levels used: 1
  2274 ;; Hardware stack levels required when called: 2
  2275 ;; This function calls:
  2276 ;;		Nothing
  2277 ;; This function is called by:
  2278 ;;		_drive
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282     03DD                     _CreateTurnLeftCommmand:	
  2283                           ;psect for function _CreateTurnLeftCommmand
  2284                           
  2285     03DD                     l1097:	
  2286                           ;incstack = 0
  2287                           ; Regs used in _CreateTurnLeftCommmand: [wreg+status,2]
  2288                           
  2289                           
  2290                           ;motorMain.c: 253:     currentCommand.sendId = 4;
  2291     03DD  3004               	movlw	4
  2292     03DE  0020               	movlb	0	; select bank0
  2293     03DF  00BA               	movwf	_currentCommand+4
  2294     03E0  3000               	movlw	0
  2295     03E1  00BB               	movwf	_currentCommand+5
  2296     03E2                     l1099:
  2297                           
  2298                           ;motorMain.c: 254:     currentCommand.sendIt = 0;
  2299     03E2  01B8               	clrf	_currentCommand+2
  2300     03E3  01B9               	clrf	_currentCommand+3
  2301     03E4                     l1101:
  2302                           
  2303                           ;motorMain.c: 255:     currentCommand.sendLimit = 10;
  2304     03E4  300A               	movlw	10
  2305     03E5  00B6               	movwf	_currentCommand
  2306     03E6  3000               	movlw	0
  2307     03E7  00B7               	movwf	_currentCommand+1
  2308                           
  2309                           ;motorMain.c: 256:     currentCommand.receiveId = 0;
  2310     03E8  01C1               	clrf	_currentCommand+11
  2311     03E9  01C2               	clrf	_currentCommand+12
  2312                           
  2313                           ;motorMain.c: 257:     currentCommand.receiveLimit = 0;
  2314     03EA  01BF               	clrf	_currentCommand+9
  2315     03EB  01C0               	clrf	_currentCommand+10
  2316                           
  2317                           ;motorMain.c: 258:     currentCommand.receiveIt = 0;
  2318     03EC  01BD               	clrf	_currentCommand+7
  2319     03ED  01BE               	clrf	_currentCommand+8
  2320                           
  2321                           ;motorMain.c: 259:     currentCommand.done = 0;
  2322     03EE  01C3               	clrf	_currentCommand+13
  2323     03EF                     l1103:
  2324                           
  2325                           ;motorMain.c: 261:     TurnLeftCommand[7] = pwm;
  2326     03EF  0868               	movf	CreateTurnLeftCommmand@pwm,w
  2327     03F0  00DF               	movwf	_TurnLeftCommand+7
  2328     03F1                     l1105:
  2329                           
  2330                           ;motorMain.c: 262:     TurnLeftCommand[9] = pwm;
  2331     03F1  0868               	movf	CreateTurnLeftCommmand@pwm,w
  2332     03F2  00E1               	movwf	_TurnLeftCommand+9
  2333     03F3                     l1107:
  2334                           
  2335                           ;motorMain.c: 263:     currentCommand.toSend = TurnLeftCommand;
  2336     03F3  3058               	movlw	(low (_TurnLeftCommand| 0))& (0+255)
  2337     03F4  00BC               	movwf	low ((_currentCommand| 0+6))
  2338     03F5                     l1109:
  2339                           
  2340                           ;motorMain.c: 264:     PIE3bits.TXIE = 1;
  2341     03F5  002E               	movlb	14	; select bank14
  2342     03F6  1619               	bsf	25,4	;volatile
  2343     03F7                     l148:
  2344     03F7  0008               	return
  2345     03F8                     __end_of_CreateTurnLeftCommmand:
  2346                           
  2347                           	psect	text4
  2348     0384                     __ptext4:	
  2349 ;; *************** function _CreateMoveForwardCommmand *****************
  2350 ;; Defined at:
  2351 ;;		line 267 in file "motorMain.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  pwm             2    0[BANK0 ] unsigned int 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2368 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2369 ;;Total ram usage:        2 bytes
  2370 ;; Hardware stack levels used: 1
  2371 ;; Hardware stack levels required when called: 2
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_drive
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379     0384                     _CreateMoveForwardCommmand:	
  2380                           ;psect for function _CreateMoveForwardCommmand
  2381                           
  2382     0384                     l1111:	
  2383                           ;incstack = 0
  2384                           ; Regs used in _CreateMoveForwardCommmand: [wreg+status,2]
  2385                           
  2386                           
  2387                           ;motorMain.c: 268:     currentCommand.sendId = 5;
  2388     0384  3005               	movlw	5
  2389     0385  0020               	movlb	0	; select bank0
  2390     0386  00BA               	movwf	_currentCommand+4
  2391     0387  3000               	movlw	0
  2392     0388  00BB               	movwf	_currentCommand+5
  2393     0389                     l1113:
  2394                           
  2395                           ;motorMain.c: 269:     currentCommand.sendIt = 0;
  2396     0389  01B8               	clrf	_currentCommand+2
  2397     038A  01B9               	clrf	_currentCommand+3
  2398     038B                     l1115:
  2399                           
  2400                           ;motorMain.c: 270:     currentCommand.sendLimit = 10;
  2401     038B  300A               	movlw	10
  2402     038C  00B6               	movwf	_currentCommand
  2403     038D  3000               	movlw	0
  2404     038E  00B7               	movwf	_currentCommand+1
  2405                           
  2406                           ;motorMain.c: 271:     currentCommand.receiveId = 0;
  2407     038F  01C1               	clrf	_currentCommand+11
  2408     0390  01C2               	clrf	_currentCommand+12
  2409                           
  2410                           ;motorMain.c: 272:     currentCommand.receiveLimit = 0;
  2411     0391  01BF               	clrf	_currentCommand+9
  2412     0392  01C0               	clrf	_currentCommand+10
  2413                           
  2414                           ;motorMain.c: 273:     currentCommand.receiveIt = 0;
  2415     0393  01BD               	clrf	_currentCommand+7
  2416     0394  01BE               	clrf	_currentCommand+8
  2417                           
  2418                           ;motorMain.c: 274:     currentCommand.done = 0;
  2419     0395  01C3               	clrf	_currentCommand+13
  2420     0396                     l1117:
  2421                           
  2422                           ;motorMain.c: 276:     MoveForwardCommand[7] = pwm;
  2423     0396  0868               	movf	CreateMoveForwardCommmand@pwm,w
  2424     0397  0021               	movlb	1	; select bank1
  2425     0398  00C2               	movwf	(_MoveForwardCommand^(0+128)+7)
  2426     0399                     l1119:
  2427                           
  2428                           ;motorMain.c: 277:     MoveForwardCommand[9] = pwm;
  2429     0399  0020               	movlb	0	; select bank0
  2430     039A  0868               	movf	CreateMoveForwardCommmand@pwm,w
  2431     039B  0021               	movlb	1	; select bank1
  2432     039C  00C4               	movwf	(_MoveForwardCommand^(0+128)+9)
  2433     039D                     l1121:
  2434                           
  2435                           ;motorMain.c: 278:     currentCommand.toSend = MoveForwardCommand;
  2436     039D  30BB               	movlw	(low (_MoveForwardCommand| 0))& (0+255)
  2437     039E  0020               	movlb	0	; select bank0
  2438     039F  00BC               	movwf	low ((_currentCommand| 0+6))
  2439     03A0                     l1123:
  2440                           
  2441                           ;motorMain.c: 279:     PIE3bits.TXIE = 1;
  2442     03A0  002E               	movlb	14	; select bank14
  2443     03A1  1619               	bsf	25,4	;volatile
  2444     03A2                     l151:
  2445     03A2  0008               	return
  2446     03A3                     __end_of_CreateMoveForwardCommmand:
  2447                           
  2448                           	psect	text5
  2449     03A3                     __ptext5:	
  2450 ;; *************** function _CreateMoveBackwardCommmand *****************
  2451 ;; Defined at:
  2452 ;;		line 282 in file "motorMain.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  pwm             2    0[BANK0 ] unsigned int 
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, status,2
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2469 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2470 ;;Total ram usage:        2 bytes
  2471 ;; Hardware stack levels used: 1
  2472 ;; Hardware stack levels required when called: 2
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_drive
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480     03A3                     _CreateMoveBackwardCommmand:	
  2481                           ;psect for function _CreateMoveBackwardCommmand
  2482                           
  2483     03A3                     l1125:	
  2484                           ;incstack = 0
  2485                           ; Regs used in _CreateMoveBackwardCommmand: [wreg+status,2]
  2486                           
  2487                           
  2488                           ;motorMain.c: 283:     currentCommand.sendId = 6;
  2489     03A3  3006               	movlw	6
  2490     03A4  0020               	movlb	0	; select bank0
  2491     03A5  00BA               	movwf	_currentCommand+4
  2492     03A6  3000               	movlw	0
  2493     03A7  00BB               	movwf	_currentCommand+5
  2494     03A8                     l1127:
  2495                           
  2496                           ;motorMain.c: 284:     currentCommand.sendIt = 0;
  2497     03A8  01B8               	clrf	_currentCommand+2
  2498     03A9  01B9               	clrf	_currentCommand+3
  2499     03AA                     l1129:
  2500                           
  2501                           ;motorMain.c: 285:     currentCommand.sendLimit = 10;
  2502     03AA  300A               	movlw	10
  2503     03AB  00B6               	movwf	_currentCommand
  2504     03AC  3000               	movlw	0
  2505     03AD  00B7               	movwf	_currentCommand+1
  2506                           
  2507                           ;motorMain.c: 286:     currentCommand.receiveId = 0;
  2508     03AE  01C1               	clrf	_currentCommand+11
  2509     03AF  01C2               	clrf	_currentCommand+12
  2510                           
  2511                           ;motorMain.c: 287:     currentCommand.receiveLimit = 0;
  2512     03B0  01BF               	clrf	_currentCommand+9
  2513     03B1  01C0               	clrf	_currentCommand+10
  2514                           
  2515                           ;motorMain.c: 288:     currentCommand.receiveIt = 0;
  2516     03B2  01BD               	clrf	_currentCommand+7
  2517     03B3  01BE               	clrf	_currentCommand+8
  2518                           
  2519                           ;motorMain.c: 289:     currentCommand.done = 0;
  2520     03B4  01C3               	clrf	_currentCommand+13
  2521     03B5                     l1131:
  2522                           
  2523                           ;motorMain.c: 291:     MoveBackwardCommand[7] = pwm;
  2524     03B5  0868               	movf	CreateMoveBackwardCommmand@pwm,w
  2525     03B6  0021               	movlb	1	; select bank1
  2526     03B7  00B8               	movwf	(_MoveBackwardCommand^(0+128)+7)
  2527     03B8                     l1133:
  2528                           
  2529                           ;motorMain.c: 292:     MoveBackwardCommand[9] = pwm;
  2530     03B8  0020               	movlb	0	; select bank0
  2531     03B9  0868               	movf	CreateMoveBackwardCommmand@pwm,w
  2532     03BA  0021               	movlb	1	; select bank1
  2533     03BB  00BA               	movwf	(_MoveBackwardCommand^(0+128)+9)
  2534     03BC                     l1135:
  2535                           
  2536                           ;motorMain.c: 293:     currentCommand.toSend = MoveBackwardCommand;
  2537     03BC  30B1               	movlw	(low (_MoveBackwardCommand| 0))& (0+255)
  2538     03BD  0020               	movlb	0	; select bank0
  2539     03BE  00BC               	movwf	low ((_currentCommand| 0+6))
  2540     03BF                     l1137:
  2541                           
  2542                           ;motorMain.c: 294:     PIE3bits.TXIE = 1;
  2543     03BF  002E               	movlb	14	; select bank14
  2544     03C0  1619               	bsf	25,4	;volatile
  2545     03C1                     l154:
  2546     03C1  0008               	return
  2547     03C2                     __end_of_CreateMoveBackwardCommmand:
  2548                           
  2549                           	psect	text6
  2550     03F8                     __ptext6:	
  2551 ;; *************** function _CreateControlsCommand *****************
  2552 ;; Defined at:
  2553 ;;		line 310 in file "motorMain.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, status,2
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels used: 1
  2573 ;; Hardware stack levels required when called: 2
  2574 ;; This function calls:
  2575 ;;		Nothing
  2576 ;; This function is called by:
  2577 ;;		_main
  2578 ;;		_drive
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582     03F8                     _CreateControlsCommand:	
  2583                           ;psect for function _CreateControlsCommand
  2584                           
  2585     03F8                     l1069:	
  2586                           ;incstack = 0
  2587                           ; Regs used in _CreateControlsCommand: [wreg+status,2]
  2588                           
  2589                           
  2590                           ;motorMain.c: 311:     currentCommand.receiveId = CONTROL_INPUT;
  2591     03F8  3001               	movlw	1
  2592     03F9  0020               	movlb	0	; select bank0
  2593     03FA  00C1               	movwf	_currentCommand+11
  2594     03FB  3000               	movlw	0
  2595     03FC  00C2               	movwf	_currentCommand+12
  2596                           
  2597                           ;motorMain.c: 312:     currentCommand.receiveLimit = 26;
  2598     03FD  301A               	movlw	26
  2599     03FE  00BF               	movwf	_currentCommand+9
  2600     03FF  3000               	movlw	0
  2601     0400  00C0               	movwf	_currentCommand+10
  2602     0401                     l1071:
  2603                           
  2604                           ;motorMain.c: 313:     currentCommand.receiveIt = 0;
  2605     0401  01BD               	clrf	_currentCommand+7
  2606     0402  01BE               	clrf	_currentCommand+8
  2607     0403                     l1073:
  2608                           
  2609                           ;motorMain.c: 314:     currentCommand.sendId = CONTROL_OUTPUT;
  2610     0403  3001               	movlw	1
  2611     0404  00BA               	movwf	_currentCommand+4
  2612     0405  3000               	movlw	0
  2613     0406  00BB               	movwf	_currentCommand+5
  2614     0407                     l1075:
  2615                           
  2616                           ;motorMain.c: 315:     currentCommand.toSend = (unsigned char*) GetUserDataCommand;
  2617     0407  3062               	movlw	(low (_GetUserDataCommand| 0))& (0+255)
  2618     0408  00BC               	movwf	low ((_currentCommand| 0+6))
  2619     0409                     l1077:
  2620                           
  2621                           ;motorMain.c: 316:     currentCommand.sendIt = 0;
  2622     0409  01B8               	clrf	_currentCommand+2
  2623     040A  01B9               	clrf	_currentCommand+3
  2624                           
  2625                           ;motorMain.c: 317:     currentCommand.sendLimit = 6;
  2626     040B  3006               	movlw	6
  2627     040C  00B6               	movwf	_currentCommand
  2628     040D  3000               	movlw	0
  2629     040E  00B7               	movwf	_currentCommand+1
  2630     040F                     l1079:
  2631                           
  2632                           ;motorMain.c: 318:     currentCommand.done = 0;
  2633     040F  01C3               	clrf	_currentCommand+13
  2634     0410                     l1081:
  2635                           
  2636                           ;motorMain.c: 319:     PIE3bits.TXIE = 1;
  2637     0410  002E               	movlb	14	; select bank14
  2638     0411  1619               	bsf	25,4	;volatile
  2639     0412                     l160:
  2640     0412  0008               	return
  2641     0413                     __end_of_CreateControlsCommand:
  2642                           
  2643                           	psect	text7
  2644     0413                     __ptext7:	
  2645 ;; *************** function _CreateBreak *****************
  2646 ;; Defined at:
  2647 ;;		line 297 in file "motorMain.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2665 ;;Total ram usage:        0 bytes
  2666 ;; Hardware stack levels used: 1
  2667 ;; Hardware stack levels required when called: 2
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_drive
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675     0413                     _CreateBreak:	
  2676                           ;psect for function _CreateBreak
  2677                           
  2678     0413                     l1139:	
  2679                           ;incstack = 0
  2680                           ; Regs used in _CreateBreak: [wreg+status,2]
  2681                           
  2682                           
  2683                           ;motorMain.c: 298:     currentCommand.sendId = 7;
  2684     0413  3007               	movlw	7
  2685     0414  0020               	movlb	0	; select bank0
  2686     0415  00BA               	movwf	_currentCommand+4
  2687     0416  3000               	movlw	0
  2688     0417  00BB               	movwf	_currentCommand+5
  2689     0418                     l1141:
  2690                           
  2691                           ;motorMain.c: 299:     currentCommand.sendIt = 0;
  2692     0418  01B8               	clrf	_currentCommand+2
  2693     0419  01B9               	clrf	_currentCommand+3
  2694     041A                     l1143:
  2695                           
  2696                           ;motorMain.c: 300:     currentCommand.sendLimit = 10;
  2697     041A  300A               	movlw	10
  2698     041B  00B6               	movwf	_currentCommand
  2699     041C  3000               	movlw	0
  2700     041D  00B7               	movwf	_currentCommand+1
  2701                           
  2702                           ;motorMain.c: 301:     currentCommand.receiveId = 0;
  2703     041E  01C1               	clrf	_currentCommand+11
  2704     041F  01C2               	clrf	_currentCommand+12
  2705                           
  2706                           ;motorMain.c: 302:     currentCommand.receiveLimit = 0;
  2707     0420  01BF               	clrf	_currentCommand+9
  2708     0421  01C0               	clrf	_currentCommand+10
  2709                           
  2710                           ;motorMain.c: 303:     currentCommand.receiveIt = 0;
  2711     0422  01BD               	clrf	_currentCommand+7
  2712     0423  01BE               	clrf	_currentCommand+8
  2713                           
  2714                           ;motorMain.c: 304:     currentCommand.done = 0;
  2715     0424  01C3               	clrf	_currentCommand+13
  2716     0425                     l1145:
  2717                           
  2718                           ;motorMain.c: 306:     currentCommand.toSend = Break;
  2719     0425  30A7               	movlw	(low (_Break| 0))& (0+255)
  2720     0426  00BC               	movwf	low ((_currentCommand| 0+6))
  2721     0427                     l1147:
  2722                           
  2723                           ;motorMain.c: 307:     PIE3bits.TXIE = 1;
  2724     0427  002E               	movlb	14	; select bank14
  2725     0428  1619               	bsf	25,4	;volatile
  2726     0429                     l157:
  2727     0429  0008               	return
  2728     042A                     __end_of_CreateBreak:
  2729                           
  2730                           	psect	intentry
  2731     0004                     __pintentry:	
  2732 ;; *************** function _myFunction *****************
  2733 ;; Defined at:
  2734 ;;		line 323 in file "motorMain.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;  input           2    7[COMMON] int 
  2739 ;; Return value:  Size  Location     Type
  2740 ;;                  1    wreg      void 
  2741 ;; Registers used:
  2742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2749 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2750 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;Total ram usage:        4 bytes
  2753 ;; Hardware stack levels used: 1
  2754 ;; Hardware stack levels required when called: 1
  2755 ;; This function calls:
  2756 ;;		_GetControllerInput
  2757 ;; This function is called by:
  2758 ;;		Interrupt level 1
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762     0004                     _myFunction:
  2763                           
  2764                           ;incstack = 0
  2765     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  2766                           
  2767                           ; Regs used in _myFunction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2768     0005  3180               	pagesel	$
  2769     0006                     i1l1303:
  2770                           
  2771                           ;motorMain.c: 324:     if(PIR3bits.RCIF == 1){
  2772     0006  002E               	movlb	14	; select bank14
  2773     0007  1E8F               	btfss	15,5	;volatile
  2774     0008  280A               	goto	u53_21
  2775     0009  280B               	goto	u53_20
  2776     000A                     u53_21:
  2777     000A  2841               	goto	i1l165
  2778     000B                     u53_20:
  2779     000B                     i1l1305:
  2780                           
  2781                           ;motorMain.c: 325:         int input = RCREG;
  2782     000B  0022               	movlb	2	; select bank2
  2783     000C  0819               	movf	25,w	;volatile
  2784     000D  00F5               	movwf	??_myFunction
  2785     000E  01F6               	clrf	??_myFunction+1
  2786     000F  0875               	movf	??_myFunction,w
  2787     0010  00F7               	movwf	myFunction@input
  2788     0011  0876               	movf	??_myFunction+1,w
  2789     0012  00F8               	movwf	myFunction@input+1
  2790     0013                     i1l1307:
  2791                           
  2792                           ;motorMain.c: 326:         if(currentCommand.receiveId == CONTROL_INPUT){
  2793     0013  0020               	movlb	0	; select bank0
  2794     0014  0341               	decf	_currentCommand+11,w
  2795     0015  0442               	iorwf	_currentCommand+12,w
  2796     0016  1D03               	btfss	3,2
  2797     0017  2819               	goto	u54_21
  2798     0018  281A               	goto	u54_20
  2799     0019                     u54_21:
  2800     0019  2828               	goto	i1l1313
  2801     001A                     u54_20:
  2802     001A                     i1l1309:
  2803                           
  2804                           ;motorMain.c: 327:             GetControllerInput(input);
  2805     001A  0878               	movf	myFunction@input+1,w
  2806     001B  00F1               	movwf	GetControllerInput@input+1
  2807     001C  0877               	movf	myFunction@input,w
  2808     001D  00F0               	movwf	GetControllerInput@input
  2809     001E  3181  21C1  3180   	fcall	_GetControllerInput
  2810     0021                     i1l1311:
  2811                           
  2812                           ;motorMain.c: 328:             currentCommand.receiveIt = currentCommand.receiveIt + 1;
  2813     0021  0020               	movlb	0	; select bank0
  2814     0022  083D               	movf	_currentCommand+7,w
  2815     0023  3E01               	addlw	1
  2816     0024  00BD               	movwf	_currentCommand+7
  2817     0025  3000               	movlw	0
  2818     0026  3D3E               	addwfc	_currentCommand+8,w
  2819     0027  00BE               	movwf	_currentCommand+8
  2820     0028                     i1l1313:
  2821                           
  2822                           ;motorMain.c: 330:         if(currentCommand.receiveIt >= currentCommand.receiveLimit){
  2823     0028  083E               	movf	_currentCommand+8,w
  2824     0029  3A80               	xorlw	128
  2825     002A  00F5               	movwf	??_myFunction
  2826     002B  0840               	movf	_currentCommand+10,w
  2827     002C  3A80               	xorlw	128
  2828     002D  0275               	subwf	??_myFunction,w
  2829     002E  1D03               	skipz
  2830     002F  2832               	goto	u55_25
  2831     0030  083F               	movf	_currentCommand+9,w
  2832     0031  023D               	subwf	_currentCommand+7,w
  2833     0032                     u55_25:
  2834     0032  1C03               	skipc
  2835     0033  2835               	goto	u55_21
  2836     0034  2836               	goto	u55_20
  2837     0035                     u55_21:
  2838     0035  2839               	goto	i1l1317
  2839     0036                     u55_20:
  2840     0036                     i1l1315:
  2841                           
  2842                           ;motorMain.c: 331:             currentCommand.done = 1;
  2843     0036  0020               	movlb	0	; select bank0
  2844     0037  01C3               	clrf	_currentCommand+13
  2845     0038  0AC3               	incf	_currentCommand+13,f
  2846     0039                     i1l1317:
  2847                           
  2848                           ;motorMain.c: 333:         inputStage++;
  2849     0039  3001               	movlw	1
  2850     003A  0020               	movlb	0	; select bank0
  2851     003B  07C6               	addwf	_inputStage,f
  2852     003C  3000               	movlw	0
  2853     003D  3DC7               	addwfc	_inputStage+1,f
  2854     003E                     i1l1319:
  2855                           
  2856                           ;motorMain.c: 334:         PIR3bits.RCIF =0;
  2857     003E  002E               	movlb	14	; select bank14
  2858     003F  128F               	bcf	15,5	;volatile
  2859                           
  2860                           ;motorMain.c: 335:     }
  2861     0040  287B               	goto	i1l173
  2862     0041                     i1l165:	
  2863                           ;motorMain.c: 336:     else if(PIR3bits.TXIF == 1){
  2864                           
  2865     0041  1E0F               	btfss	15,4	;volatile
  2866     0042  2844               	goto	u56_21
  2867     0043  2845               	goto	u56_20
  2868     0044                     u56_21:
  2869     0044  287B               	goto	i1l173
  2870     0045                     u56_20:
  2871     0045                     i1l1321:
  2872                           
  2873                           ;motorMain.c: 337:         if(currentCommand.sendIt >= currentCommand.sendLimit){
  2874     0045  0020               	movlb	0	; select bank0
  2875     0046  0839               	movf	_currentCommand+3,w
  2876     0047  3A80               	xorlw	128
  2877     0048  00F5               	movwf	??_myFunction
  2878     0049  0837               	movf	_currentCommand+1,w
  2879     004A  3A80               	xorlw	128
  2880     004B  0275               	subwf	??_myFunction,w
  2881     004C  1D03               	skipz
  2882     004D  2850               	goto	u57_25
  2883     004E  0836               	movf	_currentCommand,w
  2884     004F  0238               	subwf	_currentCommand+2,w
  2885     0050                     u57_25:
  2886     0050  1C03               	skipc
  2887     0051  2853               	goto	u57_21
  2888     0052  2854               	goto	u57_20
  2889     0053                     u57_21:
  2890     0053  2868               	goto	i1l1329
  2891     0054                     u57_20:
  2892     0054                     i1l1323:
  2893                           
  2894                           ;motorMain.c: 338:             PIE3bits.TXIE = 0;
  2895     0054  002E               	movlb	14	; select bank14
  2896     0055  1219               	bcf	25,4	;volatile
  2897     0056                     i1l1325:
  2898                           
  2899                           ;motorMain.c: 339:             if(currentCommand.receiveLimit <= 0){
  2900     0056  0020               	movlb	0	; select bank0
  2901     0057  0840               	movf	_currentCommand+10,w
  2902     0058  3A80               	xorlw	128
  2903     0059  00F5               	movwf	??_myFunction
  2904     005A  3080               	movlw	128
  2905     005B  0275               	subwf	??_myFunction,w
  2906     005C  1D03               	skipz
  2907     005D  2860               	goto	u58_25
  2908     005E  3001               	movlw	1
  2909     005F  023F               	subwf	_currentCommand+9,w
  2910     0060                     u58_25:
  2911     0060  1803               	skipnc
  2912     0061  2863               	goto	u58_21
  2913     0062  2864               	goto	u58_20
  2914     0063                     u58_21:
  2915     0063  2879               	goto	i1l1333
  2916     0064                     u58_20:
  2917     0064                     i1l1327:
  2918                           
  2919                           ;motorMain.c: 340:                 currentCommand.done = 1;
  2920     0064  0020               	movlb	0	; select bank0
  2921     0065  01C3               	clrf	_currentCommand+13
  2922     0066  0AC3               	incf	_currentCommand+13,f
  2923     0067  2879               	goto	i1l1333
  2924     0068                     i1l1329:
  2925                           
  2926                           ;motorMain.c: 344:             TX1REGbits.TX1REG = currentCommand.toSend[currentCommand.
      +                          sendIt];
  2927     0068  0020               	movlb	0	; select bank0
  2928     0069  0838               	movf	_currentCommand+2,w
  2929     006A  073C               	addwf	low ((_currentCommand| 0+6)),w
  2930     006B  00F5               	movwf	??_myFunction
  2931     006C  0875               	movf	??_myFunction,w
  2932     006D  0086               	movwf	6
  2933     006E  0187               	clrf	7
  2934     006F  0801               	movf	1,w
  2935     0070  0022               	movlb	2	; select bank2
  2936     0071  009A               	movwf	26	;volatile
  2937     0072                     i1l1331:
  2938                           
  2939                           ;motorMain.c: 345:             currentCommand.sendIt = currentCommand.sendIt + 1;
  2940     0072  0020               	movlb	0	; select bank0
  2941     0073  0838               	movf	_currentCommand+2,w
  2942     0074  3E01               	addlw	1
  2943     0075  00B8               	movwf	_currentCommand+2
  2944     0076  3000               	movlw	0
  2945     0077  3D39               	addwfc	_currentCommand+3,w
  2946     0078  00B9               	movwf	_currentCommand+3
  2947     0079                     i1l1333:
  2948                           
  2949                           ;motorMain.c: 347:         PIR3bits.TXIF = 0;
  2950     0079  002E               	movlb	14	; select bank14
  2951     007A  120F               	bcf	15,4	;volatile
  2952     007B                     i1l173:
  2953     007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2954     007C  0009               	retfie
  2955     007D                     __end_of_myFunction:
  2956                           
  2957                           	psect	text9
  2958     01C1                     __ptext9:	
  2959 ;; *************** function _GetControllerInput *****************
  2960 ;; Defined at:
  2961 ;;		line 189 in file "motorMain.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;  input           2    0[COMMON] int 
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;		None
  2966 ;; Return value:  Size  Location     Type
  2967 ;;                  1    wreg      void 
  2968 ;; Registers used:
  2969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2970 ;; Tracked objects:
  2971 ;;		On entry : 0/0
  2972 ;;		On exit  : 0/0
  2973 ;;		Unchanged: 0/0
  2974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2975 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2977 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2978 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2979 ;;Total ram usage:        5 bytes
  2980 ;; Hardware stack levels used: 1
  2981 ;; This function calls:
  2982 ;;		Nothing
  2983 ;; This function is called by:
  2984 ;;		_myFunction
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988     01C1                     _GetControllerInput:	
  2989                           ;psect for function _GetControllerInput
  2990                           
  2991     01C1                     i1l1193:	
  2992                           ;incstack = 0
  2993                           ; Regs used in _GetControllerInput: [wreg-fsr1h+status,2+status,0]
  2994                           
  2995                           
  2996                           ;motorMain.c: 190:     if(currentCommand.receiveIt <0 ){
  2997     01C1  3007               	movlw	7
  2998     01C2  3E36               	addlw	(low (_currentCommand| 0))& (0+255)
  2999     01C3  0086               	movwf	6
  3000     01C4  0187               	clrf	7
  3001     01C5  3141               	addfsr 1,1
  3002     01C6  1F81               	btfss	1,7
  3003     01C7  29C9               	goto	u46_21
  3004     01C8  29CA               	goto	u46_20
  3005     01C9                     u46_21:
  3006     01C9  2A86               	goto	i1l1241
  3007     01CA                     u46_20:
  3008     01CA  2ACA               	goto	i1l107
  3009     01CB                     i1l1197:
  3010     01CB  0871               	movf	GetControllerInput@input+1,w
  3011     01CC  00B5               	movwf	_controls+21
  3012     01CD  0870               	movf	GetControllerInput@input,w
  3013     01CE  00B4               	movwf	_controls+20
  3014     01CF  2ACA               	goto	i1l107
  3015     01D0                     i1l1199:
  3016     01D0  3014               	movlw	20
  3017     01D1  3E20               	addlw	(low (_controls| 0))& (0+255)
  3018     01D2  0086               	movwf	6
  3019     01D3  0187               	clrf	7
  3020     01D4  0871               	movf	GetControllerInput@input+1,w
  3021     01D5  00F3               	movwf	??_GetControllerInput+1
  3022     01D6  0870               	movf	GetControllerInput@input,w
  3023     01D7  00F2               	movwf	??_GetControllerInput
  3024     01D8  0872               	movf	??_GetControllerInput,w
  3025     01D9  00F3               	movwf	??_GetControllerInput+1
  3026     01DA  01F2               	clrf	??_GetControllerInput
  3027     01DB  3F40               	moviw [0]fsr1
  3028     01DC  0772               	addwf	??_GetControllerInput,w
  3029     01DD  00A0               	movwf	_controls
  3030     01DE  3F41               	moviw [1]fsr1
  3031     01DF  3D73               	addwfc	??_GetControllerInput+1,w
  3032     01E0  00A1               	movwf	_controls+1
  3033     01E1  2ACA               	goto	i1l107
  3034     01E2                     i1l1203:
  3035     01E2  3014               	movlw	20
  3036     01E3  3E20               	addlw	(low (_controls| 0))& (0+255)
  3037     01E4  0086               	movwf	6
  3038     01E5  0187               	clrf	7
  3039     01E6  0871               	movf	GetControllerInput@input+1,w
  3040     01E7  00F3               	movwf	??_GetControllerInput+1
  3041     01E8  0870               	movf	GetControllerInput@input,w
  3042     01E9  00F2               	movwf	??_GetControllerInput
  3043     01EA  0872               	movf	??_GetControllerInput,w
  3044     01EB  00F3               	movwf	??_GetControllerInput+1
  3045     01EC  01F2               	clrf	??_GetControllerInput
  3046     01ED  3F40               	moviw [0]fsr1
  3047     01EE  0772               	addwf	??_GetControllerInput,w
  3048     01EF  00A2               	movwf	_controls+2
  3049     01F0  3F41               	moviw [1]fsr1
  3050     01F1  3D73               	addwfc	??_GetControllerInput+1,w
  3051     01F2  00A3               	movwf	_controls+3
  3052     01F3  2ACA               	goto	i1l107
  3053     01F4                     i1l1207:
  3054     01F4  3014               	movlw	20
  3055     01F5  3E20               	addlw	(low (_controls| 0))& (0+255)
  3056     01F6  0086               	movwf	6
  3057     01F7  0187               	clrf	7
  3058     01F8  0871               	movf	GetControllerInput@input+1,w
  3059     01F9  00F3               	movwf	??_GetControllerInput+1
  3060     01FA  0870               	movf	GetControllerInput@input,w
  3061     01FB  00F2               	movwf	??_GetControllerInput
  3062     01FC  0872               	movf	??_GetControllerInput,w
  3063     01FD  00F3               	movwf	??_GetControllerInput+1
  3064     01FE  01F2               	clrf	??_GetControllerInput
  3065     01FF  3F40               	moviw [0]fsr1
  3066     0200  0772               	addwf	??_GetControllerInput,w
  3067     0201  00A4               	movwf	_controls+4
  3068     0202  3F41               	moviw [1]fsr1
  3069     0203  3D73               	addwfc	??_GetControllerInput+1,w
  3070     0204  00A5               	movwf	_controls+5
  3071     0205  2ACA               	goto	i1l107
  3072     0206                     i1l1211:
  3073     0206  3014               	movlw	20
  3074     0207  3E20               	addlw	(low (_controls| 0))& (0+255)
  3075     0208  0086               	movwf	6
  3076     0209  0187               	clrf	7
  3077     020A  0871               	movf	GetControllerInput@input+1,w
  3078     020B  00F3               	movwf	??_GetControllerInput+1
  3079     020C  0870               	movf	GetControllerInput@input,w
  3080     020D  00F2               	movwf	??_GetControllerInput
  3081     020E  0872               	movf	??_GetControllerInput,w
  3082     020F  00F3               	movwf	??_GetControllerInput+1
  3083     0210  01F2               	clrf	??_GetControllerInput
  3084     0211  3F40               	moviw [0]fsr1
  3085     0212  0772               	addwf	??_GetControllerInput,w
  3086     0213  00A6               	movwf	_controls+6
  3087     0214  3F41               	moviw [1]fsr1
  3088     0215  3D73               	addwfc	??_GetControllerInput+1,w
  3089     0216  00A7               	movwf	_controls+7
  3090     0217  2ACA               	goto	i1l107
  3091     0218                     i1l1215:
  3092     0218  3014               	movlw	20
  3093     0219  3E20               	addlw	(low (_controls| 0))& (0+255)
  3094     021A  0086               	movwf	6
  3095     021B  0187               	clrf	7
  3096     021C  0871               	movf	GetControllerInput@input+1,w
  3097     021D  00F3               	movwf	??_GetControllerInput+1
  3098     021E  0870               	movf	GetControllerInput@input,w
  3099     021F  00F2               	movwf	??_GetControllerInput
  3100     0220  0872               	movf	??_GetControllerInput,w
  3101     0221  00F3               	movwf	??_GetControllerInput+1
  3102     0222  01F2               	clrf	??_GetControllerInput
  3103     0223  3F40               	moviw [0]fsr1
  3104     0224  0772               	addwf	??_GetControllerInput,w
  3105     0225  00A8               	movwf	_controls+8
  3106     0226  3F41               	moviw [1]fsr1
  3107     0227  3D73               	addwfc	??_GetControllerInput+1,w
  3108     0228  00A9               	movwf	_controls+9
  3109     0229  2ACA               	goto	i1l107
  3110     022A                     i1l1219:
  3111     022A  3014               	movlw	20
  3112     022B  3E20               	addlw	(low (_controls| 0))& (0+255)
  3113     022C  0086               	movwf	6
  3114     022D  0187               	clrf	7
  3115     022E  0871               	movf	GetControllerInput@input+1,w
  3116     022F  00F3               	movwf	??_GetControllerInput+1
  3117     0230  0870               	movf	GetControllerInput@input,w
  3118     0231  00F2               	movwf	??_GetControllerInput
  3119     0232  0872               	movf	??_GetControllerInput,w
  3120     0233  00F3               	movwf	??_GetControllerInput+1
  3121     0234  01F2               	clrf	??_GetControllerInput
  3122     0235  3F40               	moviw [0]fsr1
  3123     0236  0772               	addwf	??_GetControllerInput,w
  3124     0237  00AA               	movwf	_controls+10
  3125     0238  3F41               	moviw [1]fsr1
  3126     0239  3D73               	addwfc	??_GetControllerInput+1,w
  3127     023A  00AB               	movwf	_controls+11
  3128     023B  2ACA               	goto	i1l107
  3129     023C                     i1l1223:
  3130     023C  3014               	movlw	20
  3131     023D  3E20               	addlw	(low (_controls| 0))& (0+255)
  3132     023E  0086               	movwf	6
  3133     023F  0187               	clrf	7
  3134     0240  0871               	movf	GetControllerInput@input+1,w
  3135     0241  00F3               	movwf	??_GetControllerInput+1
  3136     0242  0870               	movf	GetControllerInput@input,w
  3137     0243  00F2               	movwf	??_GetControllerInput
  3138     0244  0872               	movf	??_GetControllerInput,w
  3139     0245  00F3               	movwf	??_GetControllerInput+1
  3140     0246  01F2               	clrf	??_GetControllerInput
  3141     0247  3F40               	moviw [0]fsr1
  3142     0248  0772               	addwf	??_GetControllerInput,w
  3143     0249  00AC               	movwf	_controls+12
  3144     024A  3F41               	moviw [1]fsr1
  3145     024B  3D73               	addwfc	??_GetControllerInput+1,w
  3146     024C  00AD               	movwf	_controls+13
  3147     024D  2ACA               	goto	i1l107
  3148     024E                     i1l1227:
  3149     024E  3014               	movlw	20
  3150     024F  3E20               	addlw	(low (_controls| 0))& (0+255)
  3151     0250  0086               	movwf	6
  3152     0251  0187               	clrf	7
  3153     0252  0871               	movf	GetControllerInput@input+1,w
  3154     0253  00F3               	movwf	??_GetControllerInput+1
  3155     0254  0870               	movf	GetControllerInput@input,w
  3156     0255  00F2               	movwf	??_GetControllerInput
  3157     0256  0872               	movf	??_GetControllerInput,w
  3158     0257  00F3               	movwf	??_GetControllerInput+1
  3159     0258  01F2               	clrf	??_GetControllerInput
  3160     0259  3F40               	moviw [0]fsr1
  3161     025A  0772               	addwf	??_GetControllerInput,w
  3162     025B  00AE               	movwf	_controls+14
  3163     025C  3F41               	moviw [1]fsr1
  3164     025D  3D73               	addwfc	??_GetControllerInput+1,w
  3165     025E  00AF               	movwf	_controls+15
  3166     025F  2ACA               	goto	i1l107
  3167     0260                     i1l1231:
  3168     0260  3014               	movlw	20
  3169     0261  3E20               	addlw	(low (_controls| 0))& (0+255)
  3170     0262  0086               	movwf	6
  3171     0263  0187               	clrf	7
  3172     0264  0871               	movf	GetControllerInput@input+1,w
  3173     0265  00F3               	movwf	??_GetControllerInput+1
  3174     0266  0870               	movf	GetControllerInput@input,w
  3175     0267  00F2               	movwf	??_GetControllerInput
  3176     0268  0872               	movf	??_GetControllerInput,w
  3177     0269  00F3               	movwf	??_GetControllerInput+1
  3178     026A  01F2               	clrf	??_GetControllerInput
  3179     026B  3F40               	moviw [0]fsr1
  3180     026C  0772               	addwf	??_GetControllerInput,w
  3181     026D  00B0               	movwf	_controls+16
  3182     026E  3F41               	moviw [1]fsr1
  3183     026F  3D73               	addwfc	??_GetControllerInput+1,w
  3184     0270  00B1               	movwf	_controls+17
  3185     0271  2ACA               	goto	i1l107
  3186     0272                     i1l1235:
  3187     0272  3014               	movlw	20
  3188     0273  3E20               	addlw	(low (_controls| 0))& (0+255)
  3189     0274  0086               	movwf	6
  3190     0275  0187               	clrf	7
  3191     0276  0871               	movf	GetControllerInput@input+1,w
  3192     0277  00F3               	movwf	??_GetControllerInput+1
  3193     0278  0870               	movf	GetControllerInput@input,w
  3194     0279  00F2               	movwf	??_GetControllerInput
  3195     027A  0872               	movf	??_GetControllerInput,w
  3196     027B  00F3               	movwf	??_GetControllerInput+1
  3197     027C  01F2               	clrf	??_GetControllerInput
  3198     027D  3F40               	moviw [0]fsr1
  3199     027E  0772               	addwf	??_GetControllerInput,w
  3200     027F  00B2               	movwf	_controls+18
  3201     0280  3F41               	moviw [1]fsr1
  3202     0281  3D73               	addwfc	??_GetControllerInput+1,w
  3203     0282  00B3               	movwf	_controls+19
  3204     0283                     i1l1237:
  3205     0283  01F9               	clrf	_currentInput
  3206     0284  01FA               	clrf	_currentInput+1
  3207     0285  2ACA               	goto	i1l107
  3208     0286                     i1l1241:
  3209                           
  3210                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3211                           ; Switch size 1, requested type "simple"
  3212                           ; Number of cases is 1, Range of values is 0 to 0
  3213                           ; switch strategies available:
  3214                           ; Name         Instructions Cycles
  3215                           ; simple_byte            4     3 (average)
  3216                           ; direct_byte            8     6 (fixed)
  3217                           ; jumptable            260     6 (fixed)
  3218                           ;	Chosen strategy is simple_byte
  3219     0286  0020               	movlb	0	; select bank0
  3220     0287  083E               	movf	_currentCommand+8,w
  3221     0288  3A00               	xorlw	0	; case 0
  3222     0289  1903               	skipnz
  3223     028A  2A8C               	goto	i1l1355
  3224     028B  2ACA               	goto	i1l107
  3225     028C                     i1l1355:
  3226                           
  3227                           ; Switch size 1, requested type "simple"
  3228                           ; Number of cases is 20, Range of values is 6 to 25
  3229                           ; switch strategies available:
  3230                           ; Name         Instructions Cycles
  3231                           ; direct_byte           49     9 (fixed)
  3232                           ; simple_byte           61    31 (average)
  3233                           ; jumptable            263     9 (fixed)
  3234                           ;	Chosen strategy is simple_byte
  3235     028C  083D               	movf	_currentCommand+7,w
  3236     028D  3A06               	xorlw	6	; case 6
  3237     028E  1903               	skipnz
  3238     028F  29CB               	goto	i1l1197
  3239     0290  3A01               	xorlw	1	; case 7
  3240     0291  1903               	skipnz
  3241     0292  29D0               	goto	i1l1199
  3242     0293  3A0F               	xorlw	15	; case 8
  3243     0294  1903               	skipnz
  3244     0295  29CB               	goto	i1l1197
  3245     0296  3A01               	xorlw	1	; case 9
  3246     0297  1903               	skipnz
  3247     0298  29E2               	goto	i1l1203
  3248     0299  3A03               	xorlw	3	; case 10
  3249     029A  1903               	skipnz
  3250     029B  29CB               	goto	i1l1197
  3251     029C  3A01               	xorlw	1	; case 11
  3252     029D  1903               	skipnz
  3253     029E  29F4               	goto	i1l1207
  3254     029F  3A07               	xorlw	7	; case 12
  3255     02A0  1903               	skipnz
  3256     02A1  29CB               	goto	i1l1197
  3257     02A2  3A01               	xorlw	1	; case 13
  3258     02A3  1903               	skipnz
  3259     02A4  2A06               	goto	i1l1211
  3260     02A5  3A03               	xorlw	3	; case 14
  3261     02A6  1903               	skipnz
  3262     02A7  29CB               	goto	i1l1197
  3263     02A8  3A01               	xorlw	1	; case 15
  3264     02A9  1903               	skipnz
  3265     02AA  2A18               	goto	i1l1215
  3266     02AB  3A1F               	xorlw	31	; case 16
  3267     02AC  1903               	skipnz
  3268     02AD  29CB               	goto	i1l1197
  3269     02AE  3A01               	xorlw	1	; case 17
  3270     02AF  1903               	skipnz
  3271     02B0  2A2A               	goto	i1l1219
  3272     02B1  3A03               	xorlw	3	; case 18
  3273     02B2  1903               	skipnz
  3274     02B3  29CB               	goto	i1l1197
  3275     02B4  3A01               	xorlw	1	; case 19
  3276     02B5  1903               	skipnz
  3277     02B6  2A3C               	goto	i1l1223
  3278     02B7  3A07               	xorlw	7	; case 20
  3279     02B8  1903               	skipnz
  3280     02B9  29CB               	goto	i1l1197
  3281     02BA  3A01               	xorlw	1	; case 21
  3282     02BB  1903               	skipnz
  3283     02BC  2A4E               	goto	i1l1227
  3284     02BD  3A03               	xorlw	3	; case 22
  3285     02BE  1903               	skipnz
  3286     02BF  29CB               	goto	i1l1197
  3287     02C0  3A01               	xorlw	1	; case 23
  3288     02C1  1903               	skipnz
  3289     02C2  2A60               	goto	i1l1231
  3290     02C3  3A0F               	xorlw	15	; case 24
  3291     02C4  1903               	skipnz
  3292     02C5  29CB               	goto	i1l1197
  3293     02C6  3A01               	xorlw	1	; case 25
  3294     02C7  1903               	skipnz
  3295     02C8  2A72               	goto	i1l1235
  3296     02C9  2ACA               	goto	i1l107
  3297     02CA                     i1l107:
  3298     02CA  0008               	return
  3299     02CB                     __end_of_GetControllerInput:
  3300     007E                     btemp	set	126	;btemp
  3301     007E                     int$flags	set	126
  3302     007E                     wtemp0	set	126
  3303                           
  3304                           	psect	config
  3305                           
  3306                           ;Config register CONFIG1 @ 0x8007
  3307                           ;	External Oscillator mode selection bits
  3308                           ;	FEXTOSC = ECH, EC above 8MHz; PFM set to high power
  3309                           ;	Power-up default value for COSC bits
  3310                           ;	RSTOSC = HFINT32, HFINTOSC with OSCFRQ= 32 MHz and CDIV = 1:1
  3311                           ;	Clock Out Enable bit
  3312                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  3313                           ;	Clock Switch Enable bit
  3314                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3315                           ;	Fail-Safe Clock Monitor Enable bit
  3316                           ;	FCMEN = OFF, FSCM timer disabled
  3317     8007                     	org	32775
  3318     8007  1F8F               	dw	8079
  3319                           
  3320                           ;Config register CONFIG2 @ 0x8008
  3321                           ;	Master Clear Enable bit
  3322                           ;	MCLRE = ON, MCLR pin is Master Clear function
  3323                           ;	Power-up Timer Enable bit
  3324                           ;	PWRTE = OFF, PWRT disabled
  3325                           ;	Low-Power BOR enable bit
  3326                           ;	LPBOREN = OFF, ULPBOR disabled
  3327                           ;	Brown-out reset enable bits
  3328                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  3329                           ;	Brown-out Reset Voltage Selection
  3330                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
  3331                           ;	Zero-cross detect disable
  3332                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
  3333                           ;	Peripheral Pin Select one-way control
  3334                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  3335                           ;	Stack Overflow/Underflow Reset Enable bit
  3336                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  3337                           ;	Background Debugger
  3338                           ;	DEBUG = 0x1, unprogrammed default
  3339     8008                     	org	32776
  3340     8008  3FFF               	dw	16383
  3341                           
  3342                           ;Config register CONFIG3 @ 0x8009
  3343                           ;	WDT Period Select bits
  3344                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3345                           ;	WDT operating mode
  3346                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  3347                           ;	WDT Window Select bits
  3348                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3349                           ;	WDT input clock selector
  3350                           ;	WDTCCS = SC, Software Control
  3351     8009                     	org	32777
  3352     8009  3F9F               	dw	16287
  3353                           
  3354                           ;Config register CONFIG4 @ 0x800A
  3355                           ;	UserNVM self-write protection bits
  3356                           ;	WRT = OFF, Write protection off
  3357                           ;	Scanner Enable bit
  3358                           ;	SCANE = available, Scanner module is available for use
  3359                           ;	Low Voltage Programming Enable bit
  3360                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
  3361     800A                     	org	32778
  3362     800A  3FFF               	dw	16383
  3363                           
  3364                           ;Config register CONFIG5 @ 0x800B
  3365                           ;	UserNVM Program memory code protection bit
  3366                           ;	CP = OFF, Program Memory code protection disabled
  3367                           ;	DataNVM code protection bit
  3368                           ;	CPD = OFF, Data EEPROM code protection disabled
  3369     800B                     	org	32779
  3370     800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    2
    Data        71
    BSS         78
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80      3      75
    BANK1            80      0      73
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 

    currentCommand$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 

    S34command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myFunction in COMMON

    _myFunction->_GetControllerInput

Critical Paths under _main in BANK0

    _main->_drive
    _drive->_CreateMoveBackwardCommmand
    _drive->_CreateMoveForwardCommmand
    _drive->_CreateTurnLeftCommmand
    _drive->_CreateTurnRightCommmand

Critical Paths under _myFunction in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myFunction in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myFunction in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myFunction in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myFunction in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myFunction in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myFunction in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myFunction in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myFunction in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myFunction in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myFunction in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myFunction in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myFunction in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     569
              _CreateControlsCommand
                              _drive
 ---------------------------------------------------------------------------------
 (1) _drive                                                3     3      0     569
                                              2 BANK0      1     1      0
                        _CreateBreak
              _CreateControlsCommand
         _CreateMoveBackwardCommmand
          _CreateMoveForwardCommmand
             _CreateTurnLeftCommmand
            _CreateTurnRightCommmand
 ---------------------------------------------------------------------------------
 (2) _CreateTurnRightCommmand                              2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateTurnLeftCommmand                               2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveForwardCommmand                            2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveBackwardCommmand                           2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateControlsCommand                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateBreak                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myFunction                                           4     4      0     539
                                              5 COMMON     4     4      0
                 _GetControllerInput
 ---------------------------------------------------------------------------------
 (4) _GetControllerInput                                   5     3      2     516
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CreateControlsCommand
   _drive
     _CreateBreak
     _CreateControlsCommand
     _CreateMoveBackwardCommmand
     _CreateMoveForwardCommmand
     _CreateTurnLeftCommmand
     _CreateTurnRightCommmand

 _myFunction (ROOT)
   _GetControllerInput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Mar 27 15:01:14 2024

                                l90 0305                                  l92 0311  
                                l94 031D                                  l96 0329  
                               l142 01C0                                 l151 03A2  
                               l160 0412                                 l145 03DC  
                               l154 03C1                                 l148 03F7  
                               l157 0429                                 u300 00C3  
                               u301 00C2                                 u310 00D1  
                               u311 00D0                                 u400 016A  
                               u320 00DF                                 u401 0169  
                               u321 00DE                                 u305 00BF  
                               u410 0178                                 u330 00F6  
                               u411 0177                                 u331 00F5  
                               u315 00CD                                 u420 018F  
                               u340 0104                                 u500 0327  
                               u421 018E                                 u405 0166  
                               u341 0103                                 u325 00DB  
                               u501 0326                                 u430 019D  
                               u350 0112                                 u510 032F  
                               u431 019C                                 u415 0174  
                               u351 0111                                 u335 00F2  
                               u511 032E                                 u440 01AB  
                               u360 0129                                 u520 0335  
                               u441 01AA                                 u425 018B  
                               u361 0128                                 u345 0100  
                               u521 0334                                 u450 01B9  
                               u370 0137                                 u451 01B8  
                               u435 0199                                 u371 0136  
                               u355 010E                                 u380 0145  
                               u445 01A7                                 u381 0144  
                               u365 0125                                 u390 015C  
                               u470 0303                                 u455 01B5  
                               u391 015B                                 u375 0133  
                               u471 0302                                 u480 030F  
                               u385 0141                                 u481 030E  
                               u490 031B                                 u395 0158  
                               u491 031A       __end_of_CreateControlsCommand 0413  
                               wreg 0009          ?_CreateMoveForwardCommmand 0068  
                      _BAUD1CONbits 011F                                l1101 03E4  
                              l1111 0384                                l1103 03EF  
                              l1121 039D                                l1113 0389  
                              l1105 03F1                                l1131 03B5  
                              l1123 03A0                                l1115 038B  
                              l1107 03F3                                l1141 0418  
                              l1133 03B8                                l1125 03A3  
                              l1117 0396                                l1109 03F5  
                              l1301 0339                                l1143 041A  
                              l1071 0401                                l1135 03BC  
                              l1127 03A8                                l1119 0399  
                              l1151 00C3                                l1145 0425  
                              l1081 0410                                l1073 0403  
                              l1137 03BF                                l1129 03AA  
                              l1161 0104                                l1153 00D1  
                              l1147 0427                                l1139 0413  
                              l1075 0407                                l1091 03D6  
                              l1083 03C2                                l1171 0145  
                              l1163 0112                                l1155 00DF  
                              l1251 02DE                                l1077 0409  
                              l1069 03F8                                l1093 03D8  
                              l1085 03C7                                l1181 0181  
                              l1173 014E                                l1165 011B  
                              l1157 00E8                                l1149 00B5  
                              l1261 02EC                                l1253 02E0  
                              l1079 040F                                l1095 03DA  
                              l1087 03C9                                l1183 018F  
                              l1191 01BD                                l1175 015C  
                              l1167 0129                                l1159 00F6  
                              l1271 02F4                                l1263 02EF  
                              l1255 02E5                                l1247 02CB  
                              l1097 03DD                                l1089 03D4  
                              l1185 019D                                l1177 016A  
                              l1169 0137                                l1281 0303  
                              l1273 02F5                                l1265 02F1  
                              l1257 02E7                                l1249 02DB  
                              l1099 03E2                                l1187 01AB  
                              l1179 0178                                l1291 031E  
                              l1283 0306                                l1275 02F6  
                              l1267 02F2                                l1259 02E9  
                              l1189 01B9                                l1293 0327  
                              l1285 030F                                l1277 02F8  
                              l1269 02F3                                l1295 032A  
                              l1287 0312                                l1279 02F9  
                              l1297 032F                                l1289 031B  
                              l1299 0335                 __end_of_CreateBreak 042A  
                              _main 02CB                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                              start 007D           CreateTurnLeftCommmand@pwm 0068  
                             ?_main 0070                               i1l107 02CA  
                             i1l173 007B                               i1l165 0041  
                             _RCREG 0119                               u53_20 000B  
                             u53_21 000A                               u46_20 01CA  
                             u54_20 001A                               u46_21 01C9  
                             u54_21 0019                               u55_20 0036  
                             u55_21 0035                               u55_25 0032  
                             u56_20 0045                               u56_21 0044  
                             u57_20 0054                               u57_21 0053  
                             u57_25 0050                               u58_20 0064  
                             u58_21 0063                               u58_25 0060  
                _GetControllerInput 01C1                               _Break 00A7  
 __end_of_CreateMoveForwardCommmand 03A3           ??_CreateTurnRightCommmand 006A  
                             _drive 00B5                 ?_GetControllerInput 0070  
                             status 0003                               wtemp0 007E  
                   __initialization 007F                        __end_of_main 033F  
               _MoveBackwardCommand 00B1                ??_GetControllerInput 0072  
                            ??_main 006B                         _CreateBreak 0413  
                            ?_drive 0070                              i1l1211 0206  
                            i1l1203 01E2                              i1l1231 0260  
                            i1l1223 023C                              i1l1215 0218  
                            i1l1207 01F4                              i1l1311 0021  
                            i1l1303 0006                              i1l1241 0286  
                            i1l1321 0045                              i1l1313 0028  
                            i1l1305 000B                              i1l1235 0272  
                            i1l1227 024E                              i1l1219 022A  
                            i1l1331 0072                              i1l1323 0054  
                            i1l1315 0036                              i1l1307 0013  
                            _RC5PPS 0F25                              i1l1237 0283  
                            i1l1333 0079                              i1l1325 0056  
                            i1l1317 0039                              i1l1309 001A  
                            i1l1327 0064                              i1l1319 003E  
                            i1l1193 01C1                              i1l1329 0068  
                            i1l1355 028C                              i1l1197 01CB  
                            i1l1199 01D0              _CreateTurnLeftCommmand 03DD  
                      __pdataCOMMON 007B             __end_of__initialization 00B1  
                    __pcstackCOMMON 0070                        __pidataBANK0 0364  
                      __pidataBANK1 033F                       __end_of_drive 01C1  
                  _TurnRightCommand 004E         ??_CreateMoveForwardCommmand 006A  
                           ??_drive 006A                          __pbssBANK0 0020  
                        __pbssBANK1 00C5               __end_of_CONTROL_INPUT 043A  
                        __pmaintext 02CB                          __pintentry 0004  
        CreateTurnRightCommmand@pwm 0068               _CreateControlsCommand 03F8  
                           _Command 00DB       CreateMoveBackwardCommmand@pwm 0068  
         _CreateMoveForwardCommmand 0384                             __ptext1 00B5  
                           __ptext2 03C2                             __ptext3 03DD  
                           __ptext4 0384                             __ptext5 03A3  
                           __ptext6 03F8                             __ptext7 0413  
                           __ptext9 01C1        ??_CreateMoveBackwardCommmand 006A  
                        _myFunction 0004                          _inputStage 0046  
                      ?_CreateBreak 0070                             clrloop0 0431  
              end_of_initialization 00B1                             init_ram 042A  
                           initloop 042B             ?_CreateTurnLeftCommmand 0068  
                   myFunction@input 0077            ?_CreateTurnRightCommmand 0068  
            ?_CreateControlsCommand 0070                           _TRISAbits 0011  
                         _TRISCbits 0013                     _TurnLeftCommand 0058  
                         _RXPPSbits 0ECB      __end_of_CreateTurnLeftCommmand 03F8  
                     __pidataCOMMON 0436                         ?_myFunction 0070  
               start_initialization 007F                      _CONTROL_OUTPUT 007B  
                    _currentCommand 0036                         __pdataBANK0 0048  
                       __pdataBANK1 00A0     __end_of_CreateTurnRightCommmand 03DD  
                _MoveForwardCommand 00BB  __end_of_CreateMoveBackwardCommmand 03C2  
        _CreateMoveBackwardCommmand 03A3             _EnableLaserScopeCommand 00A0  
                       __pbssCOMMON 0079                           ___latbits 0002  
                     __pcstackBANK0 0068                        _currentInput 0079  
           GetControllerInput@input 0070                           _commandIt 0044  
                          _LATAbits 0016                           clear_ram0 0430  
                          _PIE3bits 0719                            _PIR3bits 070F  
           ??_CreateControlsCommand 0068                            _Controls 00C5  
                     _CONTROL_INPUT 0438          __end_of_GetControllerInput 02CB  
      CreateMoveForwardCommmand@pwm 0068                         _SP1BRGLbits 011B  
                        _ANSELAbits 0F38                          _ANSELCbits 0F4E  
                      ??_myFunction 0075                            _controls 0020  
                        _RC1STAbits 011D                  __end_of_myFunction 007D  
                          int$flags 007E         ?_CreateMoveBackwardCommmand 0068  
                        _INTCONbits 000B                            intlevel1 0000  
                _GetUserDataCommand 0062                       __pstringtext1 0438  
                        _TX1REGbits 011A                       ??_CreateBreak 0068  
          ??_CreateTurnLeftCommmand 006A                          _TX1STAbits 011E  
           _CreateTurnRightCommmand 03C2                          _SWITCH_MID 0048  
                        _SWITCH_MAX 004C                          _SWITCH_MIN 004A  



Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Sun Mar 31 15:03:05 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F18855
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	intentry,global,class=CODE,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    59                           	dabs	1,0x7E,2
    60     0000                     
    61                           ; Generated 21/06/2023 GMT
    62                           ; 
    63                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution. Publication is not required when
    77                           ;        this file is used in an embedded application.
    78                           ; 
    79                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    80                           ;        software without specific prior written permission.
    81                           ; 
    82                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    83                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    84                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    85                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    86                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    87                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    88                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    89                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    90                           ; 
    91                           ; 
    92                           ; Code-generator required, PIC16F18855 Definitions
    93                           ; 
    94                           ; SFR Addresses
    95     0000                     	;# 
    96     0001                     	;# 
    97     0002                     	;# 
    98     0003                     	;# 
    99     0004                     	;# 
   100     0005                     	;# 
   101     0006                     	;# 
   102     0007                     	;# 
   103     0008                     	;# 
   104     0009                     	;# 
   105     000A                     	;# 
   106     000B                     	;# 
   107     000C                     	;# 
   108     000D                     	;# 
   109     000E                     	;# 
   110     0010                     	;# 
   111     0011                     	;# 
   112     0012                     	;# 
   113     0013                     	;# 
   114     0016                     	;# 
   115     0017                     	;# 
   116     0018                     	;# 
   117     001C                     	;# 
   118     001C                     	;# 
   119     001D                     	;# 
   120     001D                     	;# 
   121     001E                     	;# 
   122     001F                     	;# 
   123     008C                     	;# 
   124     008C                     	;# 
   125     008D                     	;# 
   126     008E                     	;# 
   127     008E                     	;# 
   128     008F                     	;# 
   129     0090                     	;# 
   130     0090                     	;# 
   131     0091                     	;# 
   132     0093                     	;# 
   133     0094                     	;# 
   134     0095                     	;# 
   135     0096                     	;# 
   136     0097                     	;# 
   137     0098                     	;# 
   138     0099                     	;# 
   139     009A                     	;# 
   140     009B                     	;# 
   141     009C                     	;# 
   142     009D                     	;# 
   143     009E                     	;# 
   144     010C                     	;# 
   145     010D                     	;# 
   146     010E                     	;# 
   147     010E                     	;# 
   148     010F                     	;# 
   149     0110                     	;# 
   150     0110                     	;# 
   151     0111                     	;# 
   152     0112                     	;# 
   153     0112                     	;# 
   154     0113                     	;# 
   155     0114                     	;# 
   156     0114                     	;# 
   157     0115                     	;# 
   158     0116                     	;# 
   159     0116                     	;# 
   160     0117                     	;# 
   161     0119                     	;# 
   162     0119                     	;# 
   163     0119                     	;# 
   164     011A                     	;# 
   165     011A                     	;# 
   166     011A                     	;# 
   167     011B                     	;# 
   168     011B                     	;# 
   169     011B                     	;# 
   170     011B                     	;# 
   171     011B                     	;# 
   172     011C                     	;# 
   173     011C                     	;# 
   174     011C                     	;# 
   175     011D                     	;# 
   176     011D                     	;# 
   177     011D                     	;# 
   178     011E                     	;# 
   179     011E                     	;# 
   180     011E                     	;# 
   181     011F                     	;# 
   182     011F                     	;# 
   183     011F                     	;# 
   184     011F                     	;# 
   185     011F                     	;# 
   186     018C                     	;# 
   187     018D                     	;# 
   188     018E                     	;# 
   189     018F                     	;# 
   190     0190                     	;# 
   191     0191                     	;# 
   192     0192                     	;# 
   193     0196                     	;# 
   194     0197                     	;# 
   195     0198                     	;# 
   196     0199                     	;# 
   197     019A                     	;# 
   198     019B                     	;# 
   199     019C                     	;# 
   200     020C                     	;# 
   201     020C                     	;# 
   202     020D                     	;# 
   203     020E                     	;# 
   204     020F                     	;# 
   205     020F                     	;# 
   206     0210                     	;# 
   207     0210                     	;# 
   208     0211                     	;# 
   209     0211                     	;# 
   210     0212                     	;# 
   211     0212                     	;# 
   212     0213                     	;# 
   213     0214                     	;# 
   214     0215                     	;# 
   215     0215                     	;# 
   216     0216                     	;# 
   217     0216                     	;# 
   218     0217                     	;# 
   219     0217                     	;# 
   220     0218                     	;# 
   221     0218                     	;# 
   222     0219                     	;# 
   223     021A                     	;# 
   224     021B                     	;# 
   225     021B                     	;# 
   226     021C                     	;# 
   227     021C                     	;# 
   228     021D                     	;# 
   229     021D                     	;# 
   230     021E                     	;# 
   231     021F                     	;# 
   232     028C                     	;# 
   233     028C                     	;# 
   234     028D                     	;# 
   235     028D                     	;# 
   236     028E                     	;# 
   237     028F                     	;# 
   238     0290                     	;# 
   239     0290                     	;# 
   240     0291                     	;# 
   241     0292                     	;# 
   242     0292                     	;# 
   243     0293                     	;# 
   244     0293                     	;# 
   245     0294                     	;# 
   246     0295                     	;# 
   247     0296                     	;# 
   248     0296                     	;# 
   249     0297                     	;# 
   250     0298                     	;# 
   251     0298                     	;# 
   252     0299                     	;# 
   253     0299                     	;# 
   254     029A                     	;# 
   255     029B                     	;# 
   256     029C                     	;# 
   257     029C                     	;# 
   258     029D                     	;# 
   259     030C                     	;# 
   260     030C                     	;# 
   261     030D                     	;# 
   262     030E                     	;# 
   263     030F                     	;# 
   264     0310                     	;# 
   265     0310                     	;# 
   266     0311                     	;# 
   267     0312                     	;# 
   268     0313                     	;# 
   269     0314                     	;# 
   270     0314                     	;# 
   271     0315                     	;# 
   272     0316                     	;# 
   273     0317                     	;# 
   274     0318                     	;# 
   275     0318                     	;# 
   276     0319                     	;# 
   277     031A                     	;# 
   278     031B                     	;# 
   279     031C                     	;# 
   280     031C                     	;# 
   281     031D                     	;# 
   282     031E                     	;# 
   283     031F                     	;# 
   284     038C                     	;# 
   285     038C                     	;# 
   286     038D                     	;# 
   287     038E                     	;# 
   288     0390                     	;# 
   289     0390                     	;# 
   290     0391                     	;# 
   291     0392                     	;# 
   292     040C                     	;# 
   293     040D                     	;# 
   294     040E                     	;# 
   295     040F                     	;# 
   296     0410                     	;# 
   297     0411                     	;# 
   298     0416                     	;# 
   299     0416                     	;# 
   300     0417                     	;# 
   301     0418                     	;# 
   302     0418                     	;# 
   303     0419                     	;# 
   304     041A                     	;# 
   305     041A                     	;# 
   306     041B                     	;# 
   307     041C                     	;# 
   308     041C                     	;# 
   309     041D                     	;# 
   310     041E                     	;# 
   311     041F                     	;# 
   312     048C                     	;# 
   313     048C                     	;# 
   314     048D                     	;# 
   315     048E                     	;# 
   316     048F                     	;# 
   317     048F                     	;# 
   318     0490                     	;# 
   319     0491                     	;# 
   320     0492                     	;# 
   321     0492                     	;# 
   322     0493                     	;# 
   323     0494                     	;# 
   324     0495                     	;# 
   325     0495                     	;# 
   326     0496                     	;# 
   327     0497                     	;# 
   328     0498                     	;# 
   329     0499                     	;# 
   330     049A                     	;# 
   331     049B                     	;# 
   332     049C                     	;# 
   333     049D                     	;# 
   334     050C                     	;# 
   335     050C                     	;# 
   336     050D                     	;# 
   337     050E                     	;# 
   338     050F                     	;# 
   339     050F                     	;# 
   340     0510                     	;# 
   341     0511                     	;# 
   342     0512                     	;# 
   343     0512                     	;# 
   344     0513                     	;# 
   345     0514                     	;# 
   346     0515                     	;# 
   347     0515                     	;# 
   348     0516                     	;# 
   349     0517                     	;# 
   350     0518                     	;# 
   351     0519                     	;# 
   352     051A                     	;# 
   353     051B                     	;# 
   354     051C                     	;# 
   355     051D                     	;# 
   356     058C                     	;# 
   357     058C                     	;# 
   358     058D                     	;# 
   359     058E                     	;# 
   360     058F                     	;# 
   361     058F                     	;# 
   362     0590                     	;# 
   363     0591                     	;# 
   364     0592                     	;# 
   365     0593                     	;# 
   366     060C                     	;# 
   367     060D                     	;# 
   368     060E                     	;# 
   369     060F                     	;# 
   370     0610                     	;# 
   371     0611                     	;# 
   372     0612                     	;# 
   373     0613                     	;# 
   374     0614                     	;# 
   375     0616                     	;# 
   376     0617                     	;# 
   377     0618                     	;# 
   378     0619                     	;# 
   379     061A                     	;# 
   380     061B                     	;# 
   381     061C                     	;# 
   382     061D                     	;# 
   383     061E                     	;# 
   384     068C                     	;# 
   385     068D                     	;# 
   386     068E                     	;# 
   387     068F                     	;# 
   388     0690                     	;# 
   389     0691                     	;# 
   390     0692                     	;# 
   391     0693                     	;# 
   392     0694                     	;# 
   393     070C                     	;# 
   394     070D                     	;# 
   395     070E                     	;# 
   396     070F                     	;# 
   397     0710                     	;# 
   398     0711                     	;# 
   399     0712                     	;# 
   400     0713                     	;# 
   401     0714                     	;# 
   402     0716                     	;# 
   403     0717                     	;# 
   404     0718                     	;# 
   405     0719                     	;# 
   406     071A                     	;# 
   407     071B                     	;# 
   408     071C                     	;# 
   409     071D                     	;# 
   410     071E                     	;# 
   411     0796                     	;# 
   412     0797                     	;# 
   413     0798                     	;# 
   414     0799                     	;# 
   415     079A                     	;# 
   416     079B                     	;# 
   417     080C                     	;# 
   418     080D                     	;# 
   419     080E                     	;# 
   420     080F                     	;# 
   421     0810                     	;# 
   422     0811                     	;# 
   423     0812                     	;# 
   424     0813                     	;# 
   425     0814                     	;# 
   426     081A                     	;# 
   427     081B                     	;# 
   428     081C                     	;# 
   429     081D                     	;# 
   430     081E                     	;# 
   431     081F                     	;# 
   432     088C                     	;# 
   433     088D                     	;# 
   434     088E                     	;# 
   435     088F                     	;# 
   436     0890                     	;# 
   437     0891                     	;# 
   438     0892                     	;# 
   439     0893                     	;# 
   440     0895                     	;# 
   441     0896                     	;# 
   442     0897                     	;# 
   443     0898                     	;# 
   444     0899                     	;# 
   445     089A                     	;# 
   446     089B                     	;# 
   447     090C                     	;# 
   448     090E                     	;# 
   449     090F                     	;# 
   450     091F                     	;# 
   451     091F                     	;# 
   452     098F                     	;# 
   453     098F                     	;# 
   454     0990                     	;# 
   455     0991                     	;# 
   456     0992                     	;# 
   457     0993                     	;# 
   458     0994                     	;# 
   459     0995                     	;# 
   460     0996                     	;# 
   461     0997                     	;# 
   462     0E0F                     	;# 
   463     0E10                     	;# 
   464     0E11                     	;# 
   465     0E12                     	;# 
   466     0E13                     	;# 
   467     0E14                     	;# 
   468     0E15                     	;# 
   469     0E16                     	;# 
   470     0E17                     	;# 
   471     0E18                     	;# 
   472     0E19                     	;# 
   473     0E1A                     	;# 
   474     0E1B                     	;# 
   475     0E1C                     	;# 
   476     0E1D                     	;# 
   477     0E1E                     	;# 
   478     0E1F                     	;# 
   479     0E20                     	;# 
   480     0E21                     	;# 
   481     0E22                     	;# 
   482     0E23                     	;# 
   483     0E24                     	;# 
   484     0E25                     	;# 
   485     0E26                     	;# 
   486     0E27                     	;# 
   487     0E28                     	;# 
   488     0E29                     	;# 
   489     0E2A                     	;# 
   490     0E2B                     	;# 
   491     0E2C                     	;# 
   492     0E2D                     	;# 
   493     0E2E                     	;# 
   494     0E2F                     	;# 
   495     0E30                     	;# 
   496     0E31                     	;# 
   497     0E32                     	;# 
   498     0E33                     	;# 
   499     0E34                     	;# 
   500     0E35                     	;# 
   501     0E36                     	;# 
   502     0E37                     	;# 
   503     0E8F                     	;# 
   504     0E90                     	;# 
   505     0E91                     	;# 
   506     0E92                     	;# 
   507     0E93                     	;# 
   508     0E94                     	;# 
   509     0E95                     	;# 
   510     0E96                     	;# 
   511     0E97                     	;# 
   512     0E9C                     	;# 
   513     0E9D                     	;# 
   514     0E9E                     	;# 
   515     0EA1                     	;# 
   516     0EA2                     	;# 
   517     0EA3                     	;# 
   518     0EA4                     	;# 
   519     0EA5                     	;# 
   520     0EA9                     	;# 
   521     0EAA                     	;# 
   522     0EAB                     	;# 
   523     0EAC                     	;# 
   524     0EB1                     	;# 
   525     0EB2                     	;# 
   526     0EB3                     	;# 
   527     0EB8                     	;# 
   528     0EB9                     	;# 
   529     0EBA                     	;# 
   530     0EBB                     	;# 
   531     0EBC                     	;# 
   532     0EBD                     	;# 
   533     0EBE                     	;# 
   534     0EC3                     	;# 
   535     0EC5                     	;# 
   536     0EC6                     	;# 
   537     0EC7                     	;# 
   538     0EC8                     	;# 
   539     0EC9                     	;# 
   540     0ECA                     	;# 
   541     0ECB                     	;# 
   542     0ECC                     	;# 
   543     0F10                     	;# 
   544     0F11                     	;# 
   545     0F12                     	;# 
   546     0F13                     	;# 
   547     0F14                     	;# 
   548     0F15                     	;# 
   549     0F16                     	;# 
   550     0F17                     	;# 
   551     0F18                     	;# 
   552     0F19                     	;# 
   553     0F1A                     	;# 
   554     0F1B                     	;# 
   555     0F1C                     	;# 
   556     0F1D                     	;# 
   557     0F1E                     	;# 
   558     0F1F                     	;# 
   559     0F20                     	;# 
   560     0F21                     	;# 
   561     0F22                     	;# 
   562     0F23                     	;# 
   563     0F24                     	;# 
   564     0F25                     	;# 
   565     0F26                     	;# 
   566     0F27                     	;# 
   567     0F38                     	;# 
   568     0F39                     	;# 
   569     0F3A                     	;# 
   570     0F3B                     	;# 
   571     0F3C                     	;# 
   572     0F3D                     	;# 
   573     0F3E                     	;# 
   574     0F3F                     	;# 
   575     0F40                     	;# 
   576     0F41                     	;# 
   577     0F43                     	;# 
   578     0F44                     	;# 
   579     0F45                     	;# 
   580     0F46                     	;# 
   581     0F47                     	;# 
   582     0F48                     	;# 
   583     0F49                     	;# 
   584     0F4A                     	;# 
   585     0F4B                     	;# 
   586     0F4C                     	;# 
   587     0F4E                     	;# 
   588     0F4F                     	;# 
   589     0F50                     	;# 
   590     0F51                     	;# 
   591     0F52                     	;# 
   592     0F53                     	;# 
   593     0F54                     	;# 
   594     0F55                     	;# 
   595     0F56                     	;# 
   596     0F57                     	;# 
   597     0F65                     	;# 
   598     0F68                     	;# 
   599     0F69                     	;# 
   600     0F6A                     	;# 
   601     0F6B                     	;# 
   602     0FE4                     	;# 
   603     0FE5                     	;# 
   604     0FE6                     	;# 
   605     0FE7                     	;# 
   606     0FE8                     	;# 
   607     0FE9                     	;# 
   608     0FEA                     	;# 
   609     0FEB                     	;# 
   610     0FED                     	;# 
   611     0FEE                     	;# 
   612     0FEF                     	;# 
   613     0000                     	;# 
   614     0001                     	;# 
   615     0002                     	;# 
   616     0003                     	;# 
   617     0004                     	;# 
   618     0005                     	;# 
   619     0006                     	;# 
   620     0007                     	;# 
   621     0008                     	;# 
   622     0009                     	;# 
   623     000A                     	;# 
   624     000B                     	;# 
   625     000C                     	;# 
   626     000D                     	;# 
   627     000E                     	;# 
   628     0010                     	;# 
   629     0011                     	;# 
   630     0012                     	;# 
   631     0013                     	;# 
   632     0016                     	;# 
   633     0017                     	;# 
   634     0018                     	;# 
   635     001C                     	;# 
   636     001C                     	;# 
   637     001D                     	;# 
   638     001D                     	;# 
   639     001E                     	;# 
   640     001F                     	;# 
   641     008C                     	;# 
   642     008C                     	;# 
   643     008D                     	;# 
   644     008E                     	;# 
   645     008E                     	;# 
   646     008F                     	;# 
   647     0090                     	;# 
   648     0090                     	;# 
   649     0091                     	;# 
   650     0093                     	;# 
   651     0094                     	;# 
   652     0095                     	;# 
   653     0096                     	;# 
   654     0097                     	;# 
   655     0098                     	;# 
   656     0099                     	;# 
   657     009A                     	;# 
   658     009B                     	;# 
   659     009C                     	;# 
   660     009D                     	;# 
   661     009E                     	;# 
   662     010C                     	;# 
   663     010D                     	;# 
   664     010E                     	;# 
   665     010E                     	;# 
   666     010F                     	;# 
   667     0110                     	;# 
   668     0110                     	;# 
   669     0111                     	;# 
   670     0112                     	;# 
   671     0112                     	;# 
   672     0113                     	;# 
   673     0114                     	;# 
   674     0114                     	;# 
   675     0115                     	;# 
   676     0116                     	;# 
   677     0116                     	;# 
   678     0117                     	;# 
   679     0119                     	;# 
   680     0119                     	;# 
   681     0119                     	;# 
   682     011A                     	;# 
   683     011A                     	;# 
   684     011A                     	;# 
   685     011B                     	;# 
   686     011B                     	;# 
   687     011B                     	;# 
   688     011B                     	;# 
   689     011B                     	;# 
   690     011C                     	;# 
   691     011C                     	;# 
   692     011C                     	;# 
   693     011D                     	;# 
   694     011D                     	;# 
   695     011D                     	;# 
   696     011E                     	;# 
   697     011E                     	;# 
   698     011E                     	;# 
   699     011F                     	;# 
   700     011F                     	;# 
   701     011F                     	;# 
   702     011F                     	;# 
   703     011F                     	;# 
   704     018C                     	;# 
   705     018D                     	;# 
   706     018E                     	;# 
   707     018F                     	;# 
   708     0190                     	;# 
   709     0191                     	;# 
   710     0192                     	;# 
   711     0196                     	;# 
   712     0197                     	;# 
   713     0198                     	;# 
   714     0199                     	;# 
   715     019A                     	;# 
   716     019B                     	;# 
   717     019C                     	;# 
   718     020C                     	;# 
   719     020C                     	;# 
   720     020D                     	;# 
   721     020E                     	;# 
   722     020F                     	;# 
   723     020F                     	;# 
   724     0210                     	;# 
   725     0210                     	;# 
   726     0211                     	;# 
   727     0211                     	;# 
   728     0212                     	;# 
   729     0212                     	;# 
   730     0213                     	;# 
   731     0214                     	;# 
   732     0215                     	;# 
   733     0215                     	;# 
   734     0216                     	;# 
   735     0216                     	;# 
   736     0217                     	;# 
   737     0217                     	;# 
   738     0218                     	;# 
   739     0218                     	;# 
   740     0219                     	;# 
   741     021A                     	;# 
   742     021B                     	;# 
   743     021B                     	;# 
   744     021C                     	;# 
   745     021C                     	;# 
   746     021D                     	;# 
   747     021D                     	;# 
   748     021E                     	;# 
   749     021F                     	;# 
   750     028C                     	;# 
   751     028C                     	;# 
   752     028D                     	;# 
   753     028D                     	;# 
   754     028E                     	;# 
   755     028F                     	;# 
   756     0290                     	;# 
   757     0290                     	;# 
   758     0291                     	;# 
   759     0292                     	;# 
   760     0292                     	;# 
   761     0293                     	;# 
   762     0293                     	;# 
   763     0294                     	;# 
   764     0295                     	;# 
   765     0296                     	;# 
   766     0296                     	;# 
   767     0297                     	;# 
   768     0298                     	;# 
   769     0298                     	;# 
   770     0299                     	;# 
   771     0299                     	;# 
   772     029A                     	;# 
   773     029B                     	;# 
   774     029C                     	;# 
   775     029C                     	;# 
   776     029D                     	;# 
   777     030C                     	;# 
   778     030C                     	;# 
   779     030D                     	;# 
   780     030E                     	;# 
   781     030F                     	;# 
   782     0310                     	;# 
   783     0310                     	;# 
   784     0311                     	;# 
   785     0312                     	;# 
   786     0313                     	;# 
   787     0314                     	;# 
   788     0314                     	;# 
   789     0315                     	;# 
   790     0316                     	;# 
   791     0317                     	;# 
   792     0318                     	;# 
   793     0318                     	;# 
   794     0319                     	;# 
   795     031A                     	;# 
   796     031B                     	;# 
   797     031C                     	;# 
   798     031C                     	;# 
   799     031D                     	;# 
   800     031E                     	;# 
   801     031F                     	;# 
   802     038C                     	;# 
   803     038C                     	;# 
   804     038D                     	;# 
   805     038E                     	;# 
   806     0390                     	;# 
   807     0390                     	;# 
   808     0391                     	;# 
   809     0392                     	;# 
   810     040C                     	;# 
   811     040D                     	;# 
   812     040E                     	;# 
   813     040F                     	;# 
   814     0410                     	;# 
   815     0411                     	;# 
   816     0416                     	;# 
   817     0416                     	;# 
   818     0417                     	;# 
   819     0418                     	;# 
   820     0418                     	;# 
   821     0419                     	;# 
   822     041A                     	;# 
   823     041A                     	;# 
   824     041B                     	;# 
   825     041C                     	;# 
   826     041C                     	;# 
   827     041D                     	;# 
   828     041E                     	;# 
   829     041F                     	;# 
   830     048C                     	;# 
   831     048C                     	;# 
   832     048D                     	;# 
   833     048E                     	;# 
   834     048F                     	;# 
   835     048F                     	;# 
   836     0490                     	;# 
   837     0491                     	;# 
   838     0492                     	;# 
   839     0492                     	;# 
   840     0493                     	;# 
   841     0494                     	;# 
   842     0495                     	;# 
   843     0495                     	;# 
   844     0496                     	;# 
   845     0497                     	;# 
   846     0498                     	;# 
   847     0499                     	;# 
   848     049A                     	;# 
   849     049B                     	;# 
   850     049C                     	;# 
   851     049D                     	;# 
   852     050C                     	;# 
   853     050C                     	;# 
   854     050D                     	;# 
   855     050E                     	;# 
   856     050F                     	;# 
   857     050F                     	;# 
   858     0510                     	;# 
   859     0511                     	;# 
   860     0512                     	;# 
   861     0512                     	;# 
   862     0513                     	;# 
   863     0514                     	;# 
   864     0515                     	;# 
   865     0515                     	;# 
   866     0516                     	;# 
   867     0517                     	;# 
   868     0518                     	;# 
   869     0519                     	;# 
   870     051A                     	;# 
   871     051B                     	;# 
   872     051C                     	;# 
   873     051D                     	;# 
   874     058C                     	;# 
   875     058C                     	;# 
   876     058D                     	;# 
   877     058E                     	;# 
   878     058F                     	;# 
   879     058F                     	;# 
   880     0590                     	;# 
   881     0591                     	;# 
   882     0592                     	;# 
   883     0593                     	;# 
   884     060C                     	;# 
   885     060D                     	;# 
   886     060E                     	;# 
   887     060F                     	;# 
   888     0610                     	;# 
   889     0611                     	;# 
   890     0612                     	;# 
   891     0613                     	;# 
   892     0614                     	;# 
   893     0616                     	;# 
   894     0617                     	;# 
   895     0618                     	;# 
   896     0619                     	;# 
   897     061A                     	;# 
   898     061B                     	;# 
   899     061C                     	;# 
   900     061D                     	;# 
   901     061E                     	;# 
   902     068C                     	;# 
   903     068D                     	;# 
   904     068E                     	;# 
   905     068F                     	;# 
   906     0690                     	;# 
   907     0691                     	;# 
   908     0692                     	;# 
   909     0693                     	;# 
   910     0694                     	;# 
   911     070C                     	;# 
   912     070D                     	;# 
   913     070E                     	;# 
   914     070F                     	;# 
   915     0710                     	;# 
   916     0711                     	;# 
   917     0712                     	;# 
   918     0713                     	;# 
   919     0714                     	;# 
   920     0716                     	;# 
   921     0717                     	;# 
   922     0718                     	;# 
   923     0719                     	;# 
   924     071A                     	;# 
   925     071B                     	;# 
   926     071C                     	;# 
   927     071D                     	;# 
   928     071E                     	;# 
   929     0796                     	;# 
   930     0797                     	;# 
   931     0798                     	;# 
   932     0799                     	;# 
   933     079A                     	;# 
   934     079B                     	;# 
   935     080C                     	;# 
   936     080D                     	;# 
   937     080E                     	;# 
   938     080F                     	;# 
   939     0810                     	;# 
   940     0811                     	;# 
   941     0812                     	;# 
   942     0813                     	;# 
   943     0814                     	;# 
   944     081A                     	;# 
   945     081B                     	;# 
   946     081C                     	;# 
   947     081D                     	;# 
   948     081E                     	;# 
   949     081F                     	;# 
   950     088C                     	;# 
   951     088D                     	;# 
   952     088E                     	;# 
   953     088F                     	;# 
   954     0890                     	;# 
   955     0891                     	;# 
   956     0892                     	;# 
   957     0893                     	;# 
   958     0895                     	;# 
   959     0896                     	;# 
   960     0897                     	;# 
   961     0898                     	;# 
   962     0899                     	;# 
   963     089A                     	;# 
   964     089B                     	;# 
   965     090C                     	;# 
   966     090E                     	;# 
   967     090F                     	;# 
   968     091F                     	;# 
   969     091F                     	;# 
   970     098F                     	;# 
   971     098F                     	;# 
   972     0990                     	;# 
   973     0991                     	;# 
   974     0992                     	;# 
   975     0993                     	;# 
   976     0994                     	;# 
   977     0995                     	;# 
   978     0996                     	;# 
   979     0997                     	;# 
   980     0E0F                     	;# 
   981     0E10                     	;# 
   982     0E11                     	;# 
   983     0E12                     	;# 
   984     0E13                     	;# 
   985     0E14                     	;# 
   986     0E15                     	;# 
   987     0E16                     	;# 
   988     0E17                     	;# 
   989     0E18                     	;# 
   990     0E19                     	;# 
   991     0E1A                     	;# 
   992     0E1B                     	;# 
   993     0E1C                     	;# 
   994     0E1D                     	;# 
   995     0E1E                     	;# 
   996     0E1F                     	;# 
   997     0E20                     	;# 
   998     0E21                     	;# 
   999     0E22                     	;# 
  1000     0E23                     	;# 
  1001     0E24                     	;# 
  1002     0E25                     	;# 
  1003     0E26                     	;# 
  1004     0E27                     	;# 
  1005     0E28                     	;# 
  1006     0E29                     	;# 
  1007     0E2A                     	;# 
  1008     0E2B                     	;# 
  1009     0E2C                     	;# 
  1010     0E2D                     	;# 
  1011     0E2E                     	;# 
  1012     0E2F                     	;# 
  1013     0E30                     	;# 
  1014     0E31                     	;# 
  1015     0E32                     	;# 
  1016     0E33                     	;# 
  1017     0E34                     	;# 
  1018     0E35                     	;# 
  1019     0E36                     	;# 
  1020     0E37                     	;# 
  1021     0E8F                     	;# 
  1022     0E90                     	;# 
  1023     0E91                     	;# 
  1024     0E92                     	;# 
  1025     0E93                     	;# 
  1026     0E94                     	;# 
  1027     0E95                     	;# 
  1028     0E96                     	;# 
  1029     0E97                     	;# 
  1030     0E9C                     	;# 
  1031     0E9D                     	;# 
  1032     0E9E                     	;# 
  1033     0EA1                     	;# 
  1034     0EA2                     	;# 
  1035     0EA3                     	;# 
  1036     0EA4                     	;# 
  1037     0EA5                     	;# 
  1038     0EA9                     	;# 
  1039     0EAA                     	;# 
  1040     0EAB                     	;# 
  1041     0EAC                     	;# 
  1042     0EB1                     	;# 
  1043     0EB2                     	;# 
  1044     0EB3                     	;# 
  1045     0EB8                     	;# 
  1046     0EB9                     	;# 
  1047     0EBA                     	;# 
  1048     0EBB                     	;# 
  1049     0EBC                     	;# 
  1050     0EBD                     	;# 
  1051     0EBE                     	;# 
  1052     0EC3                     	;# 
  1053     0EC5                     	;# 
  1054     0EC6                     	;# 
  1055     0EC7                     	;# 
  1056     0EC8                     	;# 
  1057     0EC9                     	;# 
  1058     0ECA                     	;# 
  1059     0ECB                     	;# 
  1060     0ECC                     	;# 
  1061     0F10                     	;# 
  1062     0F11                     	;# 
  1063     0F12                     	;# 
  1064     0F13                     	;# 
  1065     0F14                     	;# 
  1066     0F15                     	;# 
  1067     0F16                     	;# 
  1068     0F17                     	;# 
  1069     0F18                     	;# 
  1070     0F19                     	;# 
  1071     0F1A                     	;# 
  1072     0F1B                     	;# 
  1073     0F1C                     	;# 
  1074     0F1D                     	;# 
  1075     0F1E                     	;# 
  1076     0F1F                     	;# 
  1077     0F20                     	;# 
  1078     0F21                     	;# 
  1079     0F22                     	;# 
  1080     0F23                     	;# 
  1081     0F24                     	;# 
  1082     0F25                     	;# 
  1083     0F26                     	;# 
  1084     0F27                     	;# 
  1085     0F38                     	;# 
  1086     0F39                     	;# 
  1087     0F3A                     	;# 
  1088     0F3B                     	;# 
  1089     0F3C                     	;# 
  1090     0F3D                     	;# 
  1091     0F3E                     	;# 
  1092     0F3F                     	;# 
  1093     0F40                     	;# 
  1094     0F41                     	;# 
  1095     0F43                     	;# 
  1096     0F44                     	;# 
  1097     0F45                     	;# 
  1098     0F46                     	;# 
  1099     0F47                     	;# 
  1100     0F48                     	;# 
  1101     0F49                     	;# 
  1102     0F4A                     	;# 
  1103     0F4B                     	;# 
  1104     0F4C                     	;# 
  1105     0F4E                     	;# 
  1106     0F4F                     	;# 
  1107     0F50                     	;# 
  1108     0F51                     	;# 
  1109     0F52                     	;# 
  1110     0F53                     	;# 
  1111     0F54                     	;# 
  1112     0F55                     	;# 
  1113     0F56                     	;# 
  1114     0F57                     	;# 
  1115     0F65                     	;# 
  1116     0F68                     	;# 
  1117     0F69                     	;# 
  1118     0F6A                     	;# 
  1119     0F6B                     	;# 
  1120     0FE4                     	;# 
  1121     0FE5                     	;# 
  1122     0FE6                     	;# 
  1123     0FE7                     	;# 
  1124     0FE8                     	;# 
  1125     0FE9                     	;# 
  1126     0FEA                     	;# 
  1127     0FEB                     	;# 
  1128     0FED                     	;# 
  1129     0FEE                     	;# 
  1130     0FEF                     	;# 
  1131                           
  1132                           	psect	idataCOMMON
  1133     0F48                     __pidataCOMMON:
  1134                           
  1135                           ;initializer for _cycle
  1136     0F48  344B               	retlw	75
  1137     0F49  342E               	retlw	46
  1138                           
  1139                           ;initializer for _frequency
  1140     0F4A  348C               	retlw	140
  1141     0F4B  340A               	retlw	10
  1142                           
  1143                           	psect	idataBANK0
  1144     0FA3                     __pidataBANK0:
  1145                           
  1146                           ;initializer for _SWITCH_MID
  1147     0FA3  34DC               	retlw	220
  1148     0FA4  3405               	retlw	5
  1149                           
  1150                           ;initializer for _SWITCH_MIN
  1151     0FA5  34E8               	retlw	232
  1152     0FA6  3403               	retlw	3
  1153                           
  1154                           ;initializer for _SWITCH_MAX
  1155     0FA7  34D0               	retlw	208
  1156     0FA8  3407               	retlw	7
  1157                           
  1158                           ;initializer for _CONTROL_OUTPUT
  1159     0FA9  3401               	retlw	1
  1160     0FAA  3400               	retlw	0
  1161                           
  1162                           ;initializer for _GREEN
  1163     0FAB  3403               	retlw	3
  1164                           
  1165                           ;initializer for _BLUE
  1166     0FAC  3402               	retlw	2
  1167                           
  1168                           ;initializer for _RED
  1169     0FAD  3401               	retlw	1
  1170                           
  1171                           ;initializer for _newI2CMessage
  1172     0FAE  3401               	retlw	1
  1173                           
  1174                           	psect	idataBANK1
  1175     06BF                     __pidataBANK1:
  1176                           
  1177                           ;initializer for _EnableLaserScopeCommand
  1178     06BF  34FE               	retlw	254
  1179     06C0  3419               	retlw	25
  1180     06C1  3401               	retlw	1
  1181     06C2  3408               	retlw	8
  1182     06C3  3401               	retlw	1
  1183     06C4  3400               	retlw	0
  1184     06C5  3401               	retlw	1
  1185                           
  1186                           ;initializer for _Break
  1187     06C6  34FE               	retlw	254
  1188     06C7  3419               	retlw	25
  1189     06C8  3401               	retlw	1
  1190     06C9  3406               	retlw	6
  1191     06CA  3404               	retlw	4
  1192     06CB  3400               	retlw	0
  1193     06CC  3400               	retlw	0
  1194     06CD  3400               	retlw	0
  1195     06CE  3400               	retlw	0
  1196     06CF  3400               	retlw	0
  1197                           
  1198                           ;initializer for _MoveBackwardCommand
  1199     06D0  34FE               	retlw	254
  1200     06D1  3419               	retlw	25
  1201     06D2  3401               	retlw	1
  1202     06D3  3406               	retlw	6
  1203     06D4  3404               	retlw	4
  1204     06D5  3400               	retlw	0
  1205     06D6  3402               	retlw	2
  1206     06D7  3432               	retlw	50
  1207     06D8  3402               	retlw	2
  1208     06D9  3432               	retlw	50
  1209                           
  1210                           ;initializer for _MoveForwardCommand
  1211     06DA  34FE               	retlw	254
  1212     06DB  3419               	retlw	25
  1213     06DC  3401               	retlw	1
  1214     06DD  3406               	retlw	6
  1215     06DE  3404               	retlw	4
  1216     06DF  3400               	retlw	0
  1217     06E0  3401               	retlw	1
  1218     06E1  3432               	retlw	50
  1219     06E2  3401               	retlw	1
  1220     06E3  3432               	retlw	50
  1221                           
  1222                           ;initializer for _TurnRightCommand
  1223     06E4  34FE               	retlw	254
  1224     06E5  3419               	retlw	25
  1225     06E6  3401               	retlw	1
  1226     06E7  3406               	retlw	6
  1227     06E8  3404               	retlw	4
  1228     06E9  3400               	retlw	0
  1229     06EA  3402               	retlw	2
  1230     06EB  3432               	retlw	50
  1231     06EC  3401               	retlw	1
  1232     06ED  3432               	retlw	50
  1233                           
  1234                           ;initializer for _TurnLeftCommand
  1235     06EE  34FE               	retlw	254
  1236     06EF  3419               	retlw	25
  1237     06F0  3401               	retlw	1
  1238     06F1  3406               	retlw	6
  1239     06F2  3404               	retlw	4
  1240     06F3  3400               	retlw	0
  1241     06F4  3401               	retlw	1
  1242     06F5  3432               	retlw	50
  1243     06F6  3402               	retlw	2
  1244     06F7  3432               	retlw	50
  1245                           
  1246                           ;initializer for _GetUserDataCommand
  1247     06F8  34FE               	retlw	254
  1248     06F9  3419               	retlw	25
  1249     06FA  3401               	retlw	1
  1250     06FB  3405               	retlw	5
  1251     06FC  3400               	retlw	0
  1252     06FD  3400               	retlw	0
  1253                           
  1254                           	psect	stringtext1
  1255     1000                     __pstringtext1:
  1256     1000                     _CONTROL_INPUT:
  1257     1000  3401               	retlw	1
  1258     1001  3400               	retlw	0
  1259     1002                     __end_of_CONTROL_INPUT:
  1260     0017                     _LATBbits	set	23
  1261     0012                     _TRISBbits	set	18
  1262     000B                     _INTCONbits	set	11
  1263     0011                     _TRISAbits	set	17
  1264     0016                     _LATAbits	set	22
  1265     0013                     _TRISCbits	set	19
  1266     011A                     _TX1REGbits	set	282
  1267     0119                     _RCREG	set	281
  1268     011D                     _RC1STAbits	set	285
  1269     011B                     _SP1BRGLbits	set	283
  1270     011E                     _TX1STAbits	set	286
  1271     011F                     _BAUD1CONbits	set	287
  1272     018C                     _SSP1BUFbits	set	396
  1273     0191                     _SSP1CON2bits	set	401
  1274     018C                     _SSP1BUF	set	396
  1275     0190                     _SSP1CON1	set	400
  1276     018D                     _SSP1ADD	set	397
  1277     0719                     _PIE3bits	set	1817
  1278     070F                     _PIR3bits	set	1807
  1279     090F                     _DAC1CON1bits	set	2319
  1280     0ECB                     _RXPPSbits	set	3787
  1281     0EC6                     _SSP1DATPPSbits	set	3782
  1282     0EC5                     _SSP1CLKPPSbits	set	3781
  1283     0F43                     _ANSELBbits	set	3907
  1284     0F25                     _RC5PPS	set	3877
  1285     0F38                     _ANSELAbits	set	3896
  1286     0F4F                     _WPUCbits	set	3919
  1287     0F4E                     _ANSELCbits	set	3918
  1288     0F24                     _RC4PPS	set	3876
  1289     0F23                     _RC3PPS	set	3875
  1290                           
  1291                           	psect	cinit
  1292     0087                     start_initialization:	
  1293                           ; #config settings
  1294                           
  1295     0087                     __initialization:
  1296                           
  1297                           ; Initialize objects allocated to COMMON
  1298     0087  3048               	movlw	low __pidataCOMMON
  1299     0088  0084               	movwf	4
  1300     0089  308F               	movlw	(high __pidataCOMMON)| (0+128)
  1301     008A  0085               	movwf	5
  1302     008B  3079               	movlw	low __pdataCOMMON
  1303     008C  0086               	movwf	6
  1304     008D  3000               	movlw	high __pdataCOMMON
  1305     008E  0087               	movwf	7
  1306     008F  3004               	movlw	4
  1307     0090  318F  2763  3180   	fcall	init_ram
  1308                           
  1309                           ; Initialize objects allocated to BANK0
  1310     0093  30A3               	movlw	low __pidataBANK0
  1311     0094  0084               	movwf	4
  1312     0095  308F               	movlw	(high __pidataBANK0)| (0+128)
  1313     0096  0085               	movwf	5
  1314     0097  3064               	movlw	low __pdataBANK0
  1315     0098  0086               	movwf	6
  1316     0099  3000               	movlw	high __pdataBANK0
  1317     009A  0087               	movwf	7
  1318     009B  300C               	movlw	12
  1319     009C  318F  2763  3180   	fcall	init_ram
  1320                           
  1321                           ; Initialize objects allocated to BANK1
  1322     009F  30BF               	movlw	low __pidataBANK1
  1323     00A0  0084               	movwf	4
  1324     00A1  3086               	movlw	(high __pidataBANK1)| (0+128)
  1325     00A2  0085               	movwf	5
  1326     00A3  30A0               	movlw	low __pdataBANK1
  1327     00A4  0086               	movwf	6
  1328     00A5  3000               	movlw	high __pdataBANK1
  1329     00A6  0087               	movwf	7
  1330     00A7  303F               	movlw	63
  1331     00A8  318F  2763  3180   	fcall	init_ram
  1332                           
  1333                           ; Clear objects allocated to BANK0
  1334     00AB  3020               	movlw	low __pbssBANK0
  1335     00AC  0084               	movwf	4
  1336     00AD  3000               	movlw	high __pbssBANK0
  1337     00AE  0085               	movwf	5
  1338     00AF  302F               	movlw	47
  1339     00B0  318F  275D  3180   	fcall	clear_ram0
  1340                           
  1341                           ; Clear objects allocated to BANK1
  1342     00B3  30DF               	movlw	low __pbssBANK1
  1343     00B4  0084               	movwf	4
  1344     00B5  3000               	movlw	high __pbssBANK1
  1345     00B6  0085               	movwf	5
  1346     00B7  300C               	movlw	12
  1347     00B8  318F  275D  3180   	fcall	clear_ram0
  1348                           
  1349                           ; Clear objects allocated to BANK2
  1350     00BB  3020               	movlw	low __pbssBANK2
  1351     00BC  0084               	movwf	4
  1352     00BD  3001               	movlw	high __pbssBANK2
  1353     00BE  0085               	movwf	5
  1354     00BF  3024               	movlw	36
  1355     00C0  318F  275D  3180   	fcall	clear_ram0
  1356     00C3                     end_of_initialization:	
  1357                           ;End of C runtime variable initialization code
  1358                           
  1359     00C3                     __end_of__initialization:
  1360     00C3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1361     00C4  0020               	movlb	0
  1362     00C5  3184  2C87         	ljmp	_main	;jump to C main() function
  1363                           
  1364                           	psect	dataCOMMON
  1365     0079                     __pdataCOMMON:
  1366     0079                     _cycle:
  1367     0079                     	ds	2
  1368     007B                     _frequency:
  1369     007B                     	ds	2
  1370                           
  1371                           	psect	bssBANK0
  1372     0020                     __pbssBANK0:
  1373     0020                     _controls:
  1374     0020                     	ds	22
  1375     0036                     _currentCommand:
  1376     0036                     	ds	14
  1377     0044                     _counter:
  1378     0044                     	ds	2
  1379     0046                     _commandIt:
  1380     0046                     	ds	2
  1381     0048                     _inputStage:
  1382     0048                     	ds	2
  1383     004A                     _currentInput:
  1384     004A                     	ds	2
  1385     004C                     _I2CStage:
  1386     004C                     	ds	2
  1387     004E                     _color:
  1388     004E                     	ds	1
  1389                           
  1390                           	psect	dataBANK0
  1391     0064                     __pdataBANK0:
  1392     0064                     _SWITCH_MID:
  1393     0064                     	ds	2
  1394     0066                     _SWITCH_MIN:
  1395     0066                     	ds	2
  1396     0068                     _SWITCH_MAX:
  1397     0068                     	ds	2
  1398     006A                     _CONTROL_OUTPUT:
  1399     006A                     	ds	2
  1400     006C                     _GREEN:
  1401     006C                     	ds	1
  1402     006D                     _BLUE:
  1403     006D                     	ds	1
  1404     006E                     _RED:
  1405     006E                     	ds	1
  1406     006F                     _newI2CMessage:
  1407     006F                     	ds	1
  1408                           
  1409                           	psect	bssBANK1
  1410     00DF                     __pbssBANK1:
  1411     00DF                     _colors:
  1412     00DF                     	ds	12
  1413                           
  1414                           	psect	dataBANK1
  1415     00A0                     __pdataBANK1:
  1416     00A0                     _EnableLaserScopeCommand:
  1417     00A0                     	ds	7
  1418     00A7                     _Break:
  1419     00A7                     	ds	10
  1420     00B1                     _MoveBackwardCommand:
  1421     00B1                     	ds	10
  1422     00BB                     _MoveForwardCommand:
  1423     00BB                     	ds	10
  1424     00C5                     _TurnRightCommand:
  1425     00C5                     	ds	10
  1426     00CF                     _TurnLeftCommand:
  1427     00CF                     	ds	10
  1428     00D9                     _GetUserDataCommand:
  1429     00D9                     	ds	6
  1430                           
  1431                           	psect	bssBANK2
  1432     0120                     __pbssBANK2:
  1433     0120                     _Controls:
  1434     0120                     	ds	22
  1435     0136                     _Command:
  1436     0136                     	ds	14
  1437                           
  1438                           	psect	inittext
  1439     0F63                     init_ram:
  1440     0F63  00FE               	movwf	btemp
  1441     0F64                     initloop:
  1442     0F64  0012               	moviw fsr0++
  1443     0F65  001E               	movwi fsr1++
  1444     0F66  0BFE               	decfsz	btemp,f
  1445     0F67  2F64               	goto	initloop
  1446     0F68  3400               	retlw	0
  1447                           
  1448                           	psect	clrtext
  1449     0F5D                     clear_ram0:	
  1450                           ;	Called with FSR0 containing the base address, and
  1451                           ;	WREG with the size to clear
  1452                           
  1453     0F5D  0064               	clrwdt	;clear the watchdog before getting into this loop
  1454     0F5E                     clrloop0:
  1455     0F5E  0180               	clrf	0	;clear RAM location pointed to by FSR
  1456     0F5F  3101               	addfsr 0,1
  1457     0F60  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1458     0F61  2F5E               	goto	clrloop0	;have we reached the end yet?
  1459     0F62  3400               	retlw	0	;all done for this memory range, return
  1460                           
  1461                           	psect	cstackCOMMON
  1462     0070                     __pcstackCOMMON:
  1463     0070                     ?_StartIC2Transmission:
  1464     0070                     ?_StartWriteRequest:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467     0070                     ?_RepeatedStart:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470     0070                     ?_StartReadRequest:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473     0070                     ?_EndIC2Transmission:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476     0070                     ?_SetUpPumpArm:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479     0070                     ?_SetUpPump:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482     0070                     ?_CreateControlsCommand:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485     0070                     ?_drive:	
  1486                           ; 1 bytes @ 0x0
  1487                           
  1488     0070                     ?_CreateBreak:	
  1489                           ; 1 bytes @ 0x0
  1490                           
  1491     0070                     ?_SetUpI2CPins:	
  1492                           ; 1 bytes @ 0x0
  1493                           
  1494     0070                     ?_SetUpIC2Clock:	
  1495                           ; 1 bytes @ 0x0
  1496                           
  1497     0070                     ?_SetUpI2C:	
  1498                           ; 1 bytes @ 0x0
  1499                           
  1500     0070                     ?_Reset:	
  1501                           ; 1 bytes @ 0x0
  1502                           
  1503     0070                     ?_StartI2C:	
  1504                           ; 1 bytes @ 0x0
  1505                           
  1506     0070                     ?_EndI2C:	
  1507                           ; 1 bytes @ 0x0
  1508                           
  1509     0070                     ?_WriteI2C:	
  1510                           ; 1 bytes @ 0x0
  1511                           
  1512     0070                     ?_ReadAddressI2C:	
  1513                           ; 1 bytes @ 0x0
  1514                           
  1515     0070                     ?_ReadI2C:	
  1516                           ; 1 bytes @ 0x0
  1517                           
  1518     0070                     ?_RepeatI2C:	
  1519                           ; 1 bytes @ 0x0
  1520                           
  1521     0070                     ?_IncrementColorStage:	
  1522                           ; 1 bytes @ 0x0
  1523                           
  1524     0070                     ?_GetValueAndEndI2C:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527     0070                     ?_SetUpColorSensor:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530     0070                     ?_main:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533     0070                     ?_GetControllerInput:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536     0070                     ?_myFunction:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539     0070                     GetControllerInput@input:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542                           
  1543                           ; 2 bytes @ 0x0
  1544     0070                     	ds	2
  1545     0072                     ??_GetControllerInput:
  1546                           
  1547                           ; 1 bytes @ 0x2
  1548     0072                     	ds	3
  1549     0075                     ??_myFunction:
  1550                           
  1551                           ; 1 bytes @ 0x5
  1552     0075                     	ds	2
  1553     0077                     myFunction@input:
  1554                           
  1555                           ; 2 bytes @ 0x7
  1556     0077                     	ds	2
  1557                           
  1558                           	psect	cstackBANK0
  1559     004F                     __pcstackBANK0:
  1560     004F                     ??_StartIC2Transmission:
  1561     004F                     ??_StartWriteRequest:	
  1562                           ; 1 bytes @ 0x0
  1563                           
  1564     004F                     ??_RepeatedStart:	
  1565                           ; 1 bytes @ 0x0
  1566                           
  1567     004F                     ??_StartReadRequest:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570     004F                     ??_EndIC2Transmission:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573     004F                     ??_SetUpPumpArm:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576     004F                     ??_SetUpPump:	
  1577                           ; 1 bytes @ 0x0
  1578                           
  1579     004F                     ??_CreateControlsCommand:	
  1580                           ; 1 bytes @ 0x0
  1581                           
  1582     004F                     ?_MovePumpArm:	
  1583                           ; 1 bytes @ 0x0
  1584                           
  1585     004F                     ?_ActivatePump:	
  1586                           ; 1 bytes @ 0x0
  1587                           
  1588     004F                     ?_CreateTurnRightCommmand:	
  1589                           ; 1 bytes @ 0x0
  1590                           
  1591     004F                     ?_CreateTurnLeftCommmand:	
  1592                           ; 1 bytes @ 0x0
  1593                           
  1594     004F                     ?_CreateMoveForwardCommmand:	
  1595                           ; 1 bytes @ 0x0
  1596                           
  1597     004F                     ?_CreateMoveBackwardCommmand:	
  1598                           ; 1 bytes @ 0x0
  1599                           
  1600     004F                     ??_CreateBreak:	
  1601                           ; 1 bytes @ 0x0
  1602                           
  1603     004F                     ??_SetUpI2CPins:	
  1604                           ; 1 bytes @ 0x0
  1605                           
  1606     004F                     ??_SetUpIC2Clock:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609     004F                     ??_SetUpI2C:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612     004F                     ?_SelectColourRegister:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615     004F                     ??_Reset:	
  1616                           ; 1 bytes @ 0x0
  1617                           
  1618     004F                     ??_StartI2C:	
  1619                           ; 1 bytes @ 0x0
  1620                           
  1621     004F                     ??_EndI2C:	
  1622                           ; 1 bytes @ 0x0
  1623                           
  1624     004F                     ??_WriteI2C:	
  1625                           ; 1 bytes @ 0x0
  1626                           
  1627     004F                     ??_ReadAddressI2C:	
  1628                           ; 1 bytes @ 0x0
  1629                           
  1630     004F                     ??_ReadI2C:	
  1631                           ; 1 bytes @ 0x0
  1632                           
  1633     004F                     ??_RepeatI2C:	
  1634                           ; 1 bytes @ 0x0
  1635                           
  1636     004F                     ??_IncrementColorStage:	
  1637                           ; 1 bytes @ 0x0
  1638                           
  1639     004F                     ?_LoadTemp:	
  1640                           ; 1 bytes @ 0x0
  1641                           
  1642     004F                     ?_SetUp:	
  1643                           ; 1 bytes @ 0x0
  1644                           
  1645     004F                     ?___awmod:	
  1646                           ; 2 bytes @ 0x0
  1647                           
  1648     004F                     Reset@colors:	
  1649                           ; 2 bytes @ 0x0
  1650                           
  1651     004F                     IncrementColorStage@colors:	
  1652                           ; 1 bytes @ 0x0
  1653                           
  1654     004F                     LoadTemp@value:	
  1655                           ; 1 bytes @ 0x0
  1656                           
  1657     004F                     SelectColourRegister@colorStage:	
  1658                           ; 1 bytes @ 0x0
  1659                           
  1660     004F                     CreateTurnRightCommmand@pwm:	
  1661                           ; 2 bytes @ 0x0
  1662                           
  1663     004F                     CreateTurnLeftCommmand@pwm:	
  1664                           ; 2 bytes @ 0x0
  1665                           
  1666     004F                     CreateMoveForwardCommmand@pwm:	
  1667                           ; 2 bytes @ 0x0
  1668                           
  1669     004F                     CreateMoveBackwardCommmand@pwm:	
  1670                           ; 2 bytes @ 0x0
  1671                           
  1672     004F                     MovePumpArm@switchValue:	
  1673                           ; 2 bytes @ 0x0
  1674                           
  1675     004F                     ActivatePump@switchValue:	
  1676                           ; 2 bytes @ 0x0
  1677                           
  1678     004F                     ___awmod@divisor:	
  1679                           ; 2 bytes @ 0x0
  1680                           
  1681                           
  1682                           ; 2 bytes @ 0x0
  1683     004F                     	ds	1
  1684     0050                     ??_LoadTemp:
  1685     0050                     ?_ReadColorReady:	
  1686                           ; 1 bytes @ 0x1
  1687                           
  1688     0050                     LoadTemp@colors:	
  1689                           ; 1 bytes @ 0x1
  1690                           
  1691     0050                     ReadColorReady@buffer:	
  1692                           ; 1 bytes @ 0x1
  1693                           
  1694                           
  1695                           ; 1 bytes @ 0x1
  1696     0050                     	ds	1
  1697     0051                     ??_MovePumpArm:
  1698     0051                     ??_ActivatePump:	
  1699                           ; 1 bytes @ 0x2
  1700                           
  1701     0051                     ??_drive:	
  1702                           ; 1 bytes @ 0x2
  1703                           
  1704     0051                     ??_CreateTurnRightCommmand:	
  1705                           ; 1 bytes @ 0x2
  1706                           
  1707     0051                     ??_CreateTurnLeftCommmand:	
  1708                           ; 1 bytes @ 0x2
  1709                           
  1710     0051                     ??_CreateMoveForwardCommmand:	
  1711                           ; 1 bytes @ 0x2
  1712                           
  1713     0051                     ??_CreateMoveBackwardCommmand:	
  1714                           ; 1 bytes @ 0x2
  1715                           
  1716     0051                     ??_SetUp:	
  1717                           ; 1 bytes @ 0x2
  1718                           
  1719     0051                     ??_SelectColourRegister:	
  1720                           ; 1 bytes @ 0x2
  1721                           
  1722     0051                     ??_ReadColorReady:	
  1723                           ; 1 bytes @ 0x2
  1724                           
  1725     0051                     SelectColourRegister@writeValue:	
  1726                           ; 1 bytes @ 0x2
  1727                           
  1728     0051                     ReadColorReady@colors:	
  1729                           ; 1 bytes @ 0x2
  1730                           
  1731     0051                     ___awmod@dividend:	
  1732                           ; 1 bytes @ 0x2
  1733                           
  1734                           
  1735                           ; 2 bytes @ 0x2
  1736     0051                     	ds	1
  1737     0052                     ??_GetValueAndEndI2C:
  1738     0052                     GetValueAndEndI2C@value:	
  1739                           ; 1 bytes @ 0x3
  1740                           
  1741                           
  1742                           ; 1 bytes @ 0x3
  1743     0052                     	ds	1
  1744     0053                     ??___awmod:
  1745     0053                     GetValueAndEndI2C@colors:	
  1746                           ; 1 bytes @ 0x4
  1747                           
  1748     0053                     SetUp@value:	
  1749                           ; 1 bytes @ 0x4
  1750                           
  1751                           
  1752                           ; 2 bytes @ 0x4
  1753     0053                     	ds	1
  1754     0054                     ___awmod@counter:
  1755                           
  1756                           ; 1 bytes @ 0x5
  1757     0054                     	ds	1
  1758     0055                     ??_SetUpColorSensor:
  1759     0055                     ___awmod@sign:	
  1760                           ; 1 bytes @ 0x6
  1761                           
  1762                           
  1763                           ; 1 bytes @ 0x6
  1764     0055                     	ds	1
  1765     0056                     ?_UpdateColors:
  1766     0056                     UpdateColors@stageValue:	
  1767                           ; 1 bytes @ 0x7
  1768                           
  1769                           
  1770                           ; 2 bytes @ 0x7
  1771     0056                     	ds	1
  1772     0057                     SetUpColorSensor@result:
  1773                           
  1774                           ; 2 bytes @ 0x8
  1775     0057                     	ds	1
  1776     0058                     ??_UpdateColors:
  1777                           
  1778                           ; 1 bytes @ 0x9
  1779     0058                     	ds	2
  1780     005A                     UpdateColors@colors:
  1781                           
  1782                           ; 1 bytes @ 0xB
  1783     005A                     	ds	1
  1784     005B                     ?_ColorSensor:
  1785     005B                     ColorSensor@I2CStage:	
  1786                           ; 1 bytes @ 0xC
  1787                           
  1788                           
  1789                           ; 1 bytes @ 0xC
  1790     005B                     	ds	1
  1791     005C                     ColorSensor@colors:
  1792                           
  1793                           ; 1 bytes @ 0xD
  1794     005C                     	ds	1
  1795     005D                     ColorSensor@color:
  1796                           
  1797                           ; 1 bytes @ 0xE
  1798     005D                     	ds	1
  1799     005E                     ??_ColorSensor:
  1800                           
  1801                           ; 1 bytes @ 0xF
  1802     005E                     	ds	5
  1803     0063                     ColorSensor@newI2CMessage:
  1804                           
  1805                           ; 1 bytes @ 0x14
  1806     0063                     	ds	1
  1807     0064                     ??_main:
  1808                           
  1809                           	psect	maintext
  1810     0487                     __pmaintext:	
  1811                           ; 1 bytes @ 0x15
  1812 ;;
  1813 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1814 ;;
  1815 ;; *************** function _main *****************
  1816 ;; Defined at:
  1817 ;;		line 126 in file "motorMain.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : B1F/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1835 ;;Total ram usage:        0 bytes
  1836 ;; Hardware stack levels required when called: 7
  1837 ;; This function calls:
  1838 ;;		_ActivatePump
  1839 ;;		_ColorSensor
  1840 ;;		_CreateControlsCommand
  1841 ;;		_MovePumpArm
  1842 ;;		_SetUpColorSensor
  1843 ;;		_SetUpPump
  1844 ;;		_SetUpPumpArm
  1845 ;;		_drive
  1846 ;; This function is called by:
  1847 ;;		Startup code after reset
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851     0487                     _main:	
  1852                           ;psect for function _main
  1853                           
  1854     0487                     l2580:	
  1855                           ;incstack = 0
  1856                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1857                           
  1858                           
  1859                           ;motorMain.c: 128:    TRISAbits.TRISA5 = 1;
  1860     0487  0020               	movlb	0	; select bank0
  1861     0488  1691               	bsf	17,5	;volatile
  1862                           
  1863                           ;motorMain.c: 129:     ANSELAbits.ANSA5 = 0;
  1864     0489  003E               	movlb	30	; select bank30
  1865     048A  12B8               	bcf	56,5	;volatile
  1866                           
  1867                           ;motorMain.c: 131:     TRISAbits.TRISA0 = 0;
  1868     048B  0020               	movlb	0	; select bank0
  1869     048C  1011               	bcf	17,0	;volatile
  1870                           
  1871                           ;motorMain.c: 132:     TRISAbits.TRISA1 = 0;
  1872     048D  1091               	bcf	17,1	;volatile
  1873                           
  1874                           ;motorMain.c: 133:     TRISAbits.TRISA2 = 0;
  1875     048E  1111               	bcf	17,2	;volatile
  1876                           
  1877                           ;motorMain.c: 134:     TRISAbits.TRISA3 = 0;
  1878     048F  1191               	bcf	17,3	;volatile
  1879                           
  1880                           ;motorMain.c: 137:     LATAbits.LATA0 = 0;
  1881     0490  1016               	bcf	22,0	;volatile
  1882                           
  1883                           ;motorMain.c: 138:     LATAbits.LATA1 = 0;
  1884     0491  1096               	bcf	22,1	;volatile
  1885                           
  1886                           ;motorMain.c: 139:     LATAbits.LATA2 = 0;
  1887     0492  1116               	bcf	22,2	;volatile
  1888                           
  1889                           ;motorMain.c: 140:     LATAbits.LATA3 = 0;
  1890     0493  1196               	bcf	22,3	;volatile
  1891     0494                     l2582:
  1892                           
  1893                           ;motorMain.c: 142:     SetUpPumpArm();
  1894     0494  318F  2799  3184   	fcall	_SetUpPumpArm
  1895                           
  1896                           ;motorMain.c: 143:     SetUpPump();
  1897     0497  318F  278F  3184   	fcall	_SetUpPump
  1898     049A                     l2584:
  1899                           
  1900                           ;motorMain.c: 145:     BAUD1CONbits.BRG16=1;
  1901     049A  0022               	movlb	2	; select bank2
  1902     049B  159F               	bsf	31,3	;volatile
  1903     049C                     l2586:
  1904                           
  1905                           ;motorMain.c: 147:     TX1STAbits.BRGH = 0x1;
  1906     049C  151E               	bsf	30,2	;volatile
  1907     049D                     l2588:
  1908                           
  1909                           ;motorMain.c: 151:     RC5PPS = 0x10;
  1910     049D  3010               	movlw	16
  1911     049E  003E               	movlb	30	; select bank30
  1912     049F  00A5               	movwf	37	;volatile
  1913     04A0                     l2590:
  1914                           
  1915                           ;motorMain.c: 152:     TRISCbits.TRISC5 = 0;
  1916     04A0  0020               	movlb	0	; select bank0
  1917     04A1  1293               	bcf	19,5	;volatile
  1918     04A2                     l2592:
  1919                           
  1920                           ;motorMain.c: 154:     RXPPSbits.RXPPS = 0x16;
  1921     04A2  003D               	movlb	29	; select bank29
  1922     04A3  084B               	movf	75,w	;volatile
  1923     04A4  39E0               	andlw	-32
  1924     04A5  3816               	iorlw	22
  1925     04A6  00CB               	movwf	75	;volatile
  1926     04A7                     l2594:
  1927                           
  1928                           ;motorMain.c: 155:     TRISCbits.TRISC6 = 1;
  1929     04A7  0020               	movlb	0	; select bank0
  1930     04A8  1713               	bsf	19,6	;volatile
  1931     04A9                     l2596:
  1932                           
  1933                           ;motorMain.c: 156:     ANSELCbits.ANSC6 = 0;
  1934     04A9  003E               	movlb	30	; select bank30
  1935     04AA  134E               	bcf	78,6	;volatile
  1936     04AB                     l2598:
  1937                           
  1938                           ;motorMain.c: 159:     SP1BRGLbits.SP1BRGL = 68;
  1939     04AB  3044               	movlw	68
  1940     04AC  0022               	movlb	2	; select bank2
  1941     04AD  009B               	movwf	27	;volatile
  1942     04AE                     l2600:
  1943                           
  1944                           ;motorMain.c: 161:     CreateControlsCommand();
  1945     04AE  3187  277A  3184   	fcall	_CreateControlsCommand
  1946     04B1                     l2602:
  1947                           
  1948                           ;motorMain.c: 164:     RC1STAbits.SPEN = 1;
  1949     04B1  0022               	movlb	2	; select bank2
  1950     04B2  179D               	bsf	29,7	;volatile
  1951     04B3                     l2604:
  1952                           
  1953                           ;motorMain.c: 165:     TX1STAbits.TXEN =1;
  1954     04B3  169E               	bsf	30,5	;volatile
  1955     04B4                     l2606:
  1956                           
  1957                           ;motorMain.c: 166:     TX1STAbits.SYNC=0;
  1958     04B4  121E               	bcf	30,4	;volatile
  1959     04B5                     l2608:
  1960                           
  1961                           ;motorMain.c: 168:     RC1STAbits.CREN = 1;
  1962     04B5  161D               	bsf	29,4	;volatile
  1963     04B6                     l2610:
  1964                           
  1965                           ;motorMain.c: 171:     SetUpColorSensor();
  1966     04B6  3185  2578  3184   	fcall	_SetUpColorSensor
  1967     04B9                     l2612:
  1968                           
  1969                           ;motorMain.c: 177:     INTCONbits.PEIE = 1;
  1970     04B9  170B               	bsf	11,6	;volatile
  1971     04BA                     l2614:
  1972                           
  1973                           ;motorMain.c: 178:     PIE3bits.RCIE = 1;
  1974     04BA  002E               	movlb	14	; select bank14
  1975     04BB  1699               	bsf	25,5	;volatile
  1976     04BC                     l2616:
  1977                           
  1978                           ;motorMain.c: 179:     PIE3bits.TXIE = 1;
  1979     04BC  1619               	bsf	25,4	;volatile
  1980     04BD                     l2618:
  1981                           
  1982                           ;motorMain.c: 180:     PIE3bits.SSP1IE = 1;
  1983     04BD  1419               	bsf	25,0	;volatile
  1984     04BE                     l2620:
  1985                           
  1986                           ;motorMain.c: 181:     INTCONbits.GIE = 1;
  1987     04BE  178B               	bsf	11,7	;volatile
  1988     04BF                     l2622:
  1989                           
  1990                           ;motorMain.c: 185:         if(controls.switchA <= SWITCH_MIN){
  1991     04BF  3003               	movlw	3
  1992     04C0  0020               	movlb	0	; select bank0
  1993     04C1  0229               	subwf	_controls+9,w
  1994     04C2  30E9               	movlw	233
  1995     04C3  1903               	skipnz
  1996     04C4  0228               	subwf	_controls+8,w
  1997     04C5  1803               	skipnc
  1998     04C6  2CC8               	goto	u1271
  1999     04C7  2CC9               	goto	u1270
  2000     04C8                     u1271:
  2001     04C8  2CED               	goto	l2630
  2002     04C9                     u1270:
  2003     04C9                     l2624:
  2004                           
  2005                           ;motorMain.c: 187:             MovePumpArm(controls.switchC);
  2006     04C9  082D               	movf	_controls+13,w
  2007     04CA  00D0               	movwf	MovePumpArm@switchValue+1
  2008     04CB  082C               	movf	_controls+12,w
  2009     04CC  00CF               	movwf	MovePumpArm@switchValue
  2010     04CD  3187  2795  3184   	fcall	_MovePumpArm
  2011                           
  2012                           ;motorMain.c: 188:             ActivatePump(controls.switchD);
  2013     04D0  0020               	movlb	0	; select bank0
  2014     04D1  082F               	movf	_controls+15,w
  2015     04D2  00D0               	movwf	ActivatePump@switchValue+1
  2016     04D3  082E               	movf	_controls+14,w
  2017     04D4  00CF               	movwf	ActivatePump@switchValue
  2018     04D5  318F  27BD  3184   	fcall	_ActivatePump
  2019     04D8                     l2626:
  2020                           
  2021                           ;motorMain.c: 190:             if(controls.switchB <= SWITCH_MIN){
  2022     04D8  3003               	movlw	3
  2023     04D9  0020               	movlb	0	; select bank0
  2024     04DA  022B               	subwf	_controls+11,w
  2025     04DB  30E9               	movlw	233
  2026     04DC  1903               	skipnz
  2027     04DD  022A               	subwf	_controls+10,w
  2028     04DE  1803               	skipnc
  2029     04DF  2CE1               	goto	u1281
  2030     04E0  2CE2               	goto	u1280
  2031     04E1                     u1281:
  2032     04E1  2CFD               	goto	l2632
  2033     04E2                     u1280:
  2034     04E2                     l2628:
  2035                           
  2036                           ;motorMain.c: 191:                 ColorSensor(&newI2CMessage,&I2CStage,&colors,&color);
  2037     04E2  304C               	movlw	(low (_I2CStage| 0))& (0+255)
  2038     04E3  00DB               	movwf	ColorSensor@I2CStage
  2039     04E4  30DF               	movlw	(low (_colors| 0))& (0+255)
  2040     04E5  00DC               	movwf	ColorSensor@colors
  2041     04E6  304E               	movlw	(low (_color| 0))& (0+255)
  2042     04E7  00DD               	movwf	ColorSensor@color
  2043     04E8  306F               	movlw	(low (_newI2CMessage| 0))& (0+255)
  2044     04E9  3182  22DD  3184   	fcall	_ColorSensor
  2045     04EC  2CFD               	goto	l2644
  2046     04ED                     l2630:
  2047                           
  2048                           ;motorMain.c: 196:             MovePumpArm(SWITCH_MID);
  2049     04ED  30DC               	movlw	220
  2050     04EE  00CF               	movwf	MovePumpArm@switchValue
  2051     04EF  3005               	movlw	5
  2052     04F0  00D0               	movwf	MovePumpArm@switchValue+1
  2053     04F1  3187  2795  3184   	fcall	_MovePumpArm
  2054                           
  2055                           ;motorMain.c: 197:             ActivatePump(SWITCH_MAX);
  2056     04F4  30D0               	movlw	208
  2057     04F5  0020               	movlb	0	; select bank0
  2058     04F6  00CF               	movwf	ActivatePump@switchValue
  2059     04F7  3007               	movlw	7
  2060     04F8  00D0               	movwf	ActivatePump@switchValue+1
  2061     04F9  318F  27BD  3184   	fcall	_ActivatePump
  2062     04FC  2CFD               	goto	l2644
  2063     04FD                     l2632:
  2064     04FD                     l2644:
  2065                           
  2066                           ;motorMain.c: 219:         if(currentCommand.done){
  2067     04FD  0020               	movlb	0	; select bank0
  2068     04FE  0843               	movf	_currentCommand+13,w
  2069     04FF  1903               	btfsc	3,2
  2070     0500  2D02               	goto	u1291
  2071     0501  2D03               	goto	u1290
  2072     0502                     u1291:
  2073     0502  2CBF               	goto	l2622
  2074     0503                     u1290:
  2075     0503                     l2646:
  2076                           
  2077                           ;motorMain.c: 220:             if(currentCommand.sendId == CONTROL_INPUT){
  2078     0503  033A               	decf	_currentCommand+4,w
  2079     0504  043B               	iorwf	_currentCommand+5,w
  2080     0505  1D03               	btfss	3,2
  2081     0506  2D08               	goto	u1301
  2082     0507  2D09               	goto	u1300
  2083     0508                     u1301:
  2084     0508  2D0D               	goto	l2650
  2085     0509                     u1300:
  2086     0509                     l2648:
  2087                           
  2088                           ;motorMain.c: 221:                 drive();
  2089     0509  3180  20C7  3184   	fcall	_drive
  2090                           
  2091                           ;motorMain.c: 222:             }
  2092     050C  2CBF               	goto	l2622
  2093     050D                     l2650:
  2094                           
  2095                           ;motorMain.c: 224:                 CreateControlsCommand();
  2096     050D  3187  277A  3184   	fcall	_CreateControlsCommand
  2097     0510  2CBF               	goto	l2622
  2098     0511  3180  2885         	ljmp	start
  2099     0513                     __end_of_main:
  2100                           
  2101                           	psect	text1
  2102     00C7                     __ptext1:	
  2103 ;; *************** function _drive *****************
  2104 ;; Defined at:
  2105 ;;		line 263 in file "motorMain.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;  power           2    0        unsigned int 
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2, status,0, pclath, cstack
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2123 ;;Total ram usage:        1 bytes
  2124 ;; Hardware stack levels used: 1
  2125 ;; Hardware stack levels required when called: 3
  2126 ;; This function calls:
  2127 ;;		_CreateBreak
  2128 ;;		_CreateControlsCommand
  2129 ;;		_CreateMoveBackwardCommmand
  2130 ;;		_CreateMoveForwardCommmand
  2131 ;;		_CreateTurnLeftCommmand
  2132 ;;		_CreateTurnRightCommmand
  2133 ;; This function is called by:
  2134 ;;		_main
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138     00C7                     _drive:	
  2139                           ;psect for function _drive
  2140                           
  2141     00C7                     l2320:	
  2142                           ;incstack = 0
  2143                           ; Regs used in _drive: [wreg+status,2+status,0+pclath+cstack]
  2144                           
  2145                           
  2146                           ;motorMain.c: 266:     if((controls.rightX >= 0x6A4) && (controls.rightY >= 0x546 && con
      +                          trols.rightY <= 0x672)){
  2147     00C7  0020               	movlb	0	; select bank0
  2148     00C8  0821               	movf	_controls+1,w
  2149     00C9  3A80               	xorlw	128
  2150     00CA  00D1               	movwf	??_drive
  2151     00CB  3086               	movlw	134
  2152     00CC  0251               	subwf	??_drive,w
  2153     00CD  1D03               	skipz
  2154     00CE  28D1               	goto	u1085
  2155     00CF  30A4               	movlw	164
  2156     00D0  0220               	subwf	_controls,w
  2157     00D1                     u1085:
  2158     00D1  1C03               	skipc
  2159     00D2  28D4               	goto	u1081
  2160     00D3  28D5               	goto	u1080
  2161     00D4                     u1081:
  2162     00D4  28FA               	goto	l2328
  2163     00D5                     u1080:
  2164     00D5                     l2322:
  2165     00D5  0020               	movlb	0	; select bank0
  2166     00D6  0823               	movf	_controls+3,w
  2167     00D7  3A80               	xorlw	128
  2168     00D8  00D1               	movwf	??_drive
  2169     00D9  3085               	movlw	133
  2170     00DA  0251               	subwf	??_drive,w
  2171     00DB  1D03               	skipz
  2172     00DC  28DF               	goto	u1095
  2173     00DD  3046               	movlw	70
  2174     00DE  0222               	subwf	_controls+2,w
  2175     00DF                     u1095:
  2176     00DF  1C03               	skipc
  2177     00E0  28E2               	goto	u1091
  2178     00E1  28E3               	goto	u1090
  2179     00E2                     u1091:
  2180     00E2  28FA               	goto	l2328
  2181     00E3                     u1090:
  2182     00E3                     l2324:
  2183     00E3  0020               	movlb	0	; select bank0
  2184     00E4  0823               	movf	_controls+3,w
  2185     00E5  3A80               	xorlw	128
  2186     00E6  00D1               	movwf	??_drive
  2187     00E7  3086               	movlw	134
  2188     00E8  0251               	subwf	??_drive,w
  2189     00E9  1D03               	skipz
  2190     00EA  28ED               	goto	u1105
  2191     00EB  3073               	movlw	115
  2192     00EC  0222               	subwf	_controls+2,w
  2193     00ED                     u1105:
  2194     00ED  1803               	skipnc
  2195     00EE  28F0               	goto	u1101
  2196     00EF  28F1               	goto	u1100
  2197     00F0                     u1101:
  2198     00F0  28FA               	goto	l2328
  2199     00F1                     u1100:
  2200     00F1                     l2326:
  2201                           
  2202                           ;motorMain.c: 267:         CreateTurnRightCommmand(power);
  2203     00F1  304B               	movlw	75
  2204     00F2  0020               	movlb	0	; select bank0
  2205     00F3  00CF               	movwf	CreateTurnRightCommmand@pwm
  2206     00F4  3000               	movlw	0
  2207     00F5  00D0               	movwf	CreateTurnRightCommmand@pwm+1
  2208     00F6  3186  26FE  3180   	fcall	_CreateTurnRightCommmand
  2209                           
  2210                           ;motorMain.c: 268:     }else if((controls.rightX <= 0x514) && (controls.rightY >= 0x546 
      +                          && controls.rightY <= 0x672)){
  2211     00F9  29D2               	goto	l410
  2212     00FA                     l2328:
  2213     00FA  0020               	movlb	0	; select bank0
  2214     00FB  0821               	movf	_controls+1,w
  2215     00FC  3A80               	xorlw	128
  2216     00FD  00D1               	movwf	??_drive
  2217     00FE  3085               	movlw	133
  2218     00FF  0251               	subwf	??_drive,w
  2219     0100  1D03               	skipz
  2220     0101  2904               	goto	u1115
  2221     0102  3015               	movlw	21
  2222     0103  0220               	subwf	_controls,w
  2223     0104                     u1115:
  2224     0104  1803               	skipnc
  2225     0105  2907               	goto	u1111
  2226     0106  2908               	goto	u1110
  2227     0107                     u1111:
  2228     0107  292D               	goto	l2336
  2229     0108                     u1110:
  2230     0108                     l2330:
  2231     0108  0020               	movlb	0	; select bank0
  2232     0109  0823               	movf	_controls+3,w
  2233     010A  3A80               	xorlw	128
  2234     010B  00D1               	movwf	??_drive
  2235     010C  3085               	movlw	133
  2236     010D  0251               	subwf	??_drive,w
  2237     010E  1D03               	skipz
  2238     010F  2912               	goto	u1125
  2239     0110  3046               	movlw	70
  2240     0111  0222               	subwf	_controls+2,w
  2241     0112                     u1125:
  2242     0112  1C03               	skipc
  2243     0113  2915               	goto	u1121
  2244     0114  2916               	goto	u1120
  2245     0115                     u1121:
  2246     0115  292D               	goto	l2336
  2247     0116                     u1120:
  2248     0116                     l2332:
  2249     0116  0020               	movlb	0	; select bank0
  2250     0117  0823               	movf	_controls+3,w
  2251     0118  3A80               	xorlw	128
  2252     0119  00D1               	movwf	??_drive
  2253     011A  3086               	movlw	134
  2254     011B  0251               	subwf	??_drive,w
  2255     011C  1D03               	skipz
  2256     011D  2920               	goto	u1135
  2257     011E  3073               	movlw	115
  2258     011F  0222               	subwf	_controls+2,w
  2259     0120                     u1135:
  2260     0120  1803               	skipnc
  2261     0121  2923               	goto	u1131
  2262     0122  2924               	goto	u1130
  2263     0123                     u1131:
  2264     0123  292D               	goto	l2336
  2265     0124                     u1130:
  2266     0124                     l2334:
  2267                           
  2268                           ;motorMain.c: 269:         CreateTurnLeftCommmand(power);
  2269     0124  304B               	movlw	75
  2270     0125  0020               	movlb	0	; select bank0
  2271     0126  00CF               	movwf	CreateTurnLeftCommmand@pwm
  2272     0127  3000               	movlw	0
  2273     0128  00D0               	movwf	CreateTurnLeftCommmand@pwm+1
  2274     0129  3187  271D  3180   	fcall	_CreateTurnLeftCommmand
  2275                           
  2276                           ;motorMain.c: 270:     }else if((controls.rightY >= 0x6A4) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  2277     012C  29D2               	goto	l410
  2278     012D                     l2336:
  2279     012D  0020               	movlb	0	; select bank0
  2280     012E  0823               	movf	_controls+3,w
  2281     012F  3A80               	xorlw	128
  2282     0130  00D1               	movwf	??_drive
  2283     0131  3086               	movlw	134
  2284     0132  0251               	subwf	??_drive,w
  2285     0133  1D03               	skipz
  2286     0134  2937               	goto	u1145
  2287     0135  30A4               	movlw	164
  2288     0136  0222               	subwf	_controls+2,w
  2289     0137                     u1145:
  2290     0137  1C03               	skipc
  2291     0138  293A               	goto	u1141
  2292     0139  293B               	goto	u1140
  2293     013A                     u1141:
  2294     013A  2960               	goto	l2344
  2295     013B                     u1140:
  2296     013B                     l2338:
  2297     013B  0020               	movlb	0	; select bank0
  2298     013C  0821               	movf	_controls+1,w
  2299     013D  3A80               	xorlw	128
  2300     013E  00D1               	movwf	??_drive
  2301     013F  3085               	movlw	133
  2302     0140  0251               	subwf	??_drive,w
  2303     0141  1D03               	skipz
  2304     0142  2945               	goto	u1155
  2305     0143  3046               	movlw	70
  2306     0144  0220               	subwf	_controls,w
  2307     0145                     u1155:
  2308     0145  1C03               	skipc
  2309     0146  2948               	goto	u1151
  2310     0147  2949               	goto	u1150
  2311     0148                     u1151:
  2312     0148  2960               	goto	l2344
  2313     0149                     u1150:
  2314     0149                     l2340:
  2315     0149  0020               	movlb	0	; select bank0
  2316     014A  0821               	movf	_controls+1,w
  2317     014B  3A80               	xorlw	128
  2318     014C  00D1               	movwf	??_drive
  2319     014D  3086               	movlw	134
  2320     014E  0251               	subwf	??_drive,w
  2321     014F  1D03               	skipz
  2322     0150  2953               	goto	u1165
  2323     0151  3073               	movlw	115
  2324     0152  0220               	subwf	_controls,w
  2325     0153                     u1165:
  2326     0153  1803               	skipnc
  2327     0154  2956               	goto	u1161
  2328     0155  2957               	goto	u1160
  2329     0156                     u1161:
  2330     0156  2960               	goto	l2344
  2331     0157                     u1160:
  2332     0157                     l2342:
  2333                           
  2334                           ;motorMain.c: 271:         CreateMoveForwardCommmand(power);
  2335     0157  304B               	movlw	75
  2336     0158  0020               	movlb	0	; select bank0
  2337     0159  00CF               	movwf	CreateMoveForwardCommmand@pwm
  2338     015A  3000               	movlw	0
  2339     015B  00D0               	movwf	CreateMoveForwardCommmand@pwm+1
  2340     015C  3187  273C  3180   	fcall	_CreateMoveForwardCommmand
  2341                           
  2342                           ;motorMain.c: 272:     }else if((controls.rightY <= 0x514) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  2343     015F  29D2               	goto	l410
  2344     0160                     l2344:
  2345     0160  0020               	movlb	0	; select bank0
  2346     0161  0823               	movf	_controls+3,w
  2347     0162  3A80               	xorlw	128
  2348     0163  00D1               	movwf	??_drive
  2349     0164  3085               	movlw	133
  2350     0165  0251               	subwf	??_drive,w
  2351     0166  1D03               	skipz
  2352     0167  296A               	goto	u1175
  2353     0168  3015               	movlw	21
  2354     0169  0222               	subwf	_controls+2,w
  2355     016A                     u1175:
  2356     016A  1803               	skipnc
  2357     016B  296D               	goto	u1171
  2358     016C  296E               	goto	u1170
  2359     016D                     u1171:
  2360     016D  2993               	goto	l2352
  2361     016E                     u1170:
  2362     016E                     l2346:
  2363     016E  0020               	movlb	0	; select bank0
  2364     016F  0821               	movf	_controls+1,w
  2365     0170  3A80               	xorlw	128
  2366     0171  00D1               	movwf	??_drive
  2367     0172  3085               	movlw	133
  2368     0173  0251               	subwf	??_drive,w
  2369     0174  1D03               	skipz
  2370     0175  2978               	goto	u1185
  2371     0176  3046               	movlw	70
  2372     0177  0220               	subwf	_controls,w
  2373     0178                     u1185:
  2374     0178  1C03               	skipc
  2375     0179  297B               	goto	u1181
  2376     017A  297C               	goto	u1180
  2377     017B                     u1181:
  2378     017B  2993               	goto	l2352
  2379     017C                     u1180:
  2380     017C                     l2348:
  2381     017C  0020               	movlb	0	; select bank0
  2382     017D  0821               	movf	_controls+1,w
  2383     017E  3A80               	xorlw	128
  2384     017F  00D1               	movwf	??_drive
  2385     0180  3086               	movlw	134
  2386     0181  0251               	subwf	??_drive,w
  2387     0182  1D03               	skipz
  2388     0183  2986               	goto	u1195
  2389     0184  3073               	movlw	115
  2390     0185  0220               	subwf	_controls,w
  2391     0186                     u1195:
  2392     0186  1803               	skipnc
  2393     0187  2989               	goto	u1191
  2394     0188  298A               	goto	u1190
  2395     0189                     u1191:
  2396     0189  2993               	goto	l2352
  2397     018A                     u1190:
  2398     018A                     l2350:
  2399                           
  2400                           ;motorMain.c: 273:         CreateMoveBackwardCommmand(power);
  2401     018A  304B               	movlw	75
  2402     018B  0020               	movlb	0	; select bank0
  2403     018C  00CF               	movwf	CreateMoveBackwardCommmand@pwm
  2404     018D  3000               	movlw	0
  2405     018E  00D0               	movwf	CreateMoveBackwardCommmand@pwm+1
  2406     018F  3187  275B  3180   	fcall	_CreateMoveBackwardCommmand
  2407                           
  2408                           ;motorMain.c: 274:     }else if((controls.rightY >= 0x546 && controls.rightY <= 0x672) &
      +                          & (controls.rightX >= 0x546 && controls.rightX <= 0x672)){
  2409     0192  29D2               	goto	l410
  2410     0193                     l2352:
  2411     0193  0020               	movlb	0	; select bank0
  2412     0194  0823               	movf	_controls+3,w
  2413     0195  3A80               	xorlw	128
  2414     0196  00D1               	movwf	??_drive
  2415     0197  3085               	movlw	133
  2416     0198  0251               	subwf	??_drive,w
  2417     0199  1D03               	skipz
  2418     019A  299D               	goto	u1205
  2419     019B  3046               	movlw	70
  2420     019C  0222               	subwf	_controls+2,w
  2421     019D                     u1205:
  2422     019D  1C03               	skipc
  2423     019E  29A0               	goto	u1201
  2424     019F  29A1               	goto	u1200
  2425     01A0                     u1201:
  2426     01A0  29CF               	goto	l2362
  2427     01A1                     u1200:
  2428     01A1                     l2354:
  2429     01A1  0020               	movlb	0	; select bank0
  2430     01A2  0823               	movf	_controls+3,w
  2431     01A3  3A80               	xorlw	128
  2432     01A4  00D1               	movwf	??_drive
  2433     01A5  3086               	movlw	134
  2434     01A6  0251               	subwf	??_drive,w
  2435     01A7  1D03               	skipz
  2436     01A8  29AB               	goto	u1215
  2437     01A9  3073               	movlw	115
  2438     01AA  0222               	subwf	_controls+2,w
  2439     01AB                     u1215:
  2440     01AB  1803               	skipnc
  2441     01AC  29AE               	goto	u1211
  2442     01AD  29AF               	goto	u1210
  2443     01AE                     u1211:
  2444     01AE  29CF               	goto	l2362
  2445     01AF                     u1210:
  2446     01AF                     l2356:
  2447     01AF  0020               	movlb	0	; select bank0
  2448     01B0  0821               	movf	_controls+1,w
  2449     01B1  3A80               	xorlw	128
  2450     01B2  00D1               	movwf	??_drive
  2451     01B3  3085               	movlw	133
  2452     01B4  0251               	subwf	??_drive,w
  2453     01B5  1D03               	skipz
  2454     01B6  29B9               	goto	u1225
  2455     01B7  3046               	movlw	70
  2456     01B8  0220               	subwf	_controls,w
  2457     01B9                     u1225:
  2458     01B9  1C03               	skipc
  2459     01BA  29BC               	goto	u1221
  2460     01BB  29BD               	goto	u1220
  2461     01BC                     u1221:
  2462     01BC  29CF               	goto	l2362
  2463     01BD                     u1220:
  2464     01BD                     l2358:
  2465     01BD  0020               	movlb	0	; select bank0
  2466     01BE  0821               	movf	_controls+1,w
  2467     01BF  3A80               	xorlw	128
  2468     01C0  00D1               	movwf	??_drive
  2469     01C1  3086               	movlw	134
  2470     01C2  0251               	subwf	??_drive,w
  2471     01C3  1D03               	skipz
  2472     01C4  29C7               	goto	u1235
  2473     01C5  3073               	movlw	115
  2474     01C6  0220               	subwf	_controls,w
  2475     01C7                     u1235:
  2476     01C7  1803               	skipnc
  2477     01C8  29CA               	goto	u1231
  2478     01C9  29CB               	goto	u1230
  2479     01CA                     u1231:
  2480     01CA  29CF               	goto	l2362
  2481     01CB                     u1230:
  2482     01CB                     l2360:
  2483                           
  2484                           ;motorMain.c: 275:         CreateBreak();
  2485     01CB  3187  27C9  3180   	fcall	_CreateBreak
  2486                           
  2487                           ;motorMain.c: 276:     }
  2488     01CE  29D2               	goto	l410
  2489     01CF                     l2362:
  2490                           
  2491                           ;motorMain.c: 278:         CreateControlsCommand();
  2492     01CF  3187  277A  3180   	fcall	_CreateControlsCommand
  2493     01D2                     l410:
  2494     01D2  0008               	return
  2495     01D3                     __end_of_drive:
  2496                           
  2497                           	psect	text2
  2498     06FE                     __ptext2:	
  2499 ;; *************** function _CreateTurnRightCommmand *****************
  2500 ;; Defined at:
  2501 ;;		line 282 in file "motorMain.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  pwm             2    0[BANK0 ] unsigned int 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;		None
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      void 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2515 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2519 ;;Total ram usage:        2 bytes
  2520 ;; Hardware stack levels used: 1
  2521 ;; Hardware stack levels required when called: 2
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_drive
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529     06FE                     _CreateTurnRightCommmand:	
  2530                           ;psect for function _CreateTurnRightCommmand
  2531                           
  2532     06FE                     l2172:	
  2533                           ;incstack = 0
  2534                           ; Regs used in _CreateTurnRightCommmand: [wreg+status,2]
  2535                           
  2536                           
  2537                           ;motorMain.c: 283:     currentCommand.sendId = 3;
  2538     06FE  3003               	movlw	3
  2539     06FF  0020               	movlb	0	; select bank0
  2540     0700  00BA               	movwf	_currentCommand+4
  2541     0701  3000               	movlw	0
  2542     0702  00BB               	movwf	_currentCommand+5
  2543     0703                     l2174:
  2544                           
  2545                           ;motorMain.c: 284:     currentCommand.sendIt = 0;
  2546     0703  01B8               	clrf	_currentCommand+2
  2547     0704  01B9               	clrf	_currentCommand+3
  2548     0705                     l2176:
  2549                           
  2550                           ;motorMain.c: 285:     currentCommand.sendLimit = 10;
  2551     0705  300A               	movlw	10
  2552     0706  00B6               	movwf	_currentCommand
  2553     0707  3000               	movlw	0
  2554     0708  00B7               	movwf	_currentCommand+1
  2555                           
  2556                           ;motorMain.c: 286:     currentCommand.receiveId = 0;
  2557     0709  01C1               	clrf	_currentCommand+11
  2558     070A  01C2               	clrf	_currentCommand+12
  2559                           
  2560                           ;motorMain.c: 287:     currentCommand.receiveLimit = 0;
  2561     070B  01BF               	clrf	_currentCommand+9
  2562     070C  01C0               	clrf	_currentCommand+10
  2563                           
  2564                           ;motorMain.c: 288:     currentCommand.receiveIt = 0;
  2565     070D  01BD               	clrf	_currentCommand+7
  2566     070E  01BE               	clrf	_currentCommand+8
  2567                           
  2568                           ;motorMain.c: 289:     currentCommand.done = 0;
  2569     070F  01C3               	clrf	_currentCommand+13
  2570     0710                     l2178:
  2571                           
  2572                           ;motorMain.c: 291:     TurnRightCommand[7] = pwm;
  2573     0710  084F               	movf	CreateTurnRightCommmand@pwm,w
  2574     0711  0021               	movlb	1	; select bank1
  2575     0712  00CC               	movwf	(_TurnRightCommand^(0+128)+7)
  2576     0713                     l2180:
  2577                           
  2578                           ;motorMain.c: 292:     TurnRightCommand[9] = pwm;
  2579     0713  0020               	movlb	0	; select bank0
  2580     0714  084F               	movf	CreateTurnRightCommmand@pwm,w
  2581     0715  0021               	movlb	1	; select bank1
  2582     0716  00CE               	movwf	(_TurnRightCommand^(0+128)+9)
  2583     0717                     l2182:
  2584                           
  2585                           ;motorMain.c: 293:     currentCommand.toSend = TurnRightCommand;
  2586     0717  30C5               	movlw	(low (_TurnRightCommand| 0))& (0+255)
  2587     0718  0020               	movlb	0	; select bank0
  2588     0719  00BC               	movwf	low ((_currentCommand| 0+6))
  2589     071A                     l2184:
  2590                           
  2591                           ;motorMain.c: 294:     PIE3bits.TXIE = 1;
  2592     071A  002E               	movlb	14	; select bank14
  2593     071B  1619               	bsf	25,4	;volatile
  2594     071C                     l413:
  2595     071C  0008               	return
  2596     071D                     __end_of_CreateTurnRightCommmand:
  2597                           
  2598                           	psect	text3
  2599     071D                     __ptext3:	
  2600 ;; *************** function _CreateTurnLeftCommmand *****************
  2601 ;; Defined at:
  2602 ;;		line 297 in file "motorMain.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;  pwm             2    0[BANK0 ] unsigned int 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2620 ;;Total ram usage:        2 bytes
  2621 ;; Hardware stack levels used: 1
  2622 ;; Hardware stack levels required when called: 2
  2623 ;; This function calls:
  2624 ;;		Nothing
  2625 ;; This function is called by:
  2626 ;;		_drive
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630     071D                     _CreateTurnLeftCommmand:	
  2631                           ;psect for function _CreateTurnLeftCommmand
  2632                           
  2633     071D                     l2186:	
  2634                           ;incstack = 0
  2635                           ; Regs used in _CreateTurnLeftCommmand: [wreg+status,2]
  2636                           
  2637                           
  2638                           ;motorMain.c: 298:     currentCommand.sendId = 4;
  2639     071D  3004               	movlw	4
  2640     071E  0020               	movlb	0	; select bank0
  2641     071F  00BA               	movwf	_currentCommand+4
  2642     0720  3000               	movlw	0
  2643     0721  00BB               	movwf	_currentCommand+5
  2644     0722                     l2188:
  2645                           
  2646                           ;motorMain.c: 299:     currentCommand.sendIt = 0;
  2647     0722  01B8               	clrf	_currentCommand+2
  2648     0723  01B9               	clrf	_currentCommand+3
  2649     0724                     l2190:
  2650                           
  2651                           ;motorMain.c: 300:     currentCommand.sendLimit = 10;
  2652     0724  300A               	movlw	10
  2653     0725  00B6               	movwf	_currentCommand
  2654     0726  3000               	movlw	0
  2655     0727  00B7               	movwf	_currentCommand+1
  2656                           
  2657                           ;motorMain.c: 301:     currentCommand.receiveId = 0;
  2658     0728  01C1               	clrf	_currentCommand+11
  2659     0729  01C2               	clrf	_currentCommand+12
  2660                           
  2661                           ;motorMain.c: 302:     currentCommand.receiveLimit = 0;
  2662     072A  01BF               	clrf	_currentCommand+9
  2663     072B  01C0               	clrf	_currentCommand+10
  2664                           
  2665                           ;motorMain.c: 303:     currentCommand.receiveIt = 0;
  2666     072C  01BD               	clrf	_currentCommand+7
  2667     072D  01BE               	clrf	_currentCommand+8
  2668                           
  2669                           ;motorMain.c: 304:     currentCommand.done = 0;
  2670     072E  01C3               	clrf	_currentCommand+13
  2671     072F                     l2192:
  2672                           
  2673                           ;motorMain.c: 306:     TurnLeftCommand[7] = pwm;
  2674     072F  084F               	movf	CreateTurnLeftCommmand@pwm,w
  2675     0730  0021               	movlb	1	; select bank1
  2676     0731  00D6               	movwf	(_TurnLeftCommand^(0+128)+7)
  2677     0732                     l2194:
  2678                           
  2679                           ;motorMain.c: 307:     TurnLeftCommand[9] = pwm;
  2680     0732  0020               	movlb	0	; select bank0
  2681     0733  084F               	movf	CreateTurnLeftCommmand@pwm,w
  2682     0734  0021               	movlb	1	; select bank1
  2683     0735  00D8               	movwf	(_TurnLeftCommand^(0+128)+9)
  2684     0736                     l2196:
  2685                           
  2686                           ;motorMain.c: 308:     currentCommand.toSend = TurnLeftCommand;
  2687     0736  30CF               	movlw	(low (_TurnLeftCommand| 0))& (0+255)
  2688     0737  0020               	movlb	0	; select bank0
  2689     0738  00BC               	movwf	low ((_currentCommand| 0+6))
  2690     0739                     l2198:
  2691                           
  2692                           ;motorMain.c: 309:     PIE3bits.TXIE = 1;
  2693     0739  002E               	movlb	14	; select bank14
  2694     073A  1619               	bsf	25,4	;volatile
  2695     073B                     l416:
  2696     073B  0008               	return
  2697     073C                     __end_of_CreateTurnLeftCommmand:
  2698                           
  2699                           	psect	text4
  2700     073C                     __ptext4:	
  2701 ;; *************** function _CreateMoveForwardCommmand *****************
  2702 ;; Defined at:
  2703 ;;		line 312 in file "motorMain.c"
  2704 ;; Parameters:    Size  Location     Type
  2705 ;;  pwm             2    0[BANK0 ] unsigned int 
  2706 ;; Auto vars:     Size  Location     Type
  2707 ;;		None
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, status,2
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2717 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2721 ;;Total ram usage:        2 bytes
  2722 ;; Hardware stack levels used: 1
  2723 ;; Hardware stack levels required when called: 2
  2724 ;; This function calls:
  2725 ;;		Nothing
  2726 ;; This function is called by:
  2727 ;;		_drive
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731     073C                     _CreateMoveForwardCommmand:	
  2732                           ;psect for function _CreateMoveForwardCommmand
  2733                           
  2734     073C                     l2200:	
  2735                           ;incstack = 0
  2736                           ; Regs used in _CreateMoveForwardCommmand: [wreg+status,2]
  2737                           
  2738                           
  2739                           ;motorMain.c: 313:     currentCommand.sendId = 5;
  2740     073C  3005               	movlw	5
  2741     073D  0020               	movlb	0	; select bank0
  2742     073E  00BA               	movwf	_currentCommand+4
  2743     073F  3000               	movlw	0
  2744     0740  00BB               	movwf	_currentCommand+5
  2745     0741                     l2202:
  2746                           
  2747                           ;motorMain.c: 314:     currentCommand.sendIt = 0;
  2748     0741  01B8               	clrf	_currentCommand+2
  2749     0742  01B9               	clrf	_currentCommand+3
  2750     0743                     l2204:
  2751                           
  2752                           ;motorMain.c: 315:     currentCommand.sendLimit = 10;
  2753     0743  300A               	movlw	10
  2754     0744  00B6               	movwf	_currentCommand
  2755     0745  3000               	movlw	0
  2756     0746  00B7               	movwf	_currentCommand+1
  2757                           
  2758                           ;motorMain.c: 316:     currentCommand.receiveId = 0;
  2759     0747  01C1               	clrf	_currentCommand+11
  2760     0748  01C2               	clrf	_currentCommand+12
  2761                           
  2762                           ;motorMain.c: 317:     currentCommand.receiveLimit = 0;
  2763     0749  01BF               	clrf	_currentCommand+9
  2764     074A  01C0               	clrf	_currentCommand+10
  2765                           
  2766                           ;motorMain.c: 318:     currentCommand.receiveIt = 0;
  2767     074B  01BD               	clrf	_currentCommand+7
  2768     074C  01BE               	clrf	_currentCommand+8
  2769                           
  2770                           ;motorMain.c: 319:     currentCommand.done = 0;
  2771     074D  01C3               	clrf	_currentCommand+13
  2772     074E                     l2206:
  2773                           
  2774                           ;motorMain.c: 321:     MoveForwardCommand[7] = pwm;
  2775     074E  084F               	movf	CreateMoveForwardCommmand@pwm,w
  2776     074F  0021               	movlb	1	; select bank1
  2777     0750  00C2               	movwf	(_MoveForwardCommand^(0+128)+7)
  2778     0751                     l2208:
  2779                           
  2780                           ;motorMain.c: 322:     MoveForwardCommand[9] = pwm;
  2781     0751  0020               	movlb	0	; select bank0
  2782     0752  084F               	movf	CreateMoveForwardCommmand@pwm,w
  2783     0753  0021               	movlb	1	; select bank1
  2784     0754  00C4               	movwf	(_MoveForwardCommand^(0+128)+9)
  2785     0755                     l2210:
  2786                           
  2787                           ;motorMain.c: 323:     currentCommand.toSend = MoveForwardCommand;
  2788     0755  30BB               	movlw	(low (_MoveForwardCommand| 0))& (0+255)
  2789     0756  0020               	movlb	0	; select bank0
  2790     0757  00BC               	movwf	low ((_currentCommand| 0+6))
  2791     0758                     l2212:
  2792                           
  2793                           ;motorMain.c: 324:     PIE3bits.TXIE = 1;
  2794     0758  002E               	movlb	14	; select bank14
  2795     0759  1619               	bsf	25,4	;volatile
  2796     075A                     l419:
  2797     075A  0008               	return
  2798     075B                     __end_of_CreateMoveForwardCommmand:
  2799                           
  2800                           	psect	text5
  2801     075B                     __ptext5:	
  2802 ;; *************** function _CreateMoveBackwardCommmand *****************
  2803 ;; Defined at:
  2804 ;;		line 327 in file "motorMain.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  pwm             2    0[BANK0 ] unsigned int 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;		None
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  1    wreg      void 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2818 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2821 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2822 ;;Total ram usage:        2 bytes
  2823 ;; Hardware stack levels used: 1
  2824 ;; Hardware stack levels required when called: 2
  2825 ;; This function calls:
  2826 ;;		Nothing
  2827 ;; This function is called by:
  2828 ;;		_drive
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832     075B                     _CreateMoveBackwardCommmand:	
  2833                           ;psect for function _CreateMoveBackwardCommmand
  2834                           
  2835     075B                     l2214:	
  2836                           ;incstack = 0
  2837                           ; Regs used in _CreateMoveBackwardCommmand: [wreg+status,2]
  2838                           
  2839                           
  2840                           ;motorMain.c: 328:     currentCommand.sendId = 6;
  2841     075B  3006               	movlw	6
  2842     075C  0020               	movlb	0	; select bank0
  2843     075D  00BA               	movwf	_currentCommand+4
  2844     075E  3000               	movlw	0
  2845     075F  00BB               	movwf	_currentCommand+5
  2846     0760                     l2216:
  2847                           
  2848                           ;motorMain.c: 329:     currentCommand.sendIt = 0;
  2849     0760  01B8               	clrf	_currentCommand+2
  2850     0761  01B9               	clrf	_currentCommand+3
  2851     0762                     l2218:
  2852                           
  2853                           ;motorMain.c: 330:     currentCommand.sendLimit = 10;
  2854     0762  300A               	movlw	10
  2855     0763  00B6               	movwf	_currentCommand
  2856     0764  3000               	movlw	0
  2857     0765  00B7               	movwf	_currentCommand+1
  2858                           
  2859                           ;motorMain.c: 331:     currentCommand.receiveId = 0;
  2860     0766  01C1               	clrf	_currentCommand+11
  2861     0767  01C2               	clrf	_currentCommand+12
  2862                           
  2863                           ;motorMain.c: 332:     currentCommand.receiveLimit = 0;
  2864     0768  01BF               	clrf	_currentCommand+9
  2865     0769  01C0               	clrf	_currentCommand+10
  2866                           
  2867                           ;motorMain.c: 333:     currentCommand.receiveIt = 0;
  2868     076A  01BD               	clrf	_currentCommand+7
  2869     076B  01BE               	clrf	_currentCommand+8
  2870                           
  2871                           ;motorMain.c: 334:     currentCommand.done = 0;
  2872     076C  01C3               	clrf	_currentCommand+13
  2873     076D                     l2220:
  2874                           
  2875                           ;motorMain.c: 336:     MoveBackwardCommand[7] = pwm;
  2876     076D  084F               	movf	CreateMoveBackwardCommmand@pwm,w
  2877     076E  0021               	movlb	1	; select bank1
  2878     076F  00B8               	movwf	(_MoveBackwardCommand^(0+128)+7)
  2879     0770                     l2222:
  2880                           
  2881                           ;motorMain.c: 337:     MoveBackwardCommand[9] = pwm;
  2882     0770  0020               	movlb	0	; select bank0
  2883     0771  084F               	movf	CreateMoveBackwardCommmand@pwm,w
  2884     0772  0021               	movlb	1	; select bank1
  2885     0773  00BA               	movwf	(_MoveBackwardCommand^(0+128)+9)
  2886     0774                     l2224:
  2887                           
  2888                           ;motorMain.c: 338:     currentCommand.toSend = MoveBackwardCommand;
  2889     0774  30B1               	movlw	(low (_MoveBackwardCommand| 0))& (0+255)
  2890     0775  0020               	movlb	0	; select bank0
  2891     0776  00BC               	movwf	low ((_currentCommand| 0+6))
  2892     0777                     l2226:
  2893                           
  2894                           ;motorMain.c: 339:     PIE3bits.TXIE = 1;
  2895     0777  002E               	movlb	14	; select bank14
  2896     0778  1619               	bsf	25,4	;volatile
  2897     0779                     l422:
  2898     0779  0008               	return
  2899     077A                     __end_of_CreateMoveBackwardCommmand:
  2900                           
  2901                           	psect	text6
  2902     077A                     __ptext6:	
  2903 ;; *************** function _CreateControlsCommand *****************
  2904 ;; Defined at:
  2905 ;;		line 355 in file "motorMain.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used: 1
  2925 ;; Hardware stack levels required when called: 2
  2926 ;; This function calls:
  2927 ;;		Nothing
  2928 ;; This function is called by:
  2929 ;;		_main
  2930 ;;		_drive
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934     077A                     _CreateControlsCommand:	
  2935                           ;psect for function _CreateControlsCommand
  2936                           
  2937     077A                     l2158:	
  2938                           ;incstack = 0
  2939                           ; Regs used in _CreateControlsCommand: [wreg+status,2]
  2940                           
  2941                           
  2942                           ;motorMain.c: 356:     currentCommand.receiveId = CONTROL_INPUT;
  2943     077A  3001               	movlw	1
  2944     077B  0020               	movlb	0	; select bank0
  2945     077C  00C1               	movwf	_currentCommand+11
  2946     077D  3000               	movlw	0
  2947     077E  00C2               	movwf	_currentCommand+12
  2948                           
  2949                           ;motorMain.c: 357:     currentCommand.receiveLimit = 26;
  2950     077F  301A               	movlw	26
  2951     0780  00BF               	movwf	_currentCommand+9
  2952     0781  3000               	movlw	0
  2953     0782  00C0               	movwf	_currentCommand+10
  2954     0783                     l2160:
  2955                           
  2956                           ;motorMain.c: 358:     currentCommand.receiveIt = 0;
  2957     0783  01BD               	clrf	_currentCommand+7
  2958     0784  01BE               	clrf	_currentCommand+8
  2959     0785                     l2162:
  2960                           
  2961                           ;motorMain.c: 359:     currentCommand.sendId = CONTROL_OUTPUT;
  2962     0785  3001               	movlw	1
  2963     0786  00BA               	movwf	_currentCommand+4
  2964     0787  3000               	movlw	0
  2965     0788  00BB               	movwf	_currentCommand+5
  2966     0789                     l2164:
  2967                           
  2968                           ;motorMain.c: 360:     currentCommand.toSend = (unsigned char*) GetUserDataCommand;
  2969     0789  30D9               	movlw	(low (_GetUserDataCommand| 0))& (0+255)
  2970     078A  00BC               	movwf	low ((_currentCommand| 0+6))
  2971     078B                     l2166:
  2972                           
  2973                           ;motorMain.c: 361:     currentCommand.sendIt = 0;
  2974     078B  01B8               	clrf	_currentCommand+2
  2975     078C  01B9               	clrf	_currentCommand+3
  2976                           
  2977                           ;motorMain.c: 362:     currentCommand.sendLimit = 6;
  2978     078D  3006               	movlw	6
  2979     078E  00B6               	movwf	_currentCommand
  2980     078F  3000               	movlw	0
  2981     0790  00B7               	movwf	_currentCommand+1
  2982     0791                     l2168:
  2983                           
  2984                           ;motorMain.c: 363:     currentCommand.done = 0;
  2985     0791  01C3               	clrf	_currentCommand+13
  2986     0792                     l2170:
  2987                           
  2988                           ;motorMain.c: 364:     PIE3bits.TXIE = 1;
  2989     0792  002E               	movlb	14	; select bank14
  2990     0793  1619               	bsf	25,4	;volatile
  2991     0794                     l428:
  2992     0794  0008               	return
  2993     0795                     __end_of_CreateControlsCommand:
  2994                           
  2995                           	psect	text7
  2996     07C9                     __ptext7:	
  2997 ;; *************** function _CreateBreak *****************
  2998 ;; Defined at:
  2999 ;;		line 342 in file "motorMain.c"
  3000 ;; Parameters:    Size  Location     Type
  3001 ;;		None
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;		None
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  1    wreg      void 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3016 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3017 ;;Total ram usage:        0 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; Hardware stack levels required when called: 2
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_drive
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027     07C9                     _CreateBreak:	
  3028                           ;psect for function _CreateBreak
  3029                           
  3030     07C9                     l2228:	
  3031                           ;incstack = 0
  3032                           ; Regs used in _CreateBreak: [wreg+status,2]
  3033                           
  3034                           
  3035                           ;motorMain.c: 343:     currentCommand.sendId = 7;
  3036     07C9  3007               	movlw	7
  3037     07CA  0020               	movlb	0	; select bank0
  3038     07CB  00BA               	movwf	_currentCommand+4
  3039     07CC  3000               	movlw	0
  3040     07CD  00BB               	movwf	_currentCommand+5
  3041     07CE                     l2230:
  3042                           
  3043                           ;motorMain.c: 344:     currentCommand.sendIt = 0;
  3044     07CE  01B8               	clrf	_currentCommand+2
  3045     07CF  01B9               	clrf	_currentCommand+3
  3046     07D0                     l2232:
  3047                           
  3048                           ;motorMain.c: 345:     currentCommand.sendLimit = 10;
  3049     07D0  300A               	movlw	10
  3050     07D1  00B6               	movwf	_currentCommand
  3051     07D2  3000               	movlw	0
  3052     07D3  00B7               	movwf	_currentCommand+1
  3053                           
  3054                           ;motorMain.c: 346:     currentCommand.receiveId = 0;
  3055     07D4  01C1               	clrf	_currentCommand+11
  3056     07D5  01C2               	clrf	_currentCommand+12
  3057                           
  3058                           ;motorMain.c: 347:     currentCommand.receiveLimit = 0;
  3059     07D6  01BF               	clrf	_currentCommand+9
  3060     07D7  01C0               	clrf	_currentCommand+10
  3061                           
  3062                           ;motorMain.c: 348:     currentCommand.receiveIt = 0;
  3063     07D8  01BD               	clrf	_currentCommand+7
  3064     07D9  01BE               	clrf	_currentCommand+8
  3065                           
  3066                           ;motorMain.c: 349:     currentCommand.done = 0;
  3067     07DA  01C3               	clrf	_currentCommand+13
  3068     07DB                     l2234:
  3069                           
  3070                           ;motorMain.c: 351:     currentCommand.toSend = Break;
  3071     07DB  30A7               	movlw	(low (_Break| 0))& (0+255)
  3072     07DC  00BC               	movwf	low ((_currentCommand| 0+6))
  3073     07DD                     l2236:
  3074                           
  3075                           ;motorMain.c: 352:     PIE3bits.TXIE = 1;
  3076     07DD  002E               	movlb	14	; select bank14
  3077     07DE  1619               	bsf	25,4	;volatile
  3078     07DF                     l425:
  3079     07DF  0008               	return
  3080     07E0                     __end_of_CreateBreak:
  3081                           
  3082                           	psect	text8
  3083     0F99                     __ptext8:	
  3084 ;; *************** function _SetUpPumpArm *****************
  3085 ;; Defined at:
  3086 ;;		line 369 in file "motorMain.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;		None
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		None
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3104 ;;Total ram usage:        0 bytes
  3105 ;; Hardware stack levels used: 1
  3106 ;; Hardware stack levels required when called: 2
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114     0F99                     _SetUpPumpArm:	
  3115                           ;psect for function _SetUpPumpArm
  3116                           
  3117     0F99                     l2302:	
  3118                           ;incstack = 0
  3119                           ; Regs used in _SetUpPumpArm: []
  3120                           
  3121                           
  3122                           ;motorMain.c: 372:     TRISBbits.TRISB0 = 0;
  3123     0F99  0020               	movlb	0	; select bank0
  3124     0F9A  1012               	bcf	18,0	;volatile
  3125                           
  3126                           ;motorMain.c: 373:     TRISBbits.TRISB1 = 0;
  3127     0F9B  1092               	bcf	18,1	;volatile
  3128                           
  3129                           ;motorMain.c: 374:     ANSELBbits.ANSB0 = 0;
  3130     0F9C  003E               	movlb	30	; select bank30
  3131     0F9D  1043               	bcf	67,0	;volatile
  3132                           
  3133                           ;motorMain.c: 375:     ANSELBbits.ANSB1 = 0;
  3134     0F9E  10C3               	bcf	67,1	;volatile
  3135                           
  3136                           ;motorMain.c: 377:     LATBbits.LATB0 = 0;
  3137     0F9F  0020               	movlb	0	; select bank0
  3138     0FA0  1017               	bcf	23,0	;volatile
  3139                           
  3140                           ;motorMain.c: 378:     LATBbits.LATB1 = 0;
  3141     0FA1  1097               	bcf	23,1	;volatile
  3142     0FA2                     l431:
  3143     0FA2  0008               	return
  3144     0FA3                     __end_of_SetUpPumpArm:
  3145                           
  3146                           	psect	text9
  3147     0F8F                     __ptext9:	
  3148 ;; *************** function _SetUpPump *****************
  3149 ;; Defined at:
  3150 ;;		line 382 in file "motorMain.c"
  3151 ;; Parameters:    Size  Location     Type
  3152 ;;		None
  3153 ;; Auto vars:     Size  Location     Type
  3154 ;;		None
  3155 ;; Return value:  Size  Location     Type
  3156 ;;                  1    wreg      void 
  3157 ;; Registers used:
  3158 ;;		None
  3159 ;; Tracked objects:
  3160 ;;		On entry : 0/0
  3161 ;;		On exit  : 0/0
  3162 ;;		Unchanged: 0/0
  3163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;Total ram usage:        0 bytes
  3169 ;; Hardware stack levels used: 1
  3170 ;; Hardware stack levels required when called: 2
  3171 ;; This function calls:
  3172 ;;		Nothing
  3173 ;; This function is called by:
  3174 ;;		_main
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178     0F8F                     _SetUpPump:	
  3179                           ;psect for function _SetUpPump
  3180                           
  3181     0F8F                     l2304:	
  3182                           ;incstack = 0
  3183                           ; Regs used in _SetUpPump: []
  3184                           
  3185                           
  3186                           ;motorMain.c: 385:     TRISBbits.TRISB2 = 0;
  3187     0F8F  0020               	movlb	0	; select bank0
  3188     0F90  1112               	bcf	18,2	;volatile
  3189                           
  3190                           ;motorMain.c: 386:     TRISBbits.TRISB3 = 0;
  3191     0F91  1192               	bcf	18,3	;volatile
  3192                           
  3193                           ;motorMain.c: 387:     ANSELBbits.ANSB2 = 0;
  3194     0F92  003E               	movlb	30	; select bank30
  3195     0F93  1143               	bcf	67,2	;volatile
  3196                           
  3197                           ;motorMain.c: 388:     ANSELBbits.ANSB3 = 0;
  3198     0F94  11C3               	bcf	67,3	;volatile
  3199                           
  3200                           ;motorMain.c: 390:     LATBbits.LATB2 = 0;
  3201     0F95  0020               	movlb	0	; select bank0
  3202     0F96  1117               	bcf	23,2	;volatile
  3203                           
  3204                           ;motorMain.c: 391:     LATBbits.LATB3 = 0;
  3205     0F97  1197               	bcf	23,3	;volatile
  3206     0F98                     l434:
  3207     0F98  0008               	return
  3208     0F99                     __end_of_SetUpPump:
  3209                           
  3210                           	psect	text10
  3211     0578                     __ptext10:	
  3212 ;; *************** function _SetUpColorSensor *****************
  3213 ;; Defined at:
  3214 ;;		line 461 in file "./Color_Header.h"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  result          2    8[BANK0 ] int 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;                  1    wreg      void 
  3221 ;; Registers used:
  3222 ;;		wreg, status,2, status,0, pclath, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3229 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3230 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3231 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3232 ;;Total ram usage:        4 bytes
  3233 ;; Hardware stack levels used: 1
  3234 ;; Hardware stack levels required when called: 4
  3235 ;; This function calls:
  3236 ;;		_SetUp
  3237 ;;		_SetUpI2C
  3238 ;; This function is called by:
  3239 ;;		_main
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243     0578                     _SetUpColorSensor:	
  3244                           ;psect for function _SetUpColorSensor
  3245                           
  3246     0578                     l2238:	
  3247                           ;incstack = 0
  3248                           ; Regs used in _SetUpColorSensor: [wreg+status,2+status,0+pclath+cstack]
  3249                           
  3250                           
  3251                           ;./Color_Header.h: 462:     SetUpI2C();
  3252     0578  318F  2785  3185   	fcall	_SetUpI2C
  3253                           
  3254                           ;./Color_Header.h: 463:     int result = SetUp();
  3255     057B  3185  2513  3185   	fcall	_SetUp
  3256     057E  0020               	movlb	0	; select bank0
  3257     057F  0850               	movf	?_SetUp+1,w
  3258     0580  00D8               	movwf	SetUpColorSensor@result+1
  3259     0581  084F               	movf	?_SetUp,w
  3260     0582  00D7               	movwf	SetUpColorSensor@result
  3261     0583                     l2240:
  3262                           
  3263                           ;./Color_Header.h: 464:     if(result == 1){
  3264     0583  0357               	decf	SetUpColorSensor@result,w
  3265     0584  0458               	iorwf	SetUpColorSensor@result+1,w
  3266     0585  1D03               	btfss	3,2
  3267     0586  2D88               	goto	u961
  3268     0587  2D89               	goto	u960
  3269     0588                     u961:
  3270     0588  2DD0               	goto	l293
  3271     0589                     u960:
  3272     0589                     l2242:
  3273                           
  3274                           ;./Color_Header.h: 465:         LATAbits.LATA0 = 1;
  3275     0589  1416               	bsf	22,0	;volatile
  3276                           
  3277                           ;./Color_Header.h: 466:         LATAbits.LATA1 = 1;
  3278     058A  1496               	bsf	22,1	;volatile
  3279                           
  3280                           ;./Color_Header.h: 467:         LATAbits.LATA2 = 1;
  3281     058B  1516               	bsf	22,2	;volatile
  3282                           
  3283                           ;./Color_Header.h: 468:         LATAbits.LATA3 = 1;
  3284     058C  1596               	bsf	22,3	;volatile
  3285     058D                     l2244:
  3286                           
  3287                           ;./Color_Header.h: 469:         _delay((unsigned long)((500)*(32000000/4000.0)));
  3288     058D  3015               	movlw	21
  3289     058E  0020               	movlb	0	; select bank0
  3290     058F  00D6               	movwf	??_SetUpColorSensor+1
  3291     0590  304B               	movlw	75
  3292     0591  00D5               	movwf	??_SetUpColorSensor
  3293     0592  30BE               	movlw	190
  3294     0593                     u1387:
  3295     0593  0B89               	decfsz	9,f
  3296     0594  2D93               	goto	u1387
  3297     0595  0BD5               	decfsz	??_SetUpColorSensor,f
  3298     0596  2D93               	goto	u1387
  3299     0597  0BD6               	decfsz	??_SetUpColorSensor+1,f
  3300     0598  2D93               	goto	u1387
  3301     0599  0000               	nop
  3302     059A                     l2246:
  3303                           
  3304                           ;./Color_Header.h: 470:         LATAbits.LATA0 = 0;
  3305     059A  0020               	movlb	0	; select bank0
  3306     059B  1016               	bcf	22,0	;volatile
  3307     059C                     l2248:
  3308                           
  3309                           ;./Color_Header.h: 471:         LATAbits.LATA1 = 0;
  3310     059C  1096               	bcf	22,1	;volatile
  3311     059D                     l2250:
  3312                           
  3313                           ;./Color_Header.h: 472:         LATAbits.LATA2 = 0;
  3314     059D  1116               	bcf	22,2	;volatile
  3315     059E                     l2252:
  3316                           
  3317                           ;./Color_Header.h: 473:         LATAbits.LATA3 = 0;
  3318     059E  1196               	bcf	22,3	;volatile
  3319                           
  3320                           ;./Color_Header.h: 474:         _delay((unsigned long)((500)*(32000000/4000.0)));
  3321     059F  3015               	movlw	21
  3322     05A0  0020               	movlb	0	; select bank0
  3323     05A1  00D6               	movwf	??_SetUpColorSensor+1
  3324     05A2  304B               	movlw	75
  3325     05A3  00D5               	movwf	??_SetUpColorSensor
  3326     05A4  30BE               	movlw	190
  3327     05A5                     u1397:
  3328     05A5  0B89               	decfsz	9,f
  3329     05A6  2DA5               	goto	u1397
  3330     05A7  0BD5               	decfsz	??_SetUpColorSensor,f
  3331     05A8  2DA5               	goto	u1397
  3332     05A9  0BD6               	decfsz	??_SetUpColorSensor+1,f
  3333     05AA  2DA5               	goto	u1397
  3334     05AB  0000               	nop
  3335     05AC                     l2254:
  3336                           
  3337                           ;./Color_Header.h: 476:         LATAbits.LATA0 = 1;
  3338     05AC  0020               	movlb	0	; select bank0
  3339     05AD  1416               	bsf	22,0	;volatile
  3340     05AE                     l2256:
  3341                           
  3342                           ;./Color_Header.h: 477:         LATAbits.LATA1 = 1;
  3343     05AE  1496               	bsf	22,1	;volatile
  3344     05AF                     l2258:
  3345                           
  3346                           ;./Color_Header.h: 478:         LATAbits.LATA2 = 1;
  3347     05AF  1516               	bsf	22,2	;volatile
  3348     05B0                     l2260:
  3349                           
  3350                           ;./Color_Header.h: 479:         LATAbits.LATA3 = 1;
  3351     05B0  1596               	bsf	22,3	;volatile
  3352                           
  3353                           ;./Color_Header.h: 480:         _delay((unsigned long)((500)*(32000000/4000.0)));
  3354     05B1  3015               	movlw	21
  3355     05B2  0020               	movlb	0	; select bank0
  3356     05B3  00D6               	movwf	??_SetUpColorSensor+1
  3357     05B4  304B               	movlw	75
  3358     05B5  00D5               	movwf	??_SetUpColorSensor
  3359     05B6  30BE               	movlw	190
  3360     05B7                     u1407:
  3361     05B7  0B89               	decfsz	9,f
  3362     05B8  2DB7               	goto	u1407
  3363     05B9  0BD5               	decfsz	??_SetUpColorSensor,f
  3364     05BA  2DB7               	goto	u1407
  3365     05BB  0BD6               	decfsz	??_SetUpColorSensor+1,f
  3366     05BC  2DB7               	goto	u1407
  3367     05BD  0000               	nop
  3368     05BE                     l2262:
  3369                           
  3370                           ;./Color_Header.h: 481:         LATAbits.LATA0 = 0;
  3371     05BE  0020               	movlb	0	; select bank0
  3372     05BF  1016               	bcf	22,0	;volatile
  3373     05C0                     l2264:
  3374                           
  3375                           ;./Color_Header.h: 482:         LATAbits.LATA1 = 0;
  3376     05C0  1096               	bcf	22,1	;volatile
  3377     05C1                     l2266:
  3378                           
  3379                           ;./Color_Header.h: 483:         LATAbits.LATA2 = 0;
  3380     05C1  1116               	bcf	22,2	;volatile
  3381     05C2                     l2268:
  3382                           
  3383                           ;./Color_Header.h: 484:         LATAbits.LATA3 = 0;
  3384     05C2  1196               	bcf	22,3	;volatile
  3385                           
  3386                           ;./Color_Header.h: 485:         _delay((unsigned long)((500)*(32000000/4000.0)));
  3387     05C3  3015               	movlw	21
  3388     05C4  0020               	movlb	0	; select bank0
  3389     05C5  00D6               	movwf	??_SetUpColorSensor+1
  3390     05C6  304B               	movlw	75
  3391     05C7  00D5               	movwf	??_SetUpColorSensor
  3392     05C8  30BE               	movlw	190
  3393     05C9                     u1417:
  3394     05C9  0B89               	decfsz	9,f
  3395     05CA  2DC9               	goto	u1417
  3396     05CB  0BD5               	decfsz	??_SetUpColorSensor,f
  3397     05CC  2DC9               	goto	u1417
  3398     05CD  0BD6               	decfsz	??_SetUpColorSensor+1,f
  3399     05CE  2DC9               	goto	u1417
  3400     05CF  0000               	nop
  3401     05D0                     l293:
  3402     05D0  0008               	return
  3403     05D1                     __end_of_SetUpColorSensor:
  3404                           
  3405                           	psect	text11
  3406     0F85                     __ptext11:	
  3407 ;; *************** function _SetUpI2C *****************
  3408 ;; Defined at:
  3409 ;;		line 91 in file "./Color_Header.h"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;		None
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0, pclath, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3427 ;;Total ram usage:        0 bytes
  3428 ;; Hardware stack levels used: 1
  3429 ;; Hardware stack levels required when called: 3
  3430 ;; This function calls:
  3431 ;;		_SetUpI2CPins
  3432 ;;		_SetUpIC2Clock
  3433 ;; This function is called by:
  3434 ;;		_SetUpColorSensor
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438     0F85                     _SetUpI2C:	
  3439                           ;psect for function _SetUpI2C
  3440                           
  3441     0F85                     l2090:	
  3442                           ;incstack = 0
  3443                           ; Regs used in _SetUpI2C: [wreg+status,2+status,0+pclath+cstack]
  3444                           
  3445                           
  3446                           ;./Color_Header.h: 92:     SSP1CON1 =0x28;
  3447     0F85  3028               	movlw	40
  3448     0F86  0023               	movlb	3	; select bank3
  3449     0F87  0090               	movwf	16	;volatile
  3450     0F88                     l2092:
  3451                           
  3452                           ;./Color_Header.h: 94:     SetUpI2CPins();
  3453     0F88  3187  27E0  318F   	fcall	_SetUpI2CPins
  3454     0F8B                     l2094:
  3455                           
  3456                           ;./Color_Header.h: 96:     SetUpIC2Clock();
  3457     0F8B  318F  2744  318F   	fcall	_SetUpIC2Clock
  3458     0F8E                     l117:
  3459     0F8E  0008               	return
  3460     0F8F                     __end_of_SetUpI2C:
  3461                           
  3462                           	psect	text12
  3463     0F44                     __ptext12:	
  3464 ;; *************** function _SetUpIC2Clock *****************
  3465 ;; Defined at:
  3466 ;;		line 85 in file "./Color_Header.h"
  3467 ;; Parameters:    Size  Location     Type
  3468 ;;		None
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;		None
  3471 ;; Return value:  Size  Location     Type
  3472 ;;                  1    wreg      void 
  3473 ;; Registers used:
  3474 ;;		wreg
  3475 ;; Tracked objects:
  3476 ;;		On entry : 0/0
  3477 ;;		On exit  : 0/0
  3478 ;;		Unchanged: 0/0
  3479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3484 ;;Total ram usage:        0 bytes
  3485 ;; Hardware stack levels used: 1
  3486 ;; Hardware stack levels required when called: 2
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_SetUpI2C
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494     0F44                     _SetUpIC2Clock:	
  3495                           ;psect for function _SetUpIC2Clock
  3496                           
  3497     0F44                     l1954:	
  3498                           ;incstack = 0
  3499                           ; Regs used in _SetUpIC2Clock: [wreg]
  3500                           
  3501                           
  3502                           ;./Color_Header.h: 89:     SSP1ADD = 79;
  3503     0F44  304F               	movlw	79
  3504     0F45  0023               	movlb	3	; select bank3
  3505     0F46  008D               	movwf	13	;volatile
  3506     0F47                     l114:
  3507     0F47  0008               	return
  3508     0F48                     __end_of_SetUpIC2Clock:
  3509                           
  3510                           	psect	text13
  3511     07E0                     __ptext13:	
  3512 ;; *************** function _SetUpI2CPins *****************
  3513 ;; Defined at:
  3514 ;;		line 68 in file "./Color_Header.h"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;		None
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3532 ;;Total ram usage:        0 bytes
  3533 ;; Hardware stack levels used: 1
  3534 ;; Hardware stack levels required when called: 2
  3535 ;; This function calls:
  3536 ;;		Nothing
  3537 ;; This function is called by:
  3538 ;;		_SetUpI2C
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542     07E0                     _SetUpI2CPins:	
  3543                           ;psect for function _SetUpI2CPins
  3544                           
  3545     07E0                     l1936:	
  3546                           ;incstack = 0
  3547                           ; Regs used in _SetUpI2CPins: [wreg+status,2+status,0]
  3548                           
  3549                           
  3550                           ;./Color_Header.h: 69:     SSP1CLKPPSbits.SSP1CLKPPS = 0x13;
  3551     07E0  003D               	movlb	29	; select bank29
  3552     07E1  0845               	movf	69,w	;volatile
  3553     07E2  39E0               	andlw	-32
  3554     07E3  3813               	iorlw	19
  3555     07E4  00C5               	movwf	69	;volatile
  3556                           
  3557                           ;./Color_Header.h: 70:     SSP1DATPPSbits.SSP1DATPPS = 0x14;
  3558     07E5  0846               	movf	70,w	;volatile
  3559     07E6  39E0               	andlw	-32
  3560     07E7  3814               	iorlw	20
  3561     07E8  00C6               	movwf	70	;volatile
  3562     07E9                     l1938:
  3563                           
  3564                           ;./Color_Header.h: 72:     RC3PPS = 0x14;
  3565     07E9  3014               	movlw	20
  3566     07EA  003E               	movlb	30	; select bank30
  3567     07EB  00A3               	movwf	35	;volatile
  3568     07EC                     l1940:
  3569                           
  3570                           ;./Color_Header.h: 73:     RC4PPS = 0x15;
  3571     07EC  3015               	movlw	21
  3572     07ED  00A4               	movwf	36	;volatile
  3573     07EE                     l1942:
  3574                           
  3575                           ;./Color_Header.h: 76:     TRISCbits.TRISC3 = 1;
  3576     07EE  0020               	movlb	0	; select bank0
  3577     07EF  1593               	bsf	19,3	;volatile
  3578     07F0                     l1944:
  3579                           
  3580                           ;./Color_Header.h: 77:     TRISCbits.TRISC4 = 1;
  3581     07F0  1613               	bsf	19,4	;volatile
  3582     07F1                     l1946:
  3583                           
  3584                           ;./Color_Header.h: 79:     ANSELCbits.ANSC3 = 0;
  3585     07F1  003E               	movlb	30	; select bank30
  3586     07F2  11CE               	bcf	78,3	;volatile
  3587     07F3                     l1948:
  3588                           
  3589                           ;./Color_Header.h: 80:     ANSELCbits.ANSC4 = 0;
  3590     07F3  124E               	bcf	78,4	;volatile
  3591     07F4                     l1950:
  3592                           
  3593                           ;./Color_Header.h: 82:     WPUCbits.WPUC3 = 1;
  3594     07F4  15CF               	bsf	79,3	;volatile
  3595     07F5                     l1952:
  3596                           
  3597                           ;./Color_Header.h: 83:     WPUCbits.WPUC4 = 1;
  3598     07F5  164F               	bsf	79,4	;volatile
  3599     07F6                     l111:
  3600     07F6  0008               	return
  3601     07F7                     __end_of_SetUpI2CPins:
  3602                           
  3603                           	psect	text14
  3604     0513                     __ptext14:	
  3605 ;; *************** function _SetUp *****************
  3606 ;; Defined at:
  3607 ;;		line 176 in file "./Color_Header.h"
  3608 ;; Parameters:    Size  Location     Type
  3609 ;;		None
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  value           2    4[BANK0 ] int 
  3612 ;; Return value:  Size  Location     Type
  3613 ;;                  2    0[BANK0 ] int 
  3614 ;; Registers used:
  3615 ;;		wreg, status,2, status,0, pclath, cstack
  3616 ;; Tracked objects:
  3617 ;;		On entry : 0/0
  3618 ;;		On exit  : 0/0
  3619 ;;		Unchanged: 0/0
  3620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3621 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3622 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3624 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3625 ;;Total ram usage:        6 bytes
  3626 ;; Hardware stack levels used: 1
  3627 ;; Hardware stack levels required when called: 3
  3628 ;; This function calls:
  3629 ;;		_EndIC2Transmission
  3630 ;;		_RepeatedStart
  3631 ;;		_StartIC2Transmission
  3632 ;;		_StartReadRequest
  3633 ;;		_StartWriteRequest
  3634 ;; This function is called by:
  3635 ;;		_SetUpColorSensor
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639     0513                     _SetUp:	
  3640                           ;psect for function _SetUp
  3641                           
  3642     0513                     l2096:	
  3643                           ;incstack = 0
  3644                           ; Regs used in _SetUp: [wreg+status,2+status,0+pclath+cstack]
  3645                           
  3646                           
  3647                           ;./Color_Header.h: 177:     StartIC2Transmission();
  3648     0513  318F  277B  3185   	fcall	_StartIC2Transmission
  3649     0516                     l2098:
  3650                           
  3651                           ;./Color_Header.h: 179:     StartWriteRequest();
  3652     0516  318F  27DD  3185   	fcall	_StartWriteRequest
  3653                           
  3654                           ;./Color_Header.h: 183:     SSP1BUF = 0x80;;
  3655     0519  3080               	movlw	128
  3656     051A  0023               	movlb	3	; select bank3
  3657     051B  008C               	movwf	12	;volatile
  3658     051C                     l174:	
  3659                           ;./Color_Header.h: 185:     while(!PIR3bits.SSP1IF){}
  3660                           
  3661     051C  002E               	movlb	14	; select bank14
  3662     051D  1C0F               	btfss	15,0	;volatile
  3663     051E  2D20               	goto	u881
  3664     051F  2D21               	goto	u880
  3665     0520                     u881:
  3666     0520  2D1C               	goto	l174
  3667     0521                     u880:
  3668     0521                     l177:
  3669     0521  0023               	movlb	3	; select bank3
  3670     0522  1B11               	btfsc	17,6	;volatile
  3671     0523  2D25               	goto	u891
  3672     0524  2D26               	goto	u890
  3673     0525                     u891:
  3674     0525  2D21               	goto	l177
  3675     0526                     u890:
  3676     0526                     l179:
  3677                           
  3678                           ;./Color_Header.h: 187:     PIR3bits.SSP1IF = 0;
  3679     0526  002E               	movlb	14	; select bank14
  3680     0527  100F               	bcf	15,0	;volatile
  3681     0528                     l2100:
  3682                           
  3683                           ;./Color_Header.h: 190:     SSP1BUF = 0b11;;
  3684     0528  3003               	movlw	3
  3685     0529  0023               	movlb	3	; select bank3
  3686     052A  008C               	movwf	12	;volatile
  3687     052B                     l180:	
  3688                           ;./Color_Header.h: 192:     while(!PIR3bits.SSP1IF){}
  3689                           
  3690     052B  002E               	movlb	14	; select bank14
  3691     052C  1C0F               	btfss	15,0	;volatile
  3692     052D  2D2F               	goto	u901
  3693     052E  2D30               	goto	u900
  3694     052F                     u901:
  3695     052F  2D2B               	goto	l180
  3696     0530                     u900:
  3697     0530                     l183:
  3698     0530  0023               	movlb	3	; select bank3
  3699     0531  1B11               	btfsc	17,6	;volatile
  3700     0532  2D34               	goto	u911
  3701     0533  2D35               	goto	u910
  3702     0534                     u911:
  3703     0534  2D30               	goto	l183
  3704     0535                     u910:
  3705     0535                     l185:
  3706                           
  3707                           ;./Color_Header.h: 194:     PIR3bits.SSP1IF = 0;
  3708     0535  002E               	movlb	14	; select bank14
  3709     0536  100F               	bcf	15,0	;volatile
  3710     0537                     l2102:
  3711                           
  3712                           ;./Color_Header.h: 196:     RepeatedStart();
  3713     0537  3187  27F7  3185   	fcall	_RepeatedStart
  3714     053A                     l2104:
  3715                           
  3716                           ;./Color_Header.h: 200:     StartWriteRequest();
  3717     053A  318F  27DD  3185   	fcall	_StartWriteRequest
  3718                           
  3719                           ;./Color_Header.h: 202:     SSP1BUF = 0x92;;
  3720     053D  3092               	movlw	146
  3721     053E  0023               	movlb	3	; select bank3
  3722     053F  008C               	movwf	12	;volatile
  3723     0540                     l186:	
  3724                           ;./Color_Header.h: 203:     while(!PIR3bits.SSP1IF){}
  3725                           
  3726     0540  002E               	movlb	14	; select bank14
  3727     0541  1C0F               	btfss	15,0	;volatile
  3728     0542  2D44               	goto	u921
  3729     0543  2D45               	goto	u920
  3730     0544                     u921:
  3731     0544  2D40               	goto	l186
  3732     0545                     u920:
  3733     0545                     l189:
  3734     0545  0023               	movlb	3	; select bank3
  3735     0546  1B11               	btfsc	17,6	;volatile
  3736     0547  2D49               	goto	u931
  3737     0548  2D4A               	goto	u930
  3738     0549                     u931:
  3739     0549  2D45               	goto	l189
  3740     054A                     u930:
  3741     054A                     l191:
  3742                           
  3743                           ;./Color_Header.h: 205:     PIR3bits.SSP1IF = 0;
  3744     054A  002E               	movlb	14	; select bank14
  3745     054B  100F               	bcf	15,0	;volatile
  3746     054C                     l2106:
  3747                           
  3748                           ;./Color_Header.h: 208:     RepeatedStart();
  3749     054C  3187  27F7  3185   	fcall	_RepeatedStart
  3750     054F                     l2108:
  3751                           
  3752                           ;./Color_Header.h: 211:     StartReadRequest();
  3753     054F  318F  27CD  3185   	fcall	_StartReadRequest
  3754     0552                     l2110:
  3755                           
  3756                           ;./Color_Header.h: 213:     SSP1CON2bits.RCEN = 1;
  3757     0552  0023               	movlb	3	; select bank3
  3758     0553  1591               	bsf	17,3	;volatile
  3759     0554                     l192:	
  3760                           ;./Color_Header.h: 214:     while(!PIR3bits.SSP1IF){}
  3761                           
  3762     0554  002E               	movlb	14	; select bank14
  3763     0555  1C0F               	btfss	15,0	;volatile
  3764     0556  2D58               	goto	u941
  3765     0557  2D59               	goto	u940
  3766     0558                     u941:
  3767     0558  2D54               	goto	l192
  3768     0559                     u940:
  3769     0559                     l194:
  3770                           
  3771                           ;./Color_Header.h: 215:     PIR3bits.SSP1IF = 0;
  3772     0559  100F               	bcf	15,0	;volatile
  3773     055A                     l2112:
  3774                           
  3775                           ;./Color_Header.h: 216:     int value = SSP1BUF;
  3776     055A  0023               	movlb	3	; select bank3
  3777     055B  080C               	movf	12,w	;volatile
  3778     055C  0020               	movlb	0	; select bank0
  3779     055D  00D1               	movwf	??_SetUp
  3780     055E  01D2               	clrf	??_SetUp+1
  3781     055F  0851               	movf	??_SetUp,w
  3782     0560  00D3               	movwf	SetUp@value
  3783     0561  0852               	movf	??_SetUp+1,w
  3784     0562  00D4               	movwf	SetUp@value+1
  3785     0563                     l2114:
  3786                           
  3787                           ;./Color_Header.h: 217:     SSP1CON2bits.ACKDT = 0;
  3788     0563  0023               	movlb	3	; select bank3
  3789     0564  1291               	bcf	17,5	;volatile
  3790     0565                     l2116:
  3791                           
  3792                           ;./Color_Header.h: 219:     EndIC2Transmission();
  3793     0565  318F  2772  3185   	fcall	_EndIC2Transmission
  3794     0568                     l2118:
  3795                           
  3796                           ;./Color_Header.h: 220:     if(value == 0xAB){
  3797     0568  30AB               	movlw	171
  3798     0569  0020               	movlb	0	; select bank0
  3799     056A  0653               	xorwf	SetUp@value,w
  3800     056B  0454               	iorwf	SetUp@value+1,w
  3801     056C  1D03               	btfss	3,2
  3802     056D  2D6F               	goto	u951
  3803     056E  2D70               	goto	u950
  3804     056F                     u951:
  3805     056F  2D75               	goto	l2124
  3806     0570                     u950:
  3807     0570                     l2120:
  3808                           
  3809                           ;./Color_Header.h: 221:         return 1;
  3810     0570  3001               	movlw	1
  3811     0571  00CF               	movwf	?_SetUp
  3812     0572  3000               	movlw	0
  3813     0573  00D0               	movwf	?_SetUp+1
  3814     0574  2D77               	goto	l196
  3815     0575                     l2124:
  3816                           
  3817                           ;./Color_Header.h: 223:     return 0;
  3818     0575  01CF               	clrf	?_SetUp
  3819     0576  01D0               	clrf	?_SetUp+1
  3820     0577                     l196:
  3821     0577  0008               	return
  3822     0578                     __end_of_SetUp:
  3823                           
  3824                           	psect	text15
  3825     0FDD                     __ptext15:	
  3826 ;; *************** function _StartWriteRequest *****************
  3827 ;; Defined at:
  3828 ;;		line 140 in file "./Color_Header.h"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;		None
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;		None
  3833 ;; Return value:  Size  Location     Type
  3834 ;;                  1    wreg      void 
  3835 ;; Registers used:
  3836 ;;		wreg
  3837 ;; Tracked objects:
  3838 ;;		On entry : 0/0
  3839 ;;		On exit  : 0/0
  3840 ;;		Unchanged: 0/0
  3841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;Total ram usage:        0 bytes
  3847 ;; Hardware stack levels used: 1
  3848 ;; Hardware stack levels required when called: 2
  3849 ;; This function calls:
  3850 ;;		Nothing
  3851 ;; This function is called by:
  3852 ;;		_SetUp
  3853 ;;		_IsColorDataReady
  3854 ;;		_ReadClear
  3855 ;;		_ReadRed
  3856 ;;		_ReadBlue
  3857 ;;		_ReadGreen
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861     0FDD                     _StartWriteRequest:	
  3862                           ;psect for function _StartWriteRequest
  3863                           
  3864     0FDD                     l1958:	
  3865                           ;incstack = 0
  3866                           ; Regs used in _StartWriteRequest: [wreg]
  3867                           
  3868                           
  3869                           ;./Color_Header.h: 141:     SSP1BUFbits.SSPBUF = 0x39 << 1;;
  3870     0FDD  3072               	movlw	114
  3871     0FDE  0023               	movlb	3	; select bank3
  3872     0FDF  008C               	movwf	12	;volatile
  3873     0FE0                     l138:	
  3874                           ;./Color_Header.h: 143:     while(!PIR3bits.SSP1IF){}
  3875                           
  3876     0FE0  002E               	movlb	14	; select bank14
  3877     0FE1  1C0F               	btfss	15,0	;volatile
  3878     0FE2  2FE4               	goto	u731
  3879     0FE3  2FE5               	goto	u730
  3880     0FE4                     u731:
  3881     0FE4  2FE0               	goto	l138
  3882     0FE5                     u730:
  3883     0FE5                     l141:
  3884     0FE5  0023               	movlb	3	; select bank3
  3885     0FE6  1B11               	btfsc	17,6	;volatile
  3886     0FE7  2FE9               	goto	u741
  3887     0FE8  2FEA               	goto	u740
  3888     0FE9                     u741:
  3889     0FE9  2FE5               	goto	l141
  3890     0FEA                     u740:
  3891     0FEA                     l143:
  3892                           
  3893                           ;./Color_Header.h: 145:     PIR3bits.SSP1IF = 0;
  3894     0FEA  002E               	movlb	14	; select bank14
  3895     0FEB  100F               	bcf	15,0	;volatile
  3896     0FEC                     l144:
  3897     0FEC  0008               	return
  3898     0FED                     __end_of_StartWriteRequest:
  3899                           
  3900                           	psect	text16
  3901     0FCD                     __ptext16:	
  3902 ;; *************** function _StartReadRequest *****************
  3903 ;; Defined at:
  3904 ;;		line 148 in file "./Color_Header.h"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  1    wreg      void 
  3911 ;; Registers used:
  3912 ;;		wreg
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3922 ;;Total ram usage:        0 bytes
  3923 ;; Hardware stack levels used: 1
  3924 ;; Hardware stack levels required when called: 2
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_SetUp
  3929 ;;		_IsColorDataReady
  3930 ;;		_ReadClear
  3931 ;;		_ReadRed
  3932 ;;		_ReadBlue
  3933 ;;		_ReadGreen
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937     0FCD                     _StartReadRequest:	
  3938                           ;psect for function _StartReadRequest
  3939                           
  3940     0FCD                     l1962:	
  3941                           ;incstack = 0
  3942                           ; Regs used in _StartReadRequest: [wreg]
  3943                           
  3944                           
  3945                           ;./Color_Header.h: 149:     SSP1BUF = (0x39 << 1) | 1;;
  3946     0FCD  3073               	movlw	115
  3947     0FCE  0023               	movlb	3	; select bank3
  3948     0FCF  008C               	movwf	12	;volatile
  3949     0FD0                     l147:	
  3950                           ;./Color_Header.h: 150:     while(!PIR3bits.SSP1IF){}
  3951                           
  3952     0FD0  002E               	movlb	14	; select bank14
  3953     0FD1  1C0F               	btfss	15,0	;volatile
  3954     0FD2  2FD4               	goto	u761
  3955     0FD3  2FD5               	goto	u760
  3956     0FD4                     u761:
  3957     0FD4  2FD0               	goto	l147
  3958     0FD5                     u760:
  3959     0FD5                     l150:
  3960     0FD5  0023               	movlb	3	; select bank3
  3961     0FD6  1B11               	btfsc	17,6	;volatile
  3962     0FD7  2FD9               	goto	u771
  3963     0FD8  2FDA               	goto	u770
  3964     0FD9                     u771:
  3965     0FD9  2FD5               	goto	l150
  3966     0FDA                     u770:
  3967     0FDA                     l152:
  3968                           
  3969                           ;./Color_Header.h: 152:     PIR3bits.SSP1IF = 0;
  3970     0FDA  002E               	movlb	14	; select bank14
  3971     0FDB  100F               	bcf	15,0	;volatile
  3972     0FDC                     l153:
  3973     0FDC  0008               	return
  3974     0FDD                     __end_of_StartReadRequest:
  3975                           
  3976                           	psect	text17
  3977     0F7B                     __ptext17:	
  3978 ;; *************** function _StartIC2Transmission *****************
  3979 ;; Defined at:
  3980 ;;		line 155 in file "./Color_Header.h"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      void 
  3987 ;; Registers used:
  3988 ;;		None
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used: 1
  4000 ;; Hardware stack levels required when called: 2
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_SetUp
  4005 ;;		_IsColorDataReady
  4006 ;;		_ReadClear
  4007 ;;		_ReadRed
  4008 ;;		_ReadBlue
  4009 ;;		_ReadGreen
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013     0F7B                     _StartIC2Transmission:	
  4014                           ;psect for function _StartIC2Transmission
  4015                           
  4016     0F7B                     l1956:	
  4017                           ;incstack = 0
  4018                           ; Regs used in _StartIC2Transmission: []
  4019                           
  4020                           
  4021                           ;./Color_Header.h: 156:     SSP1CON2bits.SEN = 1;
  4022     0F7B  0023               	movlb	3	; select bank3
  4023     0F7C  1411               	bsf	17,0	;volatile
  4024                           
  4025                           ;./Color_Header.h: 157:     PIR3bits.SSP1IF = 0;
  4026     0F7D  002E               	movlb	14	; select bank14
  4027     0F7E  100F               	bcf	15,0	;volatile
  4028     0F7F                     l156:	
  4029                           ;./Color_Header.h: 159:     while(!PIR3bits.SSP1IF){}
  4030                           
  4031     0F7F  1C0F               	btfss	15,0	;volatile
  4032     0F80  2F82               	goto	u721
  4033     0F81  2F83               	goto	u720
  4034     0F82                     u721:
  4035     0F82  2F7F               	goto	l156
  4036     0F83                     u720:
  4037     0F83                     l158:
  4038                           
  4039                           ;./Color_Header.h: 160:     PIR3bits.SSP1IF = 0;
  4040     0F83  100F               	bcf	15,0	;volatile
  4041     0F84                     l159:
  4042     0F84  0008               	return
  4043     0F85                     __end_of_StartIC2Transmission:
  4044                           
  4045                           	psect	text18
  4046     07F7                     __ptext18:	
  4047 ;; *************** function _RepeatedStart *****************
  4048 ;; Defined at:
  4049 ;;		line 169 in file "./Color_Header.h"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;		None
  4052 ;; Auto vars:     Size  Location     Type
  4053 ;;		None
  4054 ;; Return value:  Size  Location     Type
  4055 ;;                  1    wreg      void 
  4056 ;; Registers used:
  4057 ;;		None
  4058 ;; Tracked objects:
  4059 ;;		On entry : 0/0
  4060 ;;		On exit  : 0/0
  4061 ;;		Unchanged: 0/0
  4062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4066 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;Total ram usage:        0 bytes
  4068 ;; Hardware stack levels used: 1
  4069 ;; Hardware stack levels required when called: 2
  4070 ;; This function calls:
  4071 ;;		Nothing
  4072 ;; This function is called by:
  4073 ;;		_SetUp
  4074 ;;		_IsColorDataReady
  4075 ;;		_ReadClear
  4076 ;;		_ReadRed
  4077 ;;		_ReadBlue
  4078 ;;		_ReadGreen
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082     07F7                     _RepeatedStart:	
  4083                           ;psect for function _RepeatedStart
  4084                           
  4085     07F7                     l1960:	
  4086                           ;incstack = 0
  4087                           ; Regs used in _RepeatedStart: []
  4088                           
  4089                           
  4090                           ;./Color_Header.h: 170:     SSP1CON2bits.RSEN = 1;
  4091     07F7  0023               	movlb	3	; select bank3
  4092     07F8  1491               	bsf	17,1	;volatile
  4093     07F9                     l168:	
  4094                           ;./Color_Header.h: 172:     while(!PIR3bits.SSP1IF){}
  4095                           
  4096     07F9  002E               	movlb	14	; select bank14
  4097     07FA  1C0F               	btfss	15,0	;volatile
  4098     07FB  2FFD               	goto	u751
  4099     07FC  2FFE               	goto	u750
  4100     07FD                     u751:
  4101     07FD  2FF9               	goto	l168
  4102     07FE                     u750:
  4103     07FE                     l170:
  4104                           
  4105                           ;./Color_Header.h: 173:     PIR3bits.SSP1IF = 0;
  4106     07FE  100F               	bcf	15,0	;volatile
  4107     07FF                     l171:
  4108     07FF  0008               	return
  4109     0800                     __end_of_RepeatedStart:
  4110                           
  4111                           	psect	text19
  4112     0F72                     __ptext19:	
  4113 ;; *************** function _EndIC2Transmission *****************
  4114 ;; Defined at:
  4115 ;;		line 162 in file "./Color_Header.h"
  4116 ;; Parameters:    Size  Location     Type
  4117 ;;		None
  4118 ;; Auto vars:     Size  Location     Type
  4119 ;;		None
  4120 ;; Return value:  Size  Location     Type
  4121 ;;                  1    wreg      void 
  4122 ;; Registers used:
  4123 ;;		None
  4124 ;; Tracked objects:
  4125 ;;		On entry : 0/0
  4126 ;;		On exit  : 0/0
  4127 ;;		Unchanged: 0/0
  4128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;Total ram usage:        0 bytes
  4134 ;; Hardware stack levels used: 1
  4135 ;; Hardware stack levels required when called: 2
  4136 ;; This function calls:
  4137 ;;		Nothing
  4138 ;; This function is called by:
  4139 ;;		_SetUp
  4140 ;;		_IsColorDataReady
  4141 ;;		_ReadClear
  4142 ;;		_ReadRed
  4143 ;;		_ReadBlue
  4144 ;;		_ReadGreen
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148     0F72                     _EndIC2Transmission:	
  4149                           ;psect for function _EndIC2Transmission
  4150                           
  4151     0F72                     l1964:	
  4152                           ;incstack = 0
  4153                           ; Regs used in _EndIC2Transmission: []
  4154                           
  4155                           
  4156                           ;./Color_Header.h: 163:     SSP1CON2bits.PEN = 1;
  4157     0F72  0023               	movlb	3	; select bank3
  4158     0F73  1511               	bsf	17,2	;volatile
  4159     0F74                     l162:	
  4160                           ;./Color_Header.h: 165:     while(!PIR3bits.SSP1IF){}
  4161                           
  4162     0F74  002E               	movlb	14	; select bank14
  4163     0F75  1C0F               	btfss	15,0	;volatile
  4164     0F76  2F78               	goto	u781
  4165     0F77  2F79               	goto	u780
  4166     0F78                     u781:
  4167     0F78  2F74               	goto	l162
  4168     0F79                     u780:
  4169     0F79                     l164:
  4170                           
  4171                           ;./Color_Header.h: 166:     PIR3bits.SSP1IF = 0;
  4172     0F79  100F               	bcf	15,0	;volatile
  4173     0F7A                     l165:
  4174     0F7A  0008               	return
  4175     0F7B                     __end_of_EndIC2Transmission:
  4176                           
  4177                           	psect	text20
  4178     0795                     __ptext20:	
  4179 ;; *************** function _MovePumpArm *****************
  4180 ;; Defined at:
  4181 ;;		line 394 in file "motorMain.c"
  4182 ;; Parameters:    Size  Location     Type
  4183 ;;  switchValue     2    0[BANK0 ] int 
  4184 ;; Auto vars:     Size  Location     Type
  4185 ;;		None
  4186 ;; Return value:  Size  Location     Type
  4187 ;;                  1    wreg      void 
  4188 ;; Registers used:
  4189 ;;		wreg, status,2, status,0
  4190 ;; Tracked objects:
  4191 ;;		On entry : 0/0
  4192 ;;		On exit  : 0/0
  4193 ;;		Unchanged: 0/0
  4194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4195 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4198 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4199 ;;Total ram usage:        2 bytes
  4200 ;; Hardware stack levels used: 1
  4201 ;; Hardware stack levels required when called: 2
  4202 ;; This function calls:
  4203 ;;		Nothing
  4204 ;; This function is called by:
  4205 ;;		_main
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209     0795                     _MovePumpArm:	
  4210                           ;psect for function _MovePumpArm
  4211                           
  4212     0795                     l2306:	
  4213                           ;incstack = 0
  4214                           ; Regs used in _MovePumpArm: [wreg+status,2+status,0]
  4215                           
  4216                           
  4217                           ;motorMain.c: 395:     LATBbits.LATB0 = 0;
  4218     0795  0020               	movlb	0	; select bank0
  4219     0796  1017               	bcf	23,0	;volatile
  4220                           
  4221                           ;motorMain.c: 396:     LATBbits.LATB1 = 0;
  4222     0797  1097               	bcf	23,1	;volatile
  4223     0798                     l2308:
  4224                           
  4225                           ;motorMain.c: 397:     if(switchValue == SWITCH_MIN){
  4226     0798  30E8               	movlw	232
  4227     0799  064F               	xorwf	MovePumpArm@switchValue,w
  4228     079A  3003               	movlw	3
  4229     079B  1903               	skipnz
  4230     079C  0650               	xorwf	MovePumpArm@switchValue+1,w
  4231     079D  1D03               	btfss	3,2
  4232     079E  2FA0               	goto	u1051
  4233     079F  2FA1               	goto	u1050
  4234     07A0                     u1051:
  4235     07A0  2FA4               	goto	l2312
  4236     07A1                     u1050:
  4237     07A1                     l2310:
  4238                           
  4239                           ;motorMain.c: 398:             LATBbits.LATB0 = 1;
  4240     07A1  1417               	bsf	23,0	;volatile
  4241                           
  4242                           ;motorMain.c: 399:             LATBbits.LATB1 = 0;
  4243     07A2  1097               	bcf	23,1	;volatile
  4244                           
  4245                           ;motorMain.c: 400:     }
  4246     07A3  2FAF               	goto	l440
  4247     07A4                     l2312:
  4248     07A4  30D0               	movlw	208
  4249     07A5  064F               	xorwf	MovePumpArm@switchValue,w
  4250     07A6  3007               	movlw	7
  4251     07A7  1903               	skipnz
  4252     07A8  0650               	xorwf	MovePumpArm@switchValue+1,w
  4253     07A9  1D03               	btfss	3,2
  4254     07AA  2FAC               	goto	u1061
  4255     07AB  2FAD               	goto	u1060
  4256     07AC                     u1061:
  4257     07AC  2FAF               	goto	l440
  4258     07AD                     u1060:
  4259     07AD                     l2314:
  4260                           
  4261                           ;motorMain.c: 402:             LATBbits.LATB0 = 0;
  4262     07AD  1017               	bcf	23,0	;volatile
  4263                           
  4264                           ;motorMain.c: 403:             LATBbits.LATB1 = 1;
  4265     07AE  1497               	bsf	23,1	;volatile
  4266     07AF                     l440:
  4267     07AF  0008               	return
  4268     07B0                     __end_of_MovePumpArm:
  4269                           
  4270                           	psect	text21
  4271     02DD                     __ptext21:	
  4272 ;; *************** function _ColorSensor *****************
  4273 ;; Defined at:
  4274 ;;		line 490 in file "./Color_Header.h"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  newI2CMessag    1    wreg     PTR unsigned char 
  4277 ;;		 -> newI2CMessage(1), 
  4278 ;;  I2CStage        1   12[BANK0 ] PTR int 
  4279 ;;		 -> I2CStage(2), 
  4280 ;;  colors          1   13[BANK0 ] PTR struct colorScheme
  4281 ;;		 -> colors(12), 
  4282 ;;  color           1   14[BANK0 ] PTR unsigned char 
  4283 ;;		 -> color(1), 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  newI2CMessag    1   20[BANK0 ] PTR unsigned char 
  4286 ;;		 -> newI2CMessage(1), 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      void 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4296 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4298 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;Total ram usage:        9 bytes
  4301 ;; Hardware stack levels used: 1
  4302 ;; Hardware stack levels required when called: 6
  4303 ;; This function calls:
  4304 ;;		_UpdateColors
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310     02DD                     _ColorSensor:	
  4311                           ;psect for function _ColorSensor
  4312                           
  4313                           
  4314                           ;incstack = 0
  4315                           ; Regs used in _ColorSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4316                           ;ColorSensor@newI2CMessage stored from wreg
  4317     02DD  0020               	movlb	0	; select bank0
  4318     02DE  00E3               	movwf	ColorSensor@newI2CMessage
  4319     02DF                     l2270:
  4320                           
  4321                           ;./Color_Header.h: 491:     if(*newI2CMessage == 1 ){
  4322     02DF  0863               	movf	ColorSensor@newI2CMessage,w
  4323     02E0  0086               	movwf	6
  4324     02E1  0187               	clrf	7
  4325     02E2  0301               	decf	1,w
  4326     02E3  1D03               	btfss	3,2
  4327     02E4  2AE6               	goto	u971
  4328     02E5  2AE7               	goto	u970
  4329     02E6                     u971:
  4330     02E6  2BE0               	goto	l303
  4331     02E7                     u970:
  4332     02E7                     l2272:
  4333                           
  4334                           ;./Color_Header.h: 492:             *newI2CMessage =0;
  4335     02E7  0863               	movf	ColorSensor@newI2CMessage,w
  4336     02E8  0086               	movwf	6
  4337     02E9  0187               	clrf	7
  4338     02EA  0181               	clrf	1
  4339     02EB                     l2274:
  4340                           
  4341                           ;./Color_Header.h: 493:             *I2CStage = UpdateColors(colors,*I2CStage);
  4342     02EB  085B               	movf	ColorSensor@I2CStage,w
  4343     02EC  0086               	movwf	6
  4344     02ED  0187               	clrf	7
  4345     02EE  3F40               	moviw [0]fsr1
  4346     02EF  00D6               	movwf	UpdateColors@stageValue
  4347     02F0  3F41               	moviw [1]fsr1
  4348     02F1  00D7               	movwf	UpdateColors@stageValue+1
  4349     02F2  085C               	movf	ColorSensor@colors,w
  4350     02F3  3185  25D1  3182   	fcall	_UpdateColors
  4351     02F6  0020               	movlb	0	; select bank0
  4352     02F7  00DE               	movwf	??_ColorSensor
  4353     02F8  01DF               	clrf	??_ColorSensor+1
  4354     02F9  085B               	movf	ColorSensor@I2CStage,w
  4355     02FA  0086               	movwf	6
  4356     02FB  0187               	clrf	7
  4357     02FC  085E               	movf	??_ColorSensor,w
  4358     02FD  3FC0               	movwi [0]fsr1
  4359     02FE  085F               	movf	??_ColorSensor+1,w
  4360     02FF  3FC1               	movwi [1]fsr1
  4361     0300                     l2276:
  4362                           
  4363                           ;./Color_Header.h: 495:             if(colors->allDone){
  4364     0300  085C               	movf	ColorSensor@colors,w
  4365     0301  3E0B               	addlw	11
  4366     0302  0086               	movwf	6
  4367     0303  0187               	clrf	7
  4368     0304  0801               	movf	1,w
  4369     0305  1903               	btfsc	3,2
  4370     0306  2B08               	goto	u981
  4371     0307  2B09               	goto	u980
  4372     0308                     u981:
  4373     0308  2BE0               	goto	l303
  4374     0309                     u980:
  4375     0309                     l2278:
  4376                           
  4377                           ;./Color_Header.h: 496:                 if(colors->red > colors->blue && colors->red > c
      +                          olors->green){
  4378     0309  085C               	movf	ColorSensor@colors,w
  4379     030A  3E06               	addlw	6
  4380     030B  0086               	movwf	6
  4381     030C  0187               	clrf	7
  4382     030D  3F40               	moviw [0]fsr1
  4383     030E  00DE               	movwf	??_ColorSensor
  4384     030F  3F41               	moviw [1]fsr1
  4385     0310  00DF               	movwf	??_ColorSensor+1
  4386     0311  085C               	movf	ColorSensor@colors,w
  4387     0312  3E04               	addlw	4
  4388     0313  0086               	movwf	6
  4389     0314  0187               	clrf	7
  4390     0315  3F40               	moviw [0]fsr1
  4391     0316  00E0               	movwf	??_ColorSensor+2
  4392     0317  3F41               	moviw [1]fsr1
  4393     0318  00E1               	movwf	??_ColorSensor+3
  4394     0319  0861               	movf	??_ColorSensor+3,w
  4395     031A  3A80               	xorlw	128
  4396     031B  00E2               	movwf	??_ColorSensor+4
  4397     031C  085F               	movf	??_ColorSensor+1,w
  4398     031D  3A80               	xorlw	128
  4399     031E  0262               	subwf	??_ColorSensor+4,w
  4400     031F  1D03               	skipz
  4401     0320  2B23               	goto	u995
  4402     0321  085E               	movf	??_ColorSensor,w
  4403     0322  0260               	subwf	??_ColorSensor+2,w
  4404     0323                     u995:
  4405     0323  1803               	skipnc
  4406     0324  2B26               	goto	u991
  4407     0325  2B27               	goto	u990
  4408     0326                     u991:
  4409     0326  2B50               	goto	l2286
  4410     0327                     u990:
  4411     0327                     l2280:
  4412     0327  0020               	movlb	0	; select bank0
  4413     0328  085C               	movf	ColorSensor@colors,w
  4414     0329  3E06               	addlw	6
  4415     032A  0086               	movwf	6
  4416     032B  0187               	clrf	7
  4417     032C  3F40               	moviw [0]fsr1
  4418     032D  00DE               	movwf	??_ColorSensor
  4419     032E  3F41               	moviw [1]fsr1
  4420     032F  00DF               	movwf	??_ColorSensor+1
  4421     0330  085C               	movf	ColorSensor@colors,w
  4422     0331  3E02               	addlw	2
  4423     0332  0086               	movwf	6
  4424     0333  0187               	clrf	7
  4425     0334  3F40               	moviw [0]fsr1
  4426     0335  00E0               	movwf	??_ColorSensor+2
  4427     0336  3F41               	moviw [1]fsr1
  4428     0337  00E1               	movwf	??_ColorSensor+3
  4429     0338  0861               	movf	??_ColorSensor+3,w
  4430     0339  3A80               	xorlw	128
  4431     033A  00E2               	movwf	??_ColorSensor+4
  4432     033B  085F               	movf	??_ColorSensor+1,w
  4433     033C  3A80               	xorlw	128
  4434     033D  0262               	subwf	??_ColorSensor+4,w
  4435     033E  1D03               	skipz
  4436     033F  2B42               	goto	u1005
  4437     0340  085E               	movf	??_ColorSensor,w
  4438     0341  0260               	subwf	??_ColorSensor+2,w
  4439     0342                     u1005:
  4440     0342  1803               	skipnc
  4441     0343  2B45               	goto	u1001
  4442     0344  2B46               	goto	u1000
  4443     0345                     u1001:
  4444     0345  2B50               	goto	l2286
  4445     0346                     u1000:
  4446     0346                     l2282:
  4447                           
  4448                           ;./Color_Header.h: 497:                     LATAbits.LATA0 = 1;
  4449     0346  0020               	movlb	0	; select bank0
  4450     0347  1416               	bsf	22,0	;volatile
  4451                           
  4452                           ;./Color_Header.h: 498:                     LATAbits.LATA1 = 0;
  4453     0348  1096               	bcf	22,1	;volatile
  4454                           
  4455                           ;./Color_Header.h: 499:                     LATAbits.LATA2 = 0;
  4456     0349  1116               	bcf	22,2	;volatile
  4457     034A                     l2284:
  4458                           
  4459                           ;./Color_Header.h: 500:                     *color = RED;
  4460     034A  085D               	movf	ColorSensor@color,w
  4461     034B  0086               	movwf	6
  4462     034C  0187               	clrf	7
  4463     034D  0181               	clrf	1
  4464     034E  0A81               	incf	1,f
  4465                           
  4466                           ;./Color_Header.h: 501:                 }
  4467     034F  2BE0               	goto	l303
  4468     0350                     l2286:
  4469     0350  0020               	movlb	0	; select bank0
  4470     0351  085C               	movf	ColorSensor@colors,w
  4471     0352  3E04               	addlw	4
  4472     0353  0086               	movwf	6
  4473     0354  0187               	clrf	7
  4474     0355  3F40               	moviw [0]fsr1
  4475     0356  00DE               	movwf	??_ColorSensor
  4476     0357  3F41               	moviw [1]fsr1
  4477     0358  00DF               	movwf	??_ColorSensor+1
  4478     0359  085C               	movf	ColorSensor@colors,w
  4479     035A  3E06               	addlw	6
  4480     035B  0086               	movwf	6
  4481     035C  0187               	clrf	7
  4482     035D  3F40               	moviw [0]fsr1
  4483     035E  00E0               	movwf	??_ColorSensor+2
  4484     035F  3F41               	moviw [1]fsr1
  4485     0360  00E1               	movwf	??_ColorSensor+3
  4486     0361  0861               	movf	??_ColorSensor+3,w
  4487     0362  3A80               	xorlw	128
  4488     0363  00E2               	movwf	??_ColorSensor+4
  4489     0364  085F               	movf	??_ColorSensor+1,w
  4490     0365  3A80               	xorlw	128
  4491     0366  0262               	subwf	??_ColorSensor+4,w
  4492     0367  1D03               	skipz
  4493     0368  2B6B               	goto	u1015
  4494     0369  085E               	movf	??_ColorSensor,w
  4495     036A  0260               	subwf	??_ColorSensor+2,w
  4496     036B                     u1015:
  4497     036B  1803               	skipnc
  4498     036C  2B6E               	goto	u1011
  4499     036D  2B6F               	goto	u1010
  4500     036E                     u1011:
  4501     036E  2B98               	goto	l2294
  4502     036F                     u1010:
  4503     036F                     l2288:
  4504     036F  0020               	movlb	0	; select bank0
  4505     0370  085C               	movf	ColorSensor@colors,w
  4506     0371  3E04               	addlw	4
  4507     0372  0086               	movwf	6
  4508     0373  0187               	clrf	7
  4509     0374  3F40               	moviw [0]fsr1
  4510     0375  00DE               	movwf	??_ColorSensor
  4511     0376  3F41               	moviw [1]fsr1
  4512     0377  00DF               	movwf	??_ColorSensor+1
  4513     0378  085C               	movf	ColorSensor@colors,w
  4514     0379  3E02               	addlw	2
  4515     037A  0086               	movwf	6
  4516     037B  0187               	clrf	7
  4517     037C  3F40               	moviw [0]fsr1
  4518     037D  00E0               	movwf	??_ColorSensor+2
  4519     037E  3F41               	moviw [1]fsr1
  4520     037F  00E1               	movwf	??_ColorSensor+3
  4521     0380  0861               	movf	??_ColorSensor+3,w
  4522     0381  3A80               	xorlw	128
  4523     0382  00E2               	movwf	??_ColorSensor+4
  4524     0383  085F               	movf	??_ColorSensor+1,w
  4525     0384  3A80               	xorlw	128
  4526     0385  0262               	subwf	??_ColorSensor+4,w
  4527     0386  1D03               	skipz
  4528     0387  2B8A               	goto	u1025
  4529     0388  085E               	movf	??_ColorSensor,w
  4530     0389  0260               	subwf	??_ColorSensor+2,w
  4531     038A                     u1025:
  4532     038A  1803               	skipnc
  4533     038B  2B8D               	goto	u1021
  4534     038C  2B8E               	goto	u1020
  4535     038D                     u1021:
  4536     038D  2B98               	goto	l2294
  4537     038E                     u1020:
  4538     038E                     l2290:
  4539                           
  4540                           ;./Color_Header.h: 503:                     LATAbits.LATA0 = 0;
  4541     038E  0020               	movlb	0	; select bank0
  4542     038F  1016               	bcf	22,0	;volatile
  4543                           
  4544                           ;./Color_Header.h: 504:                     LATAbits.LATA1 = 1;
  4545     0390  1496               	bsf	22,1	;volatile
  4546                           
  4547                           ;./Color_Header.h: 505:                     LATAbits.LATA2 = 0;
  4548     0391  1116               	bcf	22,2	;volatile
  4549     0392                     l2292:
  4550                           
  4551                           ;./Color_Header.h: 506:                     *color = BLUE;
  4552     0392  085D               	movf	ColorSensor@color,w
  4553     0393  0086               	movwf	6
  4554     0394  0187               	clrf	7
  4555     0395  3002               	movlw	2
  4556     0396  0081               	movwf	1
  4557                           
  4558                           ;./Color_Header.h: 507:                 }
  4559     0397  2BE0               	goto	l303
  4560     0398                     l2294:
  4561     0398  0020               	movlb	0	; select bank0
  4562     0399  085C               	movf	ColorSensor@colors,w
  4563     039A  3E02               	addlw	2
  4564     039B  0086               	movwf	6
  4565     039C  0187               	clrf	7
  4566     039D  3F40               	moviw [0]fsr1
  4567     039E  00DE               	movwf	??_ColorSensor
  4568     039F  3F41               	moviw [1]fsr1
  4569     03A0  00DF               	movwf	??_ColorSensor+1
  4570     03A1  085C               	movf	ColorSensor@colors,w
  4571     03A2  3E04               	addlw	4
  4572     03A3  0086               	movwf	6
  4573     03A4  0187               	clrf	7
  4574     03A5  3F40               	moviw [0]fsr1
  4575     03A6  00E0               	movwf	??_ColorSensor+2
  4576     03A7  3F41               	moviw [1]fsr1
  4577     03A8  00E1               	movwf	??_ColorSensor+3
  4578     03A9  0861               	movf	??_ColorSensor+3,w
  4579     03AA  3A80               	xorlw	128
  4580     03AB  00E2               	movwf	??_ColorSensor+4
  4581     03AC  085F               	movf	??_ColorSensor+1,w
  4582     03AD  3A80               	xorlw	128
  4583     03AE  0262               	subwf	??_ColorSensor+4,w
  4584     03AF  1D03               	skipz
  4585     03B0  2BB3               	goto	u1035
  4586     03B1  085E               	movf	??_ColorSensor,w
  4587     03B2  0260               	subwf	??_ColorSensor+2,w
  4588     03B3                     u1035:
  4589     03B3  1803               	skipnc
  4590     03B4  2BB6               	goto	u1031
  4591     03B5  2BB7               	goto	u1030
  4592     03B6                     u1031:
  4593     03B6  2BE0               	goto	l297
  4594     03B7                     u1030:
  4595     03B7                     l2296:
  4596     03B7  0020               	movlb	0	; select bank0
  4597     03B8  085C               	movf	ColorSensor@colors,w
  4598     03B9  3E02               	addlw	2
  4599     03BA  0086               	movwf	6
  4600     03BB  0187               	clrf	7
  4601     03BC  3F40               	moviw [0]fsr1
  4602     03BD  00DE               	movwf	??_ColorSensor
  4603     03BE  3F41               	moviw [1]fsr1
  4604     03BF  00DF               	movwf	??_ColorSensor+1
  4605     03C0  085C               	movf	ColorSensor@colors,w
  4606     03C1  3E06               	addlw	6
  4607     03C2  0086               	movwf	6
  4608     03C3  0187               	clrf	7
  4609     03C4  3F40               	moviw [0]fsr1
  4610     03C5  00E0               	movwf	??_ColorSensor+2
  4611     03C6  3F41               	moviw [1]fsr1
  4612     03C7  00E1               	movwf	??_ColorSensor+3
  4613     03C8  0861               	movf	??_ColorSensor+3,w
  4614     03C9  3A80               	xorlw	128
  4615     03CA  00E2               	movwf	??_ColorSensor+4
  4616     03CB  085F               	movf	??_ColorSensor+1,w
  4617     03CC  3A80               	xorlw	128
  4618     03CD  0262               	subwf	??_ColorSensor+4,w
  4619     03CE  1D03               	skipz
  4620     03CF  2BD2               	goto	u1045
  4621     03D0  085E               	movf	??_ColorSensor,w
  4622     03D1  0260               	subwf	??_ColorSensor+2,w
  4623     03D2                     u1045:
  4624     03D2  1803               	skipnc
  4625     03D3  2BD5               	goto	u1041
  4626     03D4  2BD6               	goto	u1040
  4627     03D5                     u1041:
  4628     03D5  2BE0               	goto	l297
  4629     03D6                     u1040:
  4630     03D6                     l2298:
  4631                           
  4632                           ;./Color_Header.h: 509:                     LATAbits.LATA0 = 0;
  4633     03D6  0020               	movlb	0	; select bank0
  4634     03D7  1016               	bcf	22,0	;volatile
  4635                           
  4636                           ;./Color_Header.h: 510:                     LATAbits.LATA1 = 0;
  4637     03D8  1096               	bcf	22,1	;volatile
  4638                           
  4639                           ;./Color_Header.h: 511:                     LATAbits.LATA2 = 1;
  4640     03D9  1516               	bsf	22,2	;volatile
  4641     03DA                     l2300:
  4642                           
  4643                           ;./Color_Header.h: 512:                     *color = GREEN;
  4644     03DA  085D               	movf	ColorSensor@color,w
  4645     03DB  0086               	movwf	6
  4646     03DC  0187               	clrf	7
  4647     03DD  3003               	movlw	3
  4648     03DE  0081               	movwf	1
  4649     03DF  2BE0               	goto	l303
  4650     03E0                     l297:	
  4651                           ;./Color_Header.h: 514:             }
  4652                           
  4653     03E0                     l303:
  4654     03E0  0008               	return
  4655     03E1                     __end_of_ColorSensor:
  4656                           
  4657                           	psect	text22
  4658     05D1                     __ptext22:	
  4659 ;; *************** function _UpdateColors *****************
  4660 ;; Defined at:
  4661 ;;		line 426 in file "./Color_Header.h"
  4662 ;; Parameters:    Size  Location     Type
  4663 ;;  colors          1    wreg     PTR struct colorScheme
  4664 ;;		 -> colors(12), 
  4665 ;;  stageValue      2    7[BANK0 ] int 
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  colors          1   11[BANK0 ] PTR struct colorScheme
  4668 ;;		 -> colors(12), 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  1    wreg      unsigned char 
  4671 ;; Registers used:
  4672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4678 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;Total ram usage:        5 bytes
  4683 ;; Hardware stack levels used: 1
  4684 ;; Hardware stack levels required when called: 5
  4685 ;; This function calls:
  4686 ;;		_GetValueAndEndI2C
  4687 ;;		_ReadAddressI2C
  4688 ;;		_ReadI2C
  4689 ;;		_RepeatI2C
  4690 ;;		_SelectColourRegister
  4691 ;;		_StartI2C
  4692 ;;		_WriteI2C
  4693 ;;		___awmod
  4694 ;; This function is called by:
  4695 ;;		_ColorSensor
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699     05D1                     _UpdateColors:	
  4700                           ;psect for function _UpdateColors
  4701                           
  4702                           
  4703                           ;incstack = 0
  4704                           ; Regs used in _UpdateColors: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4705                           ;UpdateColors@colors stored from wreg
  4706     05D1  0020               	movlb	0	; select bank0
  4707     05D2  00DA               	movwf	UpdateColors@colors
  4708     05D3                     l2128:
  4709                           
  4710                           ;./Color_Header.h: 427:     switch(stageValue){
  4711     05D3  2DFC               	goto	l2146
  4712     05D4                     l2130:
  4713     05D4  318F  274C  3185   	fcall	_StartI2C
  4714     05D7  2E18               	goto	l2148
  4715     05D8                     l2132:
  4716     05D8  318F  2757  3185   	fcall	_WriteI2C
  4717     05DB  2E18               	goto	l2148
  4718     05DC                     l2134:
  4719     05DC  085A               	movf	UpdateColors@colors,w
  4720     05DD  3E0A               	addlw	10
  4721     05DE  0086               	movwf	6
  4722     05DF  0187               	clrf	7
  4723     05E0  0801               	movf	1,w
  4724     05E1  00D8               	movwf	??_UpdateColors
  4725     05E2  01D9               	clrf	??_UpdateColors+1
  4726     05E3  0858               	movf	??_UpdateColors,w
  4727     05E4  00CF               	movwf	SelectColourRegister@colorStage
  4728     05E5  0859               	movf	??_UpdateColors+1,w
  4729     05E6  00D0               	movwf	SelectColourRegister@colorStage+1
  4730     05E7  3186  267B  3185   	fcall	_SelectColourRegister
  4731     05EA  2E18               	goto	l2148
  4732     05EB                     l2136:
  4733     05EB  318F  2741  3185   	fcall	_RepeatI2C
  4734     05EE  2E18               	goto	l2148
  4735     05EF                     l2138:
  4736     05EF  318F  2751  3185   	fcall	_ReadAddressI2C
  4737     05F2  2E18               	goto	l2148
  4738     05F3                     l2140:
  4739     05F3  318F  273E  3185   	fcall	_ReadI2C
  4740     05F6  2E18               	goto	l2148
  4741     05F7                     l2142:
  4742     05F7  085A               	movf	UpdateColors@colors,w
  4743     05F8  3183  23E1  3185   	fcall	_GetValueAndEndI2C
  4744     05FB  2E18               	goto	l2148
  4745     05FC                     l2146:
  4746                           
  4747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4748                           ; Switch size 1, requested type "simple"
  4749                           ; Number of cases is 1, Range of values is 0 to 0
  4750                           ; switch strategies available:
  4751                           ; Name         Instructions Cycles
  4752                           ; simple_byte            4     3 (average)
  4753                           ; direct_byte            8     6 (fixed)
  4754                           ; jumptable            260     6 (fixed)
  4755                           ;	Chosen strategy is simple_byte
  4756     05FC  0857               	movf	UpdateColors@stageValue+1,w
  4757     05FD  3A00               	xorlw	0	; case 0
  4758     05FE  1903               	skipnz
  4759     05FF  2E01               	goto	l2758
  4760     0600  2E18               	goto	l2148
  4761     0601                     l2758:
  4762                           
  4763                           ; Switch size 1, requested type "simple"
  4764                           ; Number of cases is 7, Range of values is 0 to 6
  4765                           ; switch strategies available:
  4766                           ; Name         Instructions Cycles
  4767                           ; direct_byte           20     6 (fixed)
  4768                           ; simple_byte           22    12 (average)
  4769                           ; jumptable            260     6 (fixed)
  4770                           ;	Chosen strategy is simple_byte
  4771     0601  0856               	movf	UpdateColors@stageValue,w
  4772     0602  3A00               	xorlw	0	; case 0
  4773     0603  1903               	skipnz
  4774     0604  2DD4               	goto	l2130
  4775     0605  3A01               	xorlw	1	; case 1
  4776     0606  1903               	skipnz
  4777     0607  2DD8               	goto	l2132
  4778     0608  3A03               	xorlw	3	; case 2
  4779     0609  1903               	skipnz
  4780     060A  2DDC               	goto	l2134
  4781     060B  3A01               	xorlw	1	; case 3
  4782     060C  1903               	skipnz
  4783     060D  2DEB               	goto	l2136
  4784     060E  3A07               	xorlw	7	; case 4
  4785     060F  1903               	skipnz
  4786     0610  2DEF               	goto	l2138
  4787     0611  3A01               	xorlw	1	; case 5
  4788     0612  1903               	skipnz
  4789     0613  2DF3               	goto	l2140
  4790     0614  3A03               	xorlw	3	; case 6
  4791     0615  1903               	skipnz
  4792     0616  2DF7               	goto	l2142
  4793     0617  2E18               	goto	l2148
  4794     0618                     l2148:
  4795                           
  4796                           ;./Color_Header.h: 436:     return stageValue % 7;
  4797     0618  3007               	movlw	7
  4798     0619  0020               	movlb	0	; select bank0
  4799     061A  00CF               	movwf	___awmod@divisor
  4800     061B  3000               	movlw	0
  4801     061C  00D0               	movwf	___awmod@divisor+1
  4802     061D  0857               	movf	UpdateColors@stageValue+1,w
  4803     061E  00D2               	movwf	___awmod@dividend+1
  4804     061F  0856               	movf	UpdateColors@stageValue,w
  4805     0620  00D1               	movwf	___awmod@dividend
  4806     0621  3186  2627  3185   	fcall	___awmod
  4807     0624  0020               	movlb	0	; select bank0
  4808     0625  084F               	movf	?___awmod,w
  4809     0626                     l282:
  4810     0626  0008               	return
  4811     0627                     __end_of_UpdateColors:
  4812                           
  4813                           	psect	text23
  4814     0627                     __ptext23:	
  4815 ;; *************** function ___awmod *****************
  4816 ;; Defined at:
  4817 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;  divisor         2    0[BANK0 ] int 
  4820 ;;  dividend        2    2[BANK0 ] int 
  4821 ;; Auto vars:     Size  Location     Type
  4822 ;;  sign            1    6[BANK0 ] unsigned char 
  4823 ;;  counter         1    5[BANK0 ] unsigned char 
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  2    0[BANK0 ] int 
  4826 ;; Registers used:
  4827 ;;		wreg, status,2, status,0
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4833 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4836 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4837 ;;Total ram usage:        7 bytes
  4838 ;; Hardware stack levels used: 1
  4839 ;; Hardware stack levels required when called: 2
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_UpdateColors
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847     0627                     ___awmod:	
  4848                           ;psect for function ___awmod
  4849                           
  4850     0627                     l2052:	
  4851                           ;incstack = 0
  4852                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  4853                           
  4854     0627  0020               	movlb	0	; select bank0
  4855     0628  01D5               	clrf	___awmod@sign
  4856     0629                     l2054:
  4857     0629  1FD2               	btfss	___awmod@dividend+1,7
  4858     062A  2E2C               	goto	u791
  4859     062B  2E2D               	goto	u790
  4860     062C                     u791:
  4861     062C  2E34               	goto	l2060
  4862     062D                     u790:
  4863     062D                     l2056:
  4864     062D  09D1               	comf	___awmod@dividend,f
  4865     062E  09D2               	comf	___awmod@dividend+1,f
  4866     062F  0AD1               	incf	___awmod@dividend,f
  4867     0630  1903               	skipnz
  4868     0631  0AD2               	incf	___awmod@dividend+1,f
  4869     0632                     l2058:
  4870     0632  01D5               	clrf	___awmod@sign
  4871     0633  0AD5               	incf	___awmod@sign,f
  4872     0634                     l2060:
  4873     0634  1FD0               	btfss	___awmod@divisor+1,7
  4874     0635  2E37               	goto	u801
  4875     0636  2E38               	goto	u800
  4876     0637                     u801:
  4877     0637  2E3D               	goto	l2064
  4878     0638                     u800:
  4879     0638                     l2062:
  4880     0638  09CF               	comf	___awmod@divisor,f
  4881     0639  09D0               	comf	___awmod@divisor+1,f
  4882     063A  0ACF               	incf	___awmod@divisor,f
  4883     063B  1903               	skipnz
  4884     063C  0AD0               	incf	___awmod@divisor+1,f
  4885     063D                     l2064:
  4886     063D  084F               	movf	___awmod@divisor,w
  4887     063E  0450               	iorwf	___awmod@divisor+1,w
  4888     063F  1903               	btfsc	3,2
  4889     0640  2E42               	goto	u811
  4890     0641  2E43               	goto	u810
  4891     0642                     u811:
  4892     0642  2E6C               	goto	l2082
  4893     0643                     u810:
  4894     0643                     l2066:
  4895     0643  01D4               	clrf	___awmod@counter
  4896     0644  0AD4               	incf	___awmod@counter,f
  4897     0645  2E4F               	goto	l2072
  4898     0646                     l2068:
  4899     0646  3001               	movlw	1
  4900     0647                     u825:
  4901     0647  35CF               	lslf	___awmod@divisor,f
  4902     0648  0DD0               	rlf	___awmod@divisor+1,f
  4903     0649  0B89               	decfsz	9,f
  4904     064A  2E47               	goto	u825
  4905     064B                     l2070:
  4906     064B  3001               	movlw	1
  4907     064C  00D3               	movwf	??___awmod
  4908     064D  0853               	movf	??___awmod,w
  4909     064E  07D4               	addwf	___awmod@counter,f
  4910     064F                     l2072:
  4911     064F  1FD0               	btfss	___awmod@divisor+1,7
  4912     0650  2E52               	goto	u831
  4913     0651  2E53               	goto	u830
  4914     0652                     u831:
  4915     0652  2E46               	goto	l2068
  4916     0653                     u830:
  4917     0653                     l2074:
  4918     0653  0850               	movf	___awmod@divisor+1,w
  4919     0654  0252               	subwf	___awmod@dividend+1,w
  4920     0655  1D03               	skipz
  4921     0656  2E59               	goto	u845
  4922     0657  084F               	movf	___awmod@divisor,w
  4923     0658  0251               	subwf	___awmod@dividend,w
  4924     0659                     u845:
  4925     0659  1C03               	skipc
  4926     065A  2E5C               	goto	u841
  4927     065B  2E5D               	goto	u840
  4928     065C                     u841:
  4929     065C  2E61               	goto	l2078
  4930     065D                     u840:
  4931     065D                     l2076:
  4932     065D  084F               	movf	___awmod@divisor,w
  4933     065E  02D1               	subwf	___awmod@dividend,f
  4934     065F  0850               	movf	___awmod@divisor+1,w
  4935     0660  3BD2               	subwfb	___awmod@dividend+1,f
  4936     0661                     l2078:
  4937     0661  3001               	movlw	1
  4938     0662                     u855:
  4939     0662  36D0               	lsrf	___awmod@divisor+1,f
  4940     0663  0CCF               	rrf	___awmod@divisor,f
  4941     0664  0B89               	decfsz	9,f
  4942     0665  2E62               	goto	u855
  4943     0666                     l2080:
  4944     0666  3001               	movlw	1
  4945     0667  02D4               	subwf	___awmod@counter,f
  4946     0668  1D03               	btfss	3,2
  4947     0669  2E6B               	goto	u861
  4948     066A  2E6C               	goto	u860
  4949     066B                     u861:
  4950     066B  2E53               	goto	l2074
  4951     066C                     u860:
  4952     066C                     l2082:
  4953     066C  0855               	movf	___awmod@sign,w
  4954     066D  1903               	btfsc	3,2
  4955     066E  2E70               	goto	u871
  4956     066F  2E71               	goto	u870
  4957     0670                     u871:
  4958     0670  2E76               	goto	l2086
  4959     0671                     u870:
  4960     0671                     l2084:
  4961     0671  09D1               	comf	___awmod@dividend,f
  4962     0672  09D2               	comf	___awmod@dividend+1,f
  4963     0673  0AD1               	incf	___awmod@dividend,f
  4964     0674  1903               	skipnz
  4965     0675  0AD2               	incf	___awmod@dividend+1,f
  4966     0676                     l2086:
  4967     0676  0852               	movf	___awmod@dividend+1,w
  4968     0677  00D0               	movwf	?___awmod+1
  4969     0678  0851               	movf	___awmod@dividend,w
  4970     0679  00CF               	movwf	?___awmod
  4971     067A                     l776:
  4972     067A  0008               	return
  4973     067B                     __end_of___awmod:
  4974                           
  4975                           	psect	text24
  4976     0F57                     __ptext24:	
  4977 ;; *************** function _WriteI2C *****************
  4978 ;; Defined at:
  4979 ;;		line 373 in file "./Color_Header.h"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;		None
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      void 
  4986 ;; Registers used:
  4987 ;;		wreg
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4997 ;;Total ram usage:        0 bytes
  4998 ;; Hardware stack levels used: 1
  4999 ;; Hardware stack levels required when called: 2
  5000 ;; This function calls:
  5001 ;;		Nothing
  5002 ;; This function is called by:
  5003 ;;		_UpdateColors
  5004 ;; This function uses a non-reentrant model
  5005 ;;
  5006                           
  5007     0F57                     _WriteI2C:	
  5008                           ;psect for function _WriteI2C
  5009                           
  5010     0F57                     l1998:	
  5011                           ;incstack = 0
  5012                           ; Regs used in _WriteI2C: [wreg]
  5013                           
  5014                           
  5015                           ;./Color_Header.h: 374:     PIR3bits.SSP1IF = 0;
  5016     0F57  002E               	movlb	14	; select bank14
  5017     0F58  100F               	bcf	15,0	;volatile
  5018     0F59                     l2000:
  5019                           
  5020                           ;./Color_Header.h: 375:     SSP1BUFbits.SSPBUF = 0x39 << 1;;
  5021     0F59  3072               	movlw	114
  5022     0F5A  0023               	movlb	3	; select bank3
  5023     0F5B  008C               	movwf	12	;volatile
  5024     0F5C                     l234:
  5025     0F5C  0008               	return
  5026     0F5D                     __end_of_WriteI2C:
  5027                           
  5028                           	psect	text25
  5029     0F4C                     __ptext25:	
  5030 ;; *************** function _StartI2C *****************
  5031 ;; Defined at:
  5032 ;;		line 366 in file "./Color_Header.h"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;		None
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;		None
  5037 ;; Return value:  Size  Location     Type
  5038 ;;                  1    wreg      void 
  5039 ;; Registers used:
  5040 ;;		None
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;Total ram usage:        0 bytes
  5051 ;; Hardware stack levels used: 1
  5052 ;; Hardware stack levels required when called: 2
  5053 ;; This function calls:
  5054 ;;		Nothing
  5055 ;; This function is called by:
  5056 ;;		_UpdateColors
  5057 ;; This function uses a non-reentrant model
  5058 ;;
  5059                           
  5060     0F4C                     _StartI2C:	
  5061                           ;psect for function _StartI2C
  5062                           
  5063     0F4C                     l1996:	
  5064                           ;incstack = 0
  5065                           ; Regs used in _StartI2C: []
  5066                           
  5067                           
  5068                           ;./Color_Header.h: 367:     PIR3bits.SSP1IF = 0;
  5069     0F4C  002E               	movlb	14	; select bank14
  5070     0F4D  100F               	bcf	15,0	;volatile
  5071                           
  5072                           ;./Color_Header.h: 368:     SSP1CON2bits.SEN = 1;
  5073     0F4E  0023               	movlb	3	; select bank3
  5074     0F4F  1411               	bsf	17,0	;volatile
  5075     0F50                     l228:
  5076     0F50  0008               	return
  5077     0F51                     __end_of_StartI2C:
  5078                           
  5079                           	psect	text26
  5080     067B                     __ptext26:	
  5081 ;; *************** function _SelectColourRegister *****************
  5082 ;; Defined at:
  5083 ;;		line 345 in file "./Color_Header.h"
  5084 ;; Parameters:    Size  Location     Type
  5085 ;;  colorStage      2    0[BANK0 ] int 
  5086 ;; Auto vars:     Size  Location     Type
  5087 ;;  writeValue      1    2[BANK0 ] unsigned char 
  5088 ;; Return value:  Size  Location     Type
  5089 ;;                  1    wreg      void 
  5090 ;; Registers used:
  5091 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5092 ;; Tracked objects:
  5093 ;;		On entry : 0/0
  5094 ;;		On exit  : 0/0
  5095 ;;		Unchanged: 0/0
  5096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5097 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5100 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;Total ram usage:        3 bytes
  5102 ;; Hardware stack levels used: 1
  5103 ;; Hardware stack levels required when called: 2
  5104 ;; This function calls:
  5105 ;;		Nothing
  5106 ;; This function is called by:
  5107 ;;		_UpdateColors
  5108 ;; This function uses a non-reentrant model
  5109 ;;
  5110                           
  5111     067B                     _SelectColourRegister:	
  5112                           ;psect for function _SelectColourRegister
  5113                           
  5114     067B                     l1966:	
  5115                           ;incstack = 0
  5116                           ; Regs used in _SelectColourRegister: [wreg-fsr0h+status,2+status,0]
  5117                           
  5118                           
  5119                           ;./Color_Header.h: 346:     unsigned char writeValue = 0;
  5120     067B  0020               	movlb	0	; select bank0
  5121     067C  01D1               	clrf	SelectColourRegister@writeValue
  5122                           
  5123                           ;./Color_Header.h: 347:     switch(colorStage){
  5124     067D  2E99               	goto	l1988
  5125     067E                     l1968:
  5126     067E  3093               	movlw	147
  5127     067F  00D1               	movwf	SelectColourRegister@writeValue
  5128     0680  2EBB               	goto	l1990
  5129     0681                     l1970:
  5130     0681  3094               	movlw	148
  5131     0682  00D1               	movwf	SelectColourRegister@writeValue
  5132     0683  2EBB               	goto	l1990
  5133     0684                     l1972:
  5134     0684  3095               	movlw	149
  5135     0685  00D1               	movwf	SelectColourRegister@writeValue
  5136     0686  2EBB               	goto	l1990
  5137     0687                     l1974:
  5138     0687  3096               	movlw	150
  5139     0688  00D1               	movwf	SelectColourRegister@writeValue
  5140     0689  2EBB               	goto	l1990
  5141     068A                     l1976:
  5142     068A  3097               	movlw	151
  5143     068B  00D1               	movwf	SelectColourRegister@writeValue
  5144     068C  2EBB               	goto	l1990
  5145     068D                     l1978:
  5146     068D  309A               	movlw	154
  5147     068E  00D1               	movwf	SelectColourRegister@writeValue
  5148     068F  2EBB               	goto	l1990
  5149     0690                     l1980:
  5150     0690  309B               	movlw	155
  5151     0691  00D1               	movwf	SelectColourRegister@writeValue
  5152     0692  2EBB               	goto	l1990
  5153     0693                     l1982:
  5154     0693  3098               	movlw	152
  5155     0694  00D1               	movwf	SelectColourRegister@writeValue
  5156     0695  2EBB               	goto	l1990
  5157     0696                     l1984:
  5158     0696  3099               	movlw	153
  5159     0697  00D1               	movwf	SelectColourRegister@writeValue
  5160     0698  2EBB               	goto	l1990
  5161     0699                     l1988:
  5162                           
  5163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5164                           ; Switch size 1, requested type "simple"
  5165                           ; Number of cases is 1, Range of values is 0 to 0
  5166                           ; switch strategies available:
  5167                           ; Name         Instructions Cycles
  5168                           ; simple_byte            4     3 (average)
  5169                           ; direct_byte            8     6 (fixed)
  5170                           ; jumptable            260     6 (fixed)
  5171                           ;	Chosen strategy is simple_byte
  5172     0699  0850               	movf	SelectColourRegister@colorStage+1,w
  5173     069A  3A00               	xorlw	0	; case 0
  5174     069B  1903               	skipnz
  5175     069C  2E9E               	goto	l2760
  5176     069D  2EBB               	goto	l1990
  5177     069E                     l2760:
  5178                           
  5179                           ; Switch size 1, requested type "simple"
  5180                           ; Number of cases is 9, Range of values is 0 to 8
  5181                           ; switch strategies available:
  5182                           ; Name         Instructions Cycles
  5183                           ; direct_byte           24     6 (fixed)
  5184                           ; simple_byte           28    15 (average)
  5185                           ; jumptable            260     6 (fixed)
  5186                           ;	Chosen strategy is simple_byte
  5187     069E  084F               	movf	SelectColourRegister@colorStage,w
  5188     069F  3A00               	xorlw	0	; case 0
  5189     06A0  1903               	skipnz
  5190     06A1  2E7E               	goto	l1968
  5191     06A2  3A01               	xorlw	1	; case 1
  5192     06A3  1903               	skipnz
  5193     06A4  2E81               	goto	l1970
  5194     06A5  3A03               	xorlw	3	; case 2
  5195     06A6  1903               	skipnz
  5196     06A7  2E84               	goto	l1972
  5197     06A8  3A01               	xorlw	1	; case 3
  5198     06A9  1903               	skipnz
  5199     06AA  2E87               	goto	l1974
  5200     06AB  3A07               	xorlw	7	; case 4
  5201     06AC  1903               	skipnz
  5202     06AD  2E8A               	goto	l1976
  5203     06AE  3A01               	xorlw	1	; case 5
  5204     06AF  1903               	skipnz
  5205     06B0  2E8D               	goto	l1978
  5206     06B1  3A03               	xorlw	3	; case 6
  5207     06B2  1903               	skipnz
  5208     06B3  2E90               	goto	l1980
  5209     06B4  3A01               	xorlw	1	; case 7
  5210     06B5  1903               	skipnz
  5211     06B6  2E93               	goto	l1982
  5212     06B7  3A0F               	xorlw	15	; case 8
  5213     06B8  1903               	skipnz
  5214     06B9  2E96               	goto	l1984
  5215     06BA  2EBB               	goto	l1990
  5216     06BB                     l1990:
  5217                           
  5218                           ;./Color_Header.h: 358:     SSP1BUFbits.SSPBUF = writeValue;
  5219     06BB  0851               	movf	SelectColourRegister@writeValue,w
  5220     06BC  0023               	movlb	3	; select bank3
  5221     06BD  008C               	movwf	12	;volatile
  5222     06BE                     l222:
  5223     06BE  0008               	return
  5224     06BF                     __end_of_SelectColourRegister:
  5225                           
  5226                           	psect	text27
  5227     0F41                     __ptext27:	
  5228 ;; *************** function _RepeatI2C *****************
  5229 ;; Defined at:
  5230 ;;		line 388 in file "./Color_Header.h"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;		None
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		None
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;Total ram usage:        0 bytes
  5249 ;; Hardware stack levels used: 1
  5250 ;; Hardware stack levels required when called: 2
  5251 ;; This function calls:
  5252 ;;		Nothing
  5253 ;; This function is called by:
  5254 ;;		_UpdateColors
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258     0F41                     _RepeatI2C:	
  5259                           ;psect for function _RepeatI2C
  5260                           
  5261     0F41                     l2008:	
  5262                           ;incstack = 0
  5263                           ; Regs used in _RepeatI2C: []
  5264                           
  5265                           
  5266                           ;./Color_Header.h: 390:     SSP1CON2bits.RSEN = 1;
  5267     0F41  0023               	movlb	3	; select bank3
  5268     0F42  1491               	bsf	17,1	;volatile
  5269     0F43                     l246:
  5270     0F43  0008               	return
  5271     0F44                     __end_of_RepeatI2C:
  5272                           
  5273                           	psect	text28
  5274     0F3E                     __ptext28:	
  5275 ;; *************** function _ReadI2C *****************
  5276 ;; Defined at:
  5277 ;;		line 385 in file "./Color_Header.h"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;		None
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  1    wreg      void 
  5284 ;; Registers used:
  5285 ;;		None
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;Total ram usage:        0 bytes
  5296 ;; Hardware stack levels used: 1
  5297 ;; Hardware stack levels required when called: 2
  5298 ;; This function calls:
  5299 ;;		Nothing
  5300 ;; This function is called by:
  5301 ;;		_UpdateColors
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305     0F3E                     _ReadI2C:	
  5306                           ;psect for function _ReadI2C
  5307                           
  5308     0F3E                     l2006:	
  5309                           ;incstack = 0
  5310                           ; Regs used in _ReadI2C: []
  5311                           
  5312                           
  5313                           ;./Color_Header.h: 386:     SSP1CON2bits.RCEN = 1;
  5314     0F3E  0023               	movlb	3	; select bank3
  5315     0F3F  1591               	bsf	17,3	;volatile
  5316     0F40                     l243:
  5317     0F40  0008               	return
  5318     0F41                     __end_of_ReadI2C:
  5319                           
  5320                           	psect	text29
  5321     0F51                     __ptext29:	
  5322 ;; *************** function _ReadAddressI2C *****************
  5323 ;; Defined at:
  5324 ;;		line 377 in file "./Color_Header.h"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5342 ;;Total ram usage:        0 bytes
  5343 ;; Hardware stack levels used: 1
  5344 ;; Hardware stack levels required when called: 2
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_UpdateColors
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352     0F51                     _ReadAddressI2C:	
  5353                           ;psect for function _ReadAddressI2C
  5354                           
  5355     0F51                     l2002:	
  5356                           ;incstack = 0
  5357                           ; Regs used in _ReadAddressI2C: [wreg]
  5358                           
  5359                           
  5360                           ;./Color_Header.h: 378:     PIR3bits.SSP1IF = 0;
  5361     0F51  002E               	movlb	14	; select bank14
  5362     0F52  100F               	bcf	15,0	;volatile
  5363     0F53                     l2004:
  5364                           
  5365                           ;./Color_Header.h: 379:     SSP1BUFbits.SSPBUF = (0x39 << 1) | 1;;
  5366     0F53  3073               	movlw	115
  5367     0F54  0023               	movlb	3	; select bank3
  5368     0F55  008C               	movwf	12	;volatile
  5369     0F56                     l237:
  5370     0F56  0008               	return
  5371     0F57                     __end_of_ReadAddressI2C:
  5372                           
  5373                           	psect	text30
  5374     03E1                     __ptext30:	
  5375 ;; *************** function _GetValueAndEndI2C *****************
  5376 ;; Defined at:
  5377 ;;		line 407 in file "./Color_Header.h"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  colors          1    wreg     PTR struct colorScheme
  5380 ;;		 -> colors(12), 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  colors          1    4[BANK0 ] PTR struct colorScheme
  5383 ;;		 -> colors(12), 
  5384 ;;  value           1    3[BANK0 ] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  1    wreg      void 
  5387 ;; Registers used:
  5388 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;Total ram usage:        2 bytes
  5399 ;; Hardware stack levels used: 1
  5400 ;; Hardware stack levels required when called: 4
  5401 ;; This function calls:
  5402 ;;		_EndI2C
  5403 ;;		_IncrementColorStage
  5404 ;;		_LoadTemp
  5405 ;;		_ReadColorReady
  5406 ;;		_Reset
  5407 ;; This function is called by:
  5408 ;;		_UpdateColors
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412     03E1                     _GetValueAndEndI2C:	
  5413                           ;psect for function _GetValueAndEndI2C
  5414                           
  5415                           
  5416                           ;incstack = 0
  5417                           ; Regs used in _GetValueAndEndI2C: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5418                           ;GetValueAndEndI2C@colors stored from wreg
  5419     03E1  0020               	movlb	0	; select bank0
  5420     03E2  00D3               	movwf	GetValueAndEndI2C@colors
  5421     03E3                     l2010:
  5422                           
  5423                           ;./Color_Header.h: 409:     unsigned char value = SSP1BUF;
  5424     03E3  0023               	movlb	3	; select bank3
  5425     03E4  080C               	movf	12,w	;volatile
  5426     03E5  0020               	movlb	0	; select bank0
  5427     03E6  00D2               	movwf	GetValueAndEndI2C@value
  5428                           
  5429                           ;./Color_Header.h: 410:     switch(colors->colorStage){
  5430     03E7  2C62               	goto	l2048
  5431     03E8                     l2012:
  5432     03E8  0852               	movf	GetValueAndEndI2C@value,w
  5433     03E9  00D0               	movwf	ReadColorReady@buffer
  5434     03EA  0853               	movf	GetValueAndEndI2C@colors,w
  5435     03EB  3187  27B0  3183   	fcall	_ReadColorReady
  5436     03EE  2C83               	goto	l2050
  5437     03EF                     l2014:
  5438     03EF  0852               	movf	GetValueAndEndI2C@value,w
  5439     03F0  00CF               	movwf	LoadTemp@value
  5440     03F1  0853               	movf	GetValueAndEndI2C@colors,w
  5441     03F2  318F  2769  3183   	fcall	_LoadTemp
  5442     03F5                     l2016:
  5443     03F5  0020               	movlb	0	; select bank0
  5444     03F6  0853               	movf	GetValueAndEndI2C@colors,w
  5445     03F7  318F  27AF  3183   	fcall	_IncrementColorStage
  5446     03FA  2C83               	goto	l2050
  5447     03FB                     l2018:
  5448     03FB  0853               	movf	GetValueAndEndI2C@colors,w
  5449     03FC  3E08               	addlw	8
  5450     03FD  0086               	movwf	6
  5451     03FE  0187               	clrf	7
  5452     03FF  0853               	movf	GetValueAndEndI2C@colors,w
  5453     0400  0084               	movwf	4
  5454     0401  0185               	clrf	5
  5455     0402  0801               	movf	1,w
  5456     0403  3F80               	movwi [0]fsr0
  5457     0404  0852               	movf	GetValueAndEndI2C@value,w
  5458     0405  3F81               	movwi [1]fsr0
  5459     0406                     l2020:
  5460     0406  0853               	movf	GetValueAndEndI2C@colors,w
  5461     0407  318F  27AF  3183   	fcall	_IncrementColorStage
  5462     040A  2C83               	goto	l2050
  5463     040B                     l2022:
  5464     040B  0852               	movf	GetValueAndEndI2C@value,w
  5465     040C  00CF               	movwf	LoadTemp@value
  5466     040D  0853               	movf	GetValueAndEndI2C@colors,w
  5467     040E  318F  2769  3183   	fcall	_LoadTemp
  5468     0411                     l2024:
  5469     0411  0020               	movlb	0	; select bank0
  5470     0412  0853               	movf	GetValueAndEndI2C@colors,w
  5471     0413  318F  27AF  3183   	fcall	_IncrementColorStage
  5472     0416                     l2026:
  5473     0416  0020               	movlb	0	; select bank0
  5474     0417  0853               	movf	GetValueAndEndI2C@colors,w
  5475     0418  3E08               	addlw	8
  5476     0419  0086               	movwf	6
  5477     041A  0187               	clrf	7
  5478     041B  0853               	movf	GetValueAndEndI2C@colors,w
  5479     041C  3E06               	addlw	6
  5480     041D  0084               	movwf	4
  5481     041E  0185               	clrf	5
  5482     041F  0801               	movf	1,w
  5483     0420  3F80               	movwi [0]fsr0
  5484     0421  0852               	movf	GetValueAndEndI2C@value,w
  5485     0422  3F81               	movwi [1]fsr0
  5486     0423                     l2028:
  5487     0423  0853               	movf	GetValueAndEndI2C@colors,w
  5488     0424  318F  27AF  3183   	fcall	_IncrementColorStage
  5489     0427  2C83               	goto	l2050
  5490     0428                     l2030:
  5491     0428  0852               	movf	GetValueAndEndI2C@value,w
  5492     0429  00CF               	movwf	LoadTemp@value
  5493     042A  0853               	movf	GetValueAndEndI2C@colors,w
  5494     042B  318F  2769  3183   	fcall	_LoadTemp
  5495     042E                     l2032:
  5496     042E  0020               	movlb	0	; select bank0
  5497     042F  0853               	movf	GetValueAndEndI2C@colors,w
  5498     0430  318F  27AF  3183   	fcall	_IncrementColorStage
  5499     0433  2C83               	goto	l2050
  5500     0434                     l2034:
  5501     0434  0853               	movf	GetValueAndEndI2C@colors,w
  5502     0435  3E08               	addlw	8
  5503     0436  0086               	movwf	6
  5504     0437  0187               	clrf	7
  5505     0438  0853               	movf	GetValueAndEndI2C@colors,w
  5506     0439  3E04               	addlw	4
  5507     043A  0084               	movwf	4
  5508     043B  0185               	clrf	5
  5509     043C  0801               	movf	1,w
  5510     043D  3F80               	movwi [0]fsr0
  5511     043E  0852               	movf	GetValueAndEndI2C@value,w
  5512     043F  3F81               	movwi [1]fsr0
  5513     0440                     l2036:
  5514     0440  0853               	movf	GetValueAndEndI2C@colors,w
  5515     0441  318F  27AF  3183   	fcall	_IncrementColorStage
  5516     0444  2C83               	goto	l2050
  5517     0445                     l2038:
  5518     0445  0852               	movf	GetValueAndEndI2C@value,w
  5519     0446  00CF               	movwf	LoadTemp@value
  5520     0447  0853               	movf	GetValueAndEndI2C@colors,w
  5521     0448  318F  2769  3183   	fcall	_LoadTemp
  5522     044B                     l2040:
  5523     044B  0020               	movlb	0	; select bank0
  5524     044C  0853               	movf	GetValueAndEndI2C@colors,w
  5525     044D  318F  27AF  3183   	fcall	_IncrementColorStage
  5526     0450  2C83               	goto	l2050
  5527     0451                     l2042:
  5528     0451  0853               	movf	GetValueAndEndI2C@colors,w
  5529     0452  3E08               	addlw	8
  5530     0453  0086               	movwf	6
  5531     0454  0187               	clrf	7
  5532     0455  0853               	movf	GetValueAndEndI2C@colors,w
  5533     0456  3E02               	addlw	2
  5534     0457  0084               	movwf	4
  5535     0458  0185               	clrf	5
  5536     0459  0801               	movf	1,w
  5537     045A  3F80               	movwi [0]fsr0
  5538     045B  0852               	movf	GetValueAndEndI2C@value,w
  5539     045C  3F81               	movwi [1]fsr0
  5540     045D                     l2044:
  5541     045D  0853               	movf	GetValueAndEndI2C@colors,w
  5542     045E  318F  27ED  3183   	fcall	_Reset
  5543     0461  2C83               	goto	l2050
  5544     0462                     l2048:
  5545     0462  0853               	movf	GetValueAndEndI2C@colors,w
  5546     0463  3E0A               	addlw	10
  5547     0464  0086               	movwf	6
  5548     0465  0187               	clrf	7
  5549     0466  0801               	movf	1,w
  5550                           
  5551                           ; Switch size 1, requested type "simple"
  5552                           ; Number of cases is 9, Range of values is 0 to 8
  5553                           ; switch strategies available:
  5554                           ; Name         Instructions Cycles
  5555                           ; direct_byte           24     6 (fixed)
  5556                           ; simple_byte           28    15 (average)
  5557                           ; jumptable            260     6 (fixed)
  5558                           ;	Chosen strategy is simple_byte
  5559     0467  3A00               	xorlw	0	; case 0
  5560     0468  1903               	skipnz
  5561     0469  2BE8               	goto	l2012
  5562     046A  3A01               	xorlw	1	; case 1
  5563     046B  1903               	skipnz
  5564     046C  2BEF               	goto	l2014
  5565     046D  3A03               	xorlw	3	; case 2
  5566     046E  1903               	skipnz
  5567     046F  2BFB               	goto	l2018
  5568     0470  3A01               	xorlw	1	; case 3
  5569     0471  1903               	skipnz
  5570     0472  2C0B               	goto	l2022
  5571     0473  3A07               	xorlw	7	; case 4
  5572     0474  1903               	skipnz
  5573     0475  2C16               	goto	l2026
  5574     0476  3A01               	xorlw	1	; case 5
  5575     0477  1903               	skipnz
  5576     0478  2C28               	goto	l2030
  5577     0479  3A03               	xorlw	3	; case 6
  5578     047A  1903               	skipnz
  5579     047B  2C34               	goto	l2034
  5580     047C  3A01               	xorlw	1	; case 7
  5581     047D  1903               	skipnz
  5582     047E  2C45               	goto	l2038
  5583     047F  3A0F               	xorlw	15	; case 8
  5584     0480  1903               	skipnz
  5585     0481  2C51               	goto	l2042
  5586     0482  2C83               	goto	l2050
  5587     0483                     l2050:
  5588                           
  5589                           ;./Color_Header.h: 422:     EndI2C();
  5590     0483  318F  273B  3183   	fcall	_EndI2C
  5591     0486                     l270:
  5592     0486  0008               	return
  5593     0487                     __end_of_GetValueAndEndI2C:
  5594                           
  5595                           	psect	text31
  5596     0FED                     __ptext31:	
  5597 ;; *************** function _Reset *****************
  5598 ;; Defined at:
  5599 ;;		line 361 in file "./Color_Header.h"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;  colors          1    wreg     PTR struct colorScheme
  5602 ;;		 -> colors(12), 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  colors          1    0[BANK0 ] PTR struct colorScheme
  5605 ;;		 -> colors(12), 
  5606 ;; Return value:  Size  Location     Type
  5607 ;;                  1    wreg      void 
  5608 ;; Registers used:
  5609 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5610 ;; Tracked objects:
  5611 ;;		On entry : 0/0
  5612 ;;		On exit  : 0/0
  5613 ;;		Unchanged: 0/0
  5614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;Total ram usage:        1 bytes
  5620 ;; Hardware stack levels used: 1
  5621 ;; Hardware stack levels required when called: 2
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_GetValueAndEndI2C
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629     0FED                     _Reset:	
  5630                           ;psect for function _Reset
  5631                           
  5632                           
  5633                           ;incstack = 0
  5634                           ; Regs used in _Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  5635                           ;Reset@colors stored from wreg
  5636     0FED  0020               	movlb	0	; select bank0
  5637     0FEE  00CF               	movwf	Reset@colors
  5638     0FEF                     l1922:
  5639                           
  5640                           ;./Color_Header.h: 362:     colors->colorStage = 0;
  5641     0FEF  084F               	movf	Reset@colors,w
  5642     0FF0  3E0A               	addlw	10
  5643     0FF1  0086               	movwf	6
  5644     0FF2  0187               	clrf	7
  5645     0FF3  0181               	clrf	1
  5646                           
  5647                           ;./Color_Header.h: 363:     colors->ready = 0;
  5648     0FF4  084F               	movf	Reset@colors,w
  5649     0FF5  3E09               	addlw	9
  5650     0FF6  0086               	movwf	6
  5651     0FF7  0187               	clrf	7
  5652     0FF8  0181               	clrf	1
  5653                           
  5654                           ;./Color_Header.h: 364:     colors->allDone = 1;
  5655     0FF9  084F               	movf	Reset@colors,w
  5656     0FFA  3E0B               	addlw	11
  5657     0FFB  0086               	movwf	6
  5658     0FFC  0187               	clrf	7
  5659     0FFD  0181               	clrf	1
  5660     0FFE  0A81               	incf	1,f
  5661     0FFF                     l225:
  5662     0FFF  0008               	return
  5663     1000                     __end_of_Reset:
  5664                           
  5665                           	psect	text32
  5666     07B0                     __ptext32:	
  5667 ;; *************** function _ReadColorReady *****************
  5668 ;; Defined at:
  5669 ;;		line 399 in file "./Color_Header.h"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;  colors          1    wreg     PTR struct colorScheme
  5672 ;;		 -> colors(12), 
  5673 ;;  buffer          1    1[BANK0 ] unsigned char 
  5674 ;; Auto vars:     Size  Location     Type
  5675 ;;  colors          1    2[BANK0 ] PTR struct colorScheme
  5676 ;;		 -> colors(12), 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  1    wreg      void 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        2 bytes
  5691 ;; Hardware stack levels used: 1
  5692 ;; Hardware stack levels required when called: 3
  5693 ;; This function calls:
  5694 ;;		_IncrementColorStage
  5695 ;; This function is called by:
  5696 ;;		_GetValueAndEndI2C
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700     07B0                     _ReadColorReady:	
  5701                           ;psect for function _ReadColorReady
  5702                           
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _ReadColorReady: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5706                           ;ReadColorReady@colors stored from wreg
  5707     07B0  0020               	movlb	0	; select bank0
  5708     07B1  00D1               	movwf	ReadColorReady@colors
  5709     07B2                     l1928:
  5710                           
  5711                           ;./Color_Header.h: 400:     buffer = buffer & 0x1;
  5712     07B2  0850               	movf	ReadColorReady@buffer,w
  5713     07B3  3901               	andlw	1
  5714     07B4  00D0               	movwf	ReadColorReady@buffer
  5715     07B5                     l1930:
  5716                           
  5717                           ;./Color_Header.h: 401:     colors->ready = buffer;
  5718     07B5  0851               	movf	ReadColorReady@colors,w
  5719     07B6  3E09               	addlw	9
  5720     07B7  0086               	movwf	6
  5721     07B8  0187               	clrf	7
  5722     07B9  0850               	movf	ReadColorReady@buffer,w
  5723     07BA  0081               	movwf	1
  5724     07BB                     l1932:
  5725                           
  5726                           ;./Color_Header.h: 402:     if(colors->ready == 1){
  5727     07BB  0851               	movf	ReadColorReady@colors,w
  5728     07BC  3E09               	addlw	9
  5729     07BD  0086               	movwf	6
  5730     07BE  0187               	clrf	7
  5731     07BF  0301               	decf	1,w
  5732     07C0  1D03               	btfss	3,2
  5733     07C1  2FC3               	goto	u711
  5734     07C2  2FC4               	goto	u710
  5735     07C3                     u711:
  5736     07C3  2FC8               	goto	l256
  5737     07C4                     u710:
  5738     07C4                     l1934:
  5739                           
  5740                           ;./Color_Header.h: 403:         IncrementColorStage(colors);
  5741     07C4  0851               	movf	ReadColorReady@colors,w
  5742     07C5  318F  27AF  3187   	fcall	_IncrementColorStage
  5743     07C8                     l256:
  5744     07C8  0008               	return
  5745     07C9                     __end_of_ReadColorReady:
  5746                           
  5747                           	psect	text33
  5748     0FAF                     __ptext33:	
  5749 ;; *************** function _IncrementColorStage *****************
  5750 ;; Defined at:
  5751 ;;		line 392 in file "./Color_Header.h"
  5752 ;; Parameters:    Size  Location     Type
  5753 ;;  colors          1    wreg     PTR struct colorScheme
  5754 ;;		 -> colors(12), 
  5755 ;; Auto vars:     Size  Location     Type
  5756 ;;  colors          1    0[BANK0 ] PTR struct colorScheme
  5757 ;;		 -> colors(12), 
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      void 
  5760 ;; Registers used:
  5761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5771 ;;Total ram usage:        1 bytes
  5772 ;; Hardware stack levels used: 1
  5773 ;; Hardware stack levels required when called: 2
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_ReadColorReady
  5778 ;;		_GetValueAndEndI2C
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782     0FAF                     _IncrementColorStage:	
  5783                           ;psect for function _IncrementColorStage
  5784                           
  5785                           
  5786                           ;incstack = 0
  5787                           ; Regs used in _IncrementColorStage: [wreg-fsr1h+status,2+status,0]
  5788                           ;IncrementColorStage@colors stored from wreg
  5789     0FAF  0020               	movlb	0	; select bank0
  5790     0FB0  00CF               	movwf	IncrementColorStage@colors
  5791     0FB1                     l1920:
  5792                           
  5793                           ;./Color_Header.h: 393:     colors->colorStage = colors->colorStage +1;
  5794     0FB1  084F               	movf	IncrementColorStage@colors,w
  5795     0FB2  3E0A               	addlw	10
  5796     0FB3  0086               	movwf	6
  5797     0FB4  0187               	clrf	7
  5798     0FB5  084F               	movf	IncrementColorStage@colors,w
  5799     0FB6  3E0A               	addlw	10
  5800     0FB7  0084               	movwf	4
  5801     0FB8  0185               	clrf	5
  5802     0FB9  0800               	movf	0,w
  5803     0FBA  3E01               	addlw	1
  5804     0FBB  0081               	movwf	1
  5805     0FBC                     l249:
  5806     0FBC  0008               	return
  5807     0FBD                     __end_of_IncrementColorStage:
  5808                           
  5809                           	psect	text34
  5810     0F69                     __ptext34:	
  5811 ;; *************** function _LoadTemp *****************
  5812 ;; Defined at:
  5813 ;;		line 396 in file "./Color_Header.h"
  5814 ;; Parameters:    Size  Location     Type
  5815 ;;  colors          1    wreg     PTR struct colorScheme
  5816 ;;		 -> colors(12), 
  5817 ;;  value           1    0[BANK0 ] unsigned char 
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  colors          1    1[BANK0 ] PTR struct colorScheme
  5820 ;;		 -> colors(12), 
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5830 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5834 ;;Total ram usage:        2 bytes
  5835 ;; Hardware stack levels used: 1
  5836 ;; Hardware stack levels required when called: 2
  5837 ;; This function calls:
  5838 ;;		Nothing
  5839 ;; This function is called by:
  5840 ;;		_GetValueAndEndI2C
  5841 ;; This function uses a non-reentrant model
  5842 ;;
  5843                           
  5844     0F69                     _LoadTemp:	
  5845                           ;psect for function _LoadTemp
  5846                           
  5847                           
  5848                           ;incstack = 0
  5849                           ; Regs used in _LoadTemp: [wreg+fsr1l+fsr1h+status,2+status,0]
  5850                           ;LoadTemp@colors stored from wreg
  5851     0F69  0020               	movlb	0	; select bank0
  5852     0F6A  00D0               	movwf	LoadTemp@colors
  5853     0F6B                     l1926:
  5854                           
  5855                           ;./Color_Header.h: 397:     colors->temp = value;
  5856     0F6B  0850               	movf	LoadTemp@colors,w
  5857     0F6C  3E08               	addlw	8
  5858     0F6D  0086               	movwf	6
  5859     0F6E  0187               	clrf	7
  5860     0F6F  084F               	movf	LoadTemp@value,w
  5861     0F70  0081               	movwf	1
  5862     0F71                     l252:
  5863     0F71  0008               	return
  5864     0F72                     __end_of_LoadTemp:
  5865                           
  5866                           	psect	text35
  5867     0F3B                     __ptext35:	
  5868 ;; *************** function _EndI2C *****************
  5869 ;; Defined at:
  5870 ;;		line 370 in file "./Color_Header.h"
  5871 ;; Parameters:    Size  Location     Type
  5872 ;;		None
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;		None
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      void 
  5877 ;; Registers used:
  5878 ;;		None
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5888 ;;Total ram usage:        0 bytes
  5889 ;; Hardware stack levels used: 1
  5890 ;; Hardware stack levels required when called: 2
  5891 ;; This function calls:
  5892 ;;		Nothing
  5893 ;; This function is called by:
  5894 ;;		_GetValueAndEndI2C
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898     0F3B                     _EndI2C:	
  5899                           ;psect for function _EndI2C
  5900                           
  5901     0F3B                     l1924:	
  5902                           ;incstack = 0
  5903                           ; Regs used in _EndI2C: []
  5904                           
  5905                           
  5906                           ;./Color_Header.h: 371:     SSP1CON2bits.PEN = 1;
  5907     0F3B  0023               	movlb	3	; select bank3
  5908     0F3C  1511               	bsf	17,2	;volatile
  5909     0F3D                     l231:
  5910     0F3D  0008               	return
  5911     0F3E                     __end_of_EndI2C:
  5912                           
  5913                           	psect	text36
  5914     0FBD                     __ptext36:	
  5915 ;; *************** function _ActivatePump *****************
  5916 ;; Defined at:
  5917 ;;		line 407 in file "motorMain.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;  switchValue     2    0[BANK0 ] int 
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;		None
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  1    wreg      void 
  5924 ;; Registers used:
  5925 ;;		wreg
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5931 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5935 ;;Total ram usage:        2 bytes
  5936 ;; Hardware stack levels used: 1
  5937 ;; Hardware stack levels required when called: 2
  5938 ;; This function calls:
  5939 ;;		Nothing
  5940 ;; This function is called by:
  5941 ;;		_main
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945     0FBD                     _ActivatePump:	
  5946                           ;psect for function _ActivatePump
  5947                           
  5948     0FBD                     l2316:	
  5949                           ;incstack = 0
  5950                           ; Regs used in _ActivatePump: [wreg]
  5951                           
  5952                           
  5953                           ;motorMain.c: 408:     if(switchValue <= SWITCH_MIN){
  5954     0FBD  3003               	movlw	3
  5955     0FBE  0020               	movlb	0	; select bank0
  5956     0FBF  0250               	subwf	ActivatePump@switchValue+1,w
  5957     0FC0  30E9               	movlw	233
  5958     0FC1  1903               	skipnz
  5959     0FC2  024F               	subwf	ActivatePump@switchValue,w
  5960     0FC3  1803               	skipnc
  5961     0FC4  2FC6               	goto	u1071
  5962     0FC5  2FC7               	goto	u1070
  5963     0FC6                     u1071:
  5964     0FC6  2FCA               	goto	l443
  5965     0FC7                     u1070:
  5966     0FC7                     l2318:
  5967                           
  5968                           ;motorMain.c: 409:         LATBbits.LATB2 = 1;
  5969     0FC7  1517               	bsf	23,2	;volatile
  5970                           
  5971                           ;motorMain.c: 410:         LATBbits.LATB3 = 0;
  5972     0FC8  1197               	bcf	23,3	;volatile
  5973                           
  5974                           ;motorMain.c: 411:     }
  5975     0FC9  2FCC               	goto	l445
  5976     0FCA                     l443:	
  5977                           ;motorMain.c: 412:     else{
  5978                           
  5979                           
  5980                           ;motorMain.c: 413:         LATBbits.LATB2 = 0;
  5981     0FCA  1117               	bcf	23,2	;volatile
  5982                           
  5983                           ;motorMain.c: 414:         LATBbits.LATB3 = 0;
  5984     0FCB  1197               	bcf	23,3	;volatile
  5985     0FCC                     l445:
  5986     0FCC  0008               	return
  5987     0FCD                     __end_of_ActivatePump:
  5988                           
  5989                           	psect	intentry
  5990     0004                     __pintentry:	
  5991 ;; *************** function _myFunction *****************
  5992 ;; Defined at:
  5993 ;;		line 417 in file "motorMain.c"
  5994 ;; Parameters:    Size  Location     Type
  5995 ;;		None
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  input           2    7[COMMON] int 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6011 ;;Total ram usage:        4 bytes
  6012 ;; Hardware stack levels used: 1
  6013 ;; Hardware stack levels required when called: 1
  6014 ;; This function calls:
  6015 ;;		_GetControllerInput
  6016 ;; This function is called by:
  6017 ;;		Interrupt level 1
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021     0004                     _myFunction:
  6022                           
  6023                           ;incstack = 0
  6024     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  6025                           
  6026                           ; Regs used in _myFunction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6027     0005  3180               	pagesel	$
  6028     0006                     i1l2652:
  6029                           
  6030                           ;motorMain.c: 418:     if(PIR3bits.SSP1IF == 1){
  6031     0006  002E               	movlb	14	; select bank14
  6032     0007  1C0F               	btfss	15,0	;volatile
  6033     0008  280A               	goto	u131_21
  6034     0009  280B               	goto	u131_20
  6035     000A                     u131_21:
  6036     000A  2810               	goto	i1l450
  6037     000B                     u131_20:
  6038     000B                     i1l2654:
  6039                           
  6040                           ;motorMain.c: 420:         newI2CMessage = 1;
  6041     000B  0020               	movlb	0	; select bank0
  6042     000C  01EF               	clrf	_newI2CMessage
  6043     000D  0AEF               	incf	_newI2CMessage,f
  6044                           
  6045                           ;motorMain.c: 421:         PIR3bits.SSP1IF = 0;
  6046     000E  002E               	movlb	14	; select bank14
  6047     000F  100F               	bcf	15,0	;volatile
  6048     0010                     i1l450:	
  6049                           ;motorMain.c: 422:     }
  6050                           
  6051                           
  6052                           ;motorMain.c: 423:     if(PIR3bits.RCIF == 1){
  6053     0010  1E8F               	btfss	15,5	;volatile
  6054     0011  2813               	goto	u132_21
  6055     0012  2814               	goto	u132_20
  6056     0013                     u132_21:
  6057     0013  2849               	goto	i1l2672
  6058     0014                     u132_20:
  6059     0014                     i1l2656:
  6060                           
  6061                           ;motorMain.c: 424:         int input = RCREG;
  6062     0014  0022               	movlb	2	; select bank2
  6063     0015  0819               	movf	25,w	;volatile
  6064     0016  00F5               	movwf	??_myFunction
  6065     0017  01F6               	clrf	??_myFunction+1
  6066     0018  0875               	movf	??_myFunction,w
  6067     0019  00F7               	movwf	myFunction@input
  6068     001A  0876               	movf	??_myFunction+1,w
  6069     001B  00F8               	movwf	myFunction@input+1
  6070     001C                     i1l2658:
  6071                           
  6072                           ;motorMain.c: 425:         if(currentCommand.receiveId == CONTROL_INPUT){
  6073     001C  0020               	movlb	0	; select bank0
  6074     001D  0341               	decf	_currentCommand+11,w
  6075     001E  0442               	iorwf	_currentCommand+12,w
  6076     001F  1D03               	btfss	3,2
  6077     0020  2822               	goto	u133_21
  6078     0021  2823               	goto	u133_20
  6079     0022                     u133_21:
  6080     0022  2831               	goto	i1l2664
  6081     0023                     u133_20:
  6082     0023                     i1l2660:
  6083                           
  6084                           ;motorMain.c: 426:             GetControllerInput(input);
  6085     0023  0878               	movf	myFunction@input+1,w
  6086     0024  00F1               	movwf	GetControllerInput@input+1
  6087     0025  0877               	movf	myFunction@input,w
  6088     0026  00F0               	movwf	GetControllerInput@input
  6089     0027  3181  21D3  3180   	fcall	_GetControllerInput
  6090     002A                     i1l2662:
  6091                           
  6092                           ;motorMain.c: 427:             currentCommand.receiveIt = currentCommand.receiveIt + 1;
  6093     002A  0020               	movlb	0	; select bank0
  6094     002B  083D               	movf	_currentCommand+7,w
  6095     002C  3E01               	addlw	1
  6096     002D  00BD               	movwf	_currentCommand+7
  6097     002E  3000               	movlw	0
  6098     002F  3D3E               	addwfc	_currentCommand+8,w
  6099     0030  00BE               	movwf	_currentCommand+8
  6100     0031                     i1l2664:
  6101                           
  6102                           ;motorMain.c: 429:         if(currentCommand.receiveIt >= currentCommand.receiveLimit){
  6103     0031  083E               	movf	_currentCommand+8,w
  6104     0032  3A80               	xorlw	128
  6105     0033  00F5               	movwf	??_myFunction
  6106     0034  0840               	movf	_currentCommand+10,w
  6107     0035  3A80               	xorlw	128
  6108     0036  0275               	subwf	??_myFunction,w
  6109     0037  1D03               	skipz
  6110     0038  283B               	goto	u134_25
  6111     0039  083F               	movf	_currentCommand+9,w
  6112     003A  023D               	subwf	_currentCommand+7,w
  6113     003B                     u134_25:
  6114     003B  1C03               	skipc
  6115     003C  283E               	goto	u134_21
  6116     003D  283F               	goto	u134_20
  6117     003E                     u134_21:
  6118     003E  2842               	goto	i1l2668
  6119     003F                     u134_20:
  6120     003F                     i1l2666:
  6121                           
  6122                           ;motorMain.c: 430:             currentCommand.done = 1;
  6123     003F  0020               	movlb	0	; select bank0
  6124     0040  01C3               	clrf	_currentCommand+13
  6125     0041  0AC3               	incf	_currentCommand+13,f
  6126     0042                     i1l2668:
  6127                           
  6128                           ;motorMain.c: 432:         inputStage++;
  6129     0042  3001               	movlw	1
  6130     0043  0020               	movlb	0	; select bank0
  6131     0044  07C8               	addwf	_inputStage,f
  6132     0045  3000               	movlw	0
  6133     0046  3DC9               	addwfc	_inputStage+1,f
  6134     0047                     i1l2670:
  6135                           
  6136                           ;motorMain.c: 433:         PIR3bits.RCIF =0;
  6137     0047  002E               	movlb	14	; select bank14
  6138     0048  128F               	bcf	15,5	;volatile
  6139     0049                     i1l2672:
  6140                           
  6141                           ;motorMain.c: 436:     if(PIR3bits.TXIF == 1){
  6142     0049  1E0F               	btfss	15,4	;volatile
  6143     004A  284C               	goto	u135_21
  6144     004B  284D               	goto	u135_20
  6145     004C                     u135_21:
  6146     004C  2883               	goto	i1l458
  6147     004D                     u135_20:
  6148     004D                     i1l2674:
  6149                           
  6150                           ;motorMain.c: 437:         if(currentCommand.sendIt >= currentCommand.sendLimit){
  6151     004D  0020               	movlb	0	; select bank0
  6152     004E  0839               	movf	_currentCommand+3,w
  6153     004F  3A80               	xorlw	128
  6154     0050  00F5               	movwf	??_myFunction
  6155     0051  0837               	movf	_currentCommand+1,w
  6156     0052  3A80               	xorlw	128
  6157     0053  0275               	subwf	??_myFunction,w
  6158     0054  1D03               	skipz
  6159     0055  2858               	goto	u136_25
  6160     0056  0836               	movf	_currentCommand,w
  6161     0057  0238               	subwf	_currentCommand+2,w
  6162     0058                     u136_25:
  6163     0058  1C03               	skipc
  6164     0059  285B               	goto	u136_21
  6165     005A  285C               	goto	u136_20
  6166     005B                     u136_21:
  6167     005B  2870               	goto	i1l2682
  6168     005C                     u136_20:
  6169     005C                     i1l2676:
  6170                           
  6171                           ;motorMain.c: 438:             PIE3bits.TXIE = 0;
  6172     005C  002E               	movlb	14	; select bank14
  6173     005D  1219               	bcf	25,4	;volatile
  6174     005E                     i1l2678:
  6175                           
  6176                           ;motorMain.c: 439:             if(currentCommand.receiveLimit <= 0){
  6177     005E  0020               	movlb	0	; select bank0
  6178     005F  0840               	movf	_currentCommand+10,w
  6179     0060  3A80               	xorlw	128
  6180     0061  00F5               	movwf	??_myFunction
  6181     0062  3080               	movlw	128
  6182     0063  0275               	subwf	??_myFunction,w
  6183     0064  1D03               	skipz
  6184     0065  2868               	goto	u137_25
  6185     0066  3001               	movlw	1
  6186     0067  023F               	subwf	_currentCommand+9,w
  6187     0068                     u137_25:
  6188     0068  1803               	skipnc
  6189     0069  286B               	goto	u137_21
  6190     006A  286C               	goto	u137_20
  6191     006B                     u137_21:
  6192     006B  2881               	goto	i1l2686
  6193     006C                     u137_20:
  6194     006C                     i1l2680:
  6195                           
  6196                           ;motorMain.c: 440:                 currentCommand.done = 1;
  6197     006C  0020               	movlb	0	; select bank0
  6198     006D  01C3               	clrf	_currentCommand+13
  6199     006E  0AC3               	incf	_currentCommand+13,f
  6200     006F  2881               	goto	i1l2686
  6201     0070                     i1l2682:
  6202                           
  6203                           ;motorMain.c: 444:             TX1REGbits.TX1REG = currentCommand.toSend[currentCommand.
      +                          sendIt];
  6204     0070  0020               	movlb	0	; select bank0
  6205     0071  0838               	movf	_currentCommand+2,w
  6206     0072  073C               	addwf	low ((_currentCommand| 0+6)),w
  6207     0073  00F5               	movwf	??_myFunction
  6208     0074  0875               	movf	??_myFunction,w
  6209     0075  0086               	movwf	6
  6210     0076  0187               	clrf	7
  6211     0077  0801               	movf	1,w
  6212     0078  0022               	movlb	2	; select bank2
  6213     0079  009A               	movwf	26	;volatile
  6214     007A                     i1l2684:
  6215                           
  6216                           ;motorMain.c: 445:             currentCommand.sendIt = currentCommand.sendIt + 1;
  6217     007A  0020               	movlb	0	; select bank0
  6218     007B  0838               	movf	_currentCommand+2,w
  6219     007C  3E01               	addlw	1
  6220     007D  00B8               	movwf	_currentCommand+2
  6221     007E  3000               	movlw	0
  6222     007F  3D39               	addwfc	_currentCommand+3,w
  6223     0080  00B9               	movwf	_currentCommand+3
  6224     0081                     i1l2686:
  6225                           
  6226                           ;motorMain.c: 447:         PIR3bits.TXIF = 0;
  6227     0081  002E               	movlb	14	; select bank14
  6228     0082  120F               	bcf	15,4	;volatile
  6229     0083                     i1l458:
  6230     0083  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  6231     0084  0009               	retfie
  6232     0085                     __end_of_myFunction:
  6233                           
  6234                           	psect	text38
  6235     01D3                     __ptext38:	
  6236 ;; *************** function _GetControllerInput *****************
  6237 ;; Defined at:
  6238 ;;		line 234 in file "motorMain.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;  input           2    0[COMMON] int 
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;		None
  6243 ;; Return value:  Size  Location     Type
  6244 ;;                  1    wreg      void 
  6245 ;; Registers used:
  6246 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  6247 ;; Tracked objects:
  6248 ;;		On entry : 0/0
  6249 ;;		On exit  : 0/0
  6250 ;;		Unchanged: 0/0
  6251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6252 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;Total ram usage:        5 bytes
  6257 ;; Hardware stack levels used: 1
  6258 ;; This function calls:
  6259 ;;		Nothing
  6260 ;; This function is called by:
  6261 ;;		_myFunction
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265     01D3                     _GetControllerInput:	
  6266                           ;psect for function _GetControllerInput
  6267                           
  6268     01D3                     i1l2364:	
  6269                           ;incstack = 0
  6270                           ; Regs used in _GetControllerInput: [wreg-fsr1h+status,2+status,0]
  6271                           
  6272                           
  6273                           ;motorMain.c: 235:     if(currentCommand.receiveIt <0 ){
  6274     01D3  3007               	movlw	7
  6275     01D4  3E36               	addlw	(low (_currentCommand| 0))& (0+255)
  6276     01D5  0086               	movwf	6
  6277     01D6  0187               	clrf	7
  6278     01D7  3141               	addfsr 1,1
  6279     01D8  1F81               	btfss	1,7
  6280     01D9  29DB               	goto	u124_21
  6281     01DA  29DC               	goto	u124_20
  6282     01DB                     u124_21:
  6283     01DB  2A98               	goto	i1l2412
  6284     01DC                     u124_20:
  6285     01DC  2ADC               	goto	i1l375
  6286     01DD                     i1l2368:
  6287     01DD  0871               	movf	GetControllerInput@input+1,w
  6288     01DE  00B5               	movwf	_controls+21
  6289     01DF  0870               	movf	GetControllerInput@input,w
  6290     01E0  00B4               	movwf	_controls+20
  6291     01E1  2ADC               	goto	i1l375
  6292     01E2                     i1l2370:
  6293     01E2  3014               	movlw	20
  6294     01E3  3E20               	addlw	(low (_controls| 0))& (0+255)
  6295     01E4  0086               	movwf	6
  6296     01E5  0187               	clrf	7
  6297     01E6  0871               	movf	GetControllerInput@input+1,w
  6298     01E7  00F3               	movwf	??_GetControllerInput+1
  6299     01E8  0870               	movf	GetControllerInput@input,w
  6300     01E9  00F2               	movwf	??_GetControllerInput
  6301     01EA  0872               	movf	??_GetControllerInput,w
  6302     01EB  00F3               	movwf	??_GetControllerInput+1
  6303     01EC  01F2               	clrf	??_GetControllerInput
  6304     01ED  3F40               	moviw [0]fsr1
  6305     01EE  0772               	addwf	??_GetControllerInput,w
  6306     01EF  00A0               	movwf	_controls
  6307     01F0  3F41               	moviw [1]fsr1
  6308     01F1  3D73               	addwfc	??_GetControllerInput+1,w
  6309     01F2  00A1               	movwf	_controls+1
  6310     01F3  2ADC               	goto	i1l375
  6311     01F4                     i1l2374:
  6312     01F4  3014               	movlw	20
  6313     01F5  3E20               	addlw	(low (_controls| 0))& (0+255)
  6314     01F6  0086               	movwf	6
  6315     01F7  0187               	clrf	7
  6316     01F8  0871               	movf	GetControllerInput@input+1,w
  6317     01F9  00F3               	movwf	??_GetControllerInput+1
  6318     01FA  0870               	movf	GetControllerInput@input,w
  6319     01FB  00F2               	movwf	??_GetControllerInput
  6320     01FC  0872               	movf	??_GetControllerInput,w
  6321     01FD  00F3               	movwf	??_GetControllerInput+1
  6322     01FE  01F2               	clrf	??_GetControllerInput
  6323     01FF  3F40               	moviw [0]fsr1
  6324     0200  0772               	addwf	??_GetControllerInput,w
  6325     0201  00A2               	movwf	_controls+2
  6326     0202  3F41               	moviw [1]fsr1
  6327     0203  3D73               	addwfc	??_GetControllerInput+1,w
  6328     0204  00A3               	movwf	_controls+3
  6329     0205  2ADC               	goto	i1l375
  6330     0206                     i1l2378:
  6331     0206  3014               	movlw	20
  6332     0207  3E20               	addlw	(low (_controls| 0))& (0+255)
  6333     0208  0086               	movwf	6
  6334     0209  0187               	clrf	7
  6335     020A  0871               	movf	GetControllerInput@input+1,w
  6336     020B  00F3               	movwf	??_GetControllerInput+1
  6337     020C  0870               	movf	GetControllerInput@input,w
  6338     020D  00F2               	movwf	??_GetControllerInput
  6339     020E  0872               	movf	??_GetControllerInput,w
  6340     020F  00F3               	movwf	??_GetControllerInput+1
  6341     0210  01F2               	clrf	??_GetControllerInput
  6342     0211  3F40               	moviw [0]fsr1
  6343     0212  0772               	addwf	??_GetControllerInput,w
  6344     0213  00A4               	movwf	_controls+4
  6345     0214  3F41               	moviw [1]fsr1
  6346     0215  3D73               	addwfc	??_GetControllerInput+1,w
  6347     0216  00A5               	movwf	_controls+5
  6348     0217  2ADC               	goto	i1l375
  6349     0218                     i1l2382:
  6350     0218  3014               	movlw	20
  6351     0219  3E20               	addlw	(low (_controls| 0))& (0+255)
  6352     021A  0086               	movwf	6
  6353     021B  0187               	clrf	7
  6354     021C  0871               	movf	GetControllerInput@input+1,w
  6355     021D  00F3               	movwf	??_GetControllerInput+1
  6356     021E  0870               	movf	GetControllerInput@input,w
  6357     021F  00F2               	movwf	??_GetControllerInput
  6358     0220  0872               	movf	??_GetControllerInput,w
  6359     0221  00F3               	movwf	??_GetControllerInput+1
  6360     0222  01F2               	clrf	??_GetControllerInput
  6361     0223  3F40               	moviw [0]fsr1
  6362     0224  0772               	addwf	??_GetControllerInput,w
  6363     0225  00A6               	movwf	_controls+6
  6364     0226  3F41               	moviw [1]fsr1
  6365     0227  3D73               	addwfc	??_GetControllerInput+1,w
  6366     0228  00A7               	movwf	_controls+7
  6367     0229  2ADC               	goto	i1l375
  6368     022A                     i1l2386:
  6369     022A  3014               	movlw	20
  6370     022B  3E20               	addlw	(low (_controls| 0))& (0+255)
  6371     022C  0086               	movwf	6
  6372     022D  0187               	clrf	7
  6373     022E  0871               	movf	GetControllerInput@input+1,w
  6374     022F  00F3               	movwf	??_GetControllerInput+1
  6375     0230  0870               	movf	GetControllerInput@input,w
  6376     0231  00F2               	movwf	??_GetControllerInput
  6377     0232  0872               	movf	??_GetControllerInput,w
  6378     0233  00F3               	movwf	??_GetControllerInput+1
  6379     0234  01F2               	clrf	??_GetControllerInput
  6380     0235  3F40               	moviw [0]fsr1
  6381     0236  0772               	addwf	??_GetControllerInput,w
  6382     0237  00A8               	movwf	_controls+8
  6383     0238  3F41               	moviw [1]fsr1
  6384     0239  3D73               	addwfc	??_GetControllerInput+1,w
  6385     023A  00A9               	movwf	_controls+9
  6386     023B  2ADC               	goto	i1l375
  6387     023C                     i1l2390:
  6388     023C  3014               	movlw	20
  6389     023D  3E20               	addlw	(low (_controls| 0))& (0+255)
  6390     023E  0086               	movwf	6
  6391     023F  0187               	clrf	7
  6392     0240  0871               	movf	GetControllerInput@input+1,w
  6393     0241  00F3               	movwf	??_GetControllerInput+1
  6394     0242  0870               	movf	GetControllerInput@input,w
  6395     0243  00F2               	movwf	??_GetControllerInput
  6396     0244  0872               	movf	??_GetControllerInput,w
  6397     0245  00F3               	movwf	??_GetControllerInput+1
  6398     0246  01F2               	clrf	??_GetControllerInput
  6399     0247  3F40               	moviw [0]fsr1
  6400     0248  0772               	addwf	??_GetControllerInput,w
  6401     0249  00AA               	movwf	_controls+10
  6402     024A  3F41               	moviw [1]fsr1
  6403     024B  3D73               	addwfc	??_GetControllerInput+1,w
  6404     024C  00AB               	movwf	_controls+11
  6405     024D  2ADC               	goto	i1l375
  6406     024E                     i1l2394:
  6407     024E  3014               	movlw	20
  6408     024F  3E20               	addlw	(low (_controls| 0))& (0+255)
  6409     0250  0086               	movwf	6
  6410     0251  0187               	clrf	7
  6411     0252  0871               	movf	GetControllerInput@input+1,w
  6412     0253  00F3               	movwf	??_GetControllerInput+1
  6413     0254  0870               	movf	GetControllerInput@input,w
  6414     0255  00F2               	movwf	??_GetControllerInput
  6415     0256  0872               	movf	??_GetControllerInput,w
  6416     0257  00F3               	movwf	??_GetControllerInput+1
  6417     0258  01F2               	clrf	??_GetControllerInput
  6418     0259  3F40               	moviw [0]fsr1
  6419     025A  0772               	addwf	??_GetControllerInput,w
  6420     025B  00AC               	movwf	_controls+12
  6421     025C  3F41               	moviw [1]fsr1
  6422     025D  3D73               	addwfc	??_GetControllerInput+1,w
  6423     025E  00AD               	movwf	_controls+13
  6424     025F  2ADC               	goto	i1l375
  6425     0260                     i1l2398:
  6426     0260  3014               	movlw	20
  6427     0261  3E20               	addlw	(low (_controls| 0))& (0+255)
  6428     0262  0086               	movwf	6
  6429     0263  0187               	clrf	7
  6430     0264  0871               	movf	GetControllerInput@input+1,w
  6431     0265  00F3               	movwf	??_GetControllerInput+1
  6432     0266  0870               	movf	GetControllerInput@input,w
  6433     0267  00F2               	movwf	??_GetControllerInput
  6434     0268  0872               	movf	??_GetControllerInput,w
  6435     0269  00F3               	movwf	??_GetControllerInput+1
  6436     026A  01F2               	clrf	??_GetControllerInput
  6437     026B  3F40               	moviw [0]fsr1
  6438     026C  0772               	addwf	??_GetControllerInput,w
  6439     026D  00AE               	movwf	_controls+14
  6440     026E  3F41               	moviw [1]fsr1
  6441     026F  3D73               	addwfc	??_GetControllerInput+1,w
  6442     0270  00AF               	movwf	_controls+15
  6443     0271  2ADC               	goto	i1l375
  6444     0272                     i1l2402:
  6445     0272  3014               	movlw	20
  6446     0273  3E20               	addlw	(low (_controls| 0))& (0+255)
  6447     0274  0086               	movwf	6
  6448     0275  0187               	clrf	7
  6449     0276  0871               	movf	GetControllerInput@input+1,w
  6450     0277  00F3               	movwf	??_GetControllerInput+1
  6451     0278  0870               	movf	GetControllerInput@input,w
  6452     0279  00F2               	movwf	??_GetControllerInput
  6453     027A  0872               	movf	??_GetControllerInput,w
  6454     027B  00F3               	movwf	??_GetControllerInput+1
  6455     027C  01F2               	clrf	??_GetControllerInput
  6456     027D  3F40               	moviw [0]fsr1
  6457     027E  0772               	addwf	??_GetControllerInput,w
  6458     027F  00B0               	movwf	_controls+16
  6459     0280  3F41               	moviw [1]fsr1
  6460     0281  3D73               	addwfc	??_GetControllerInput+1,w
  6461     0282  00B1               	movwf	_controls+17
  6462     0283  2ADC               	goto	i1l375
  6463     0284                     i1l2406:
  6464     0284  3014               	movlw	20
  6465     0285  3E20               	addlw	(low (_controls| 0))& (0+255)
  6466     0286  0086               	movwf	6
  6467     0287  0187               	clrf	7
  6468     0288  0871               	movf	GetControllerInput@input+1,w
  6469     0289  00F3               	movwf	??_GetControllerInput+1
  6470     028A  0870               	movf	GetControllerInput@input,w
  6471     028B  00F2               	movwf	??_GetControllerInput
  6472     028C  0872               	movf	??_GetControllerInput,w
  6473     028D  00F3               	movwf	??_GetControllerInput+1
  6474     028E  01F2               	clrf	??_GetControllerInput
  6475     028F  3F40               	moviw [0]fsr1
  6476     0290  0772               	addwf	??_GetControllerInput,w
  6477     0291  00B2               	movwf	_controls+18
  6478     0292  3F41               	moviw [1]fsr1
  6479     0293  3D73               	addwfc	??_GetControllerInput+1,w
  6480     0294  00B3               	movwf	_controls+19
  6481     0295                     i1l2408:
  6482     0295  01CA               	clrf	_currentInput
  6483     0296  01CB               	clrf	_currentInput+1
  6484     0297  2ADC               	goto	i1l375
  6485     0298                     i1l2412:
  6486                           
  6487                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6488                           ; Switch size 1, requested type "simple"
  6489                           ; Number of cases is 1, Range of values is 0 to 0
  6490                           ; switch strategies available:
  6491                           ; Name         Instructions Cycles
  6492                           ; simple_byte            4     3 (average)
  6493                           ; direct_byte            8     6 (fixed)
  6494                           ; jumptable            260     6 (fixed)
  6495                           ;	Chosen strategy is simple_byte
  6496     0298  0020               	movlb	0	; select bank0
  6497     0299  083E               	movf	_currentCommand+8,w
  6498     029A  3A00               	xorlw	0	; case 0
  6499     029B  1903               	skipnz
  6500     029C  2A9E               	goto	i1l2762
  6501     029D  2ADC               	goto	i1l375
  6502     029E                     i1l2762:
  6503                           
  6504                           ; Switch size 1, requested type "simple"
  6505                           ; Number of cases is 20, Range of values is 6 to 25
  6506                           ; switch strategies available:
  6507                           ; Name         Instructions Cycles
  6508                           ; direct_byte           49     9 (fixed)
  6509                           ; simple_byte           61    31 (average)
  6510                           ; jumptable            263     9 (fixed)
  6511                           ;	Chosen strategy is simple_byte
  6512     029E  083D               	movf	_currentCommand+7,w
  6513     029F  3A06               	xorlw	6	; case 6
  6514     02A0  1903               	skipnz
  6515     02A1  29DD               	goto	i1l2368
  6516     02A2  3A01               	xorlw	1	; case 7
  6517     02A3  1903               	skipnz
  6518     02A4  29E2               	goto	i1l2370
  6519     02A5  3A0F               	xorlw	15	; case 8
  6520     02A6  1903               	skipnz
  6521     02A7  29DD               	goto	i1l2368
  6522     02A8  3A01               	xorlw	1	; case 9
  6523     02A9  1903               	skipnz
  6524     02AA  29F4               	goto	i1l2374
  6525     02AB  3A03               	xorlw	3	; case 10
  6526     02AC  1903               	skipnz
  6527     02AD  29DD               	goto	i1l2368
  6528     02AE  3A01               	xorlw	1	; case 11
  6529     02AF  1903               	skipnz
  6530     02B0  2A06               	goto	i1l2378
  6531     02B1  3A07               	xorlw	7	; case 12
  6532     02B2  1903               	skipnz
  6533     02B3  29DD               	goto	i1l2368
  6534     02B4  3A01               	xorlw	1	; case 13
  6535     02B5  1903               	skipnz
  6536     02B6  2A18               	goto	i1l2382
  6537     02B7  3A03               	xorlw	3	; case 14
  6538     02B8  1903               	skipnz
  6539     02B9  29DD               	goto	i1l2368
  6540     02BA  3A01               	xorlw	1	; case 15
  6541     02BB  1903               	skipnz
  6542     02BC  2A2A               	goto	i1l2386
  6543     02BD  3A1F               	xorlw	31	; case 16
  6544     02BE  1903               	skipnz
  6545     02BF  29DD               	goto	i1l2368
  6546     02C0  3A01               	xorlw	1	; case 17
  6547     02C1  1903               	skipnz
  6548     02C2  2A3C               	goto	i1l2390
  6549     02C3  3A03               	xorlw	3	; case 18
  6550     02C4  1903               	skipnz
  6551     02C5  29DD               	goto	i1l2368
  6552     02C6  3A01               	xorlw	1	; case 19
  6553     02C7  1903               	skipnz
  6554     02C8  2A4E               	goto	i1l2394
  6555     02C9  3A07               	xorlw	7	; case 20
  6556     02CA  1903               	skipnz
  6557     02CB  29DD               	goto	i1l2368
  6558     02CC  3A01               	xorlw	1	; case 21
  6559     02CD  1903               	skipnz
  6560     02CE  2A60               	goto	i1l2398
  6561     02CF  3A03               	xorlw	3	; case 22
  6562     02D0  1903               	skipnz
  6563     02D1  29DD               	goto	i1l2368
  6564     02D2  3A01               	xorlw	1	; case 23
  6565     02D3  1903               	skipnz
  6566     02D4  2A72               	goto	i1l2402
  6567     02D5  3A0F               	xorlw	15	; case 24
  6568     02D6  1903               	skipnz
  6569     02D7  29DD               	goto	i1l2368
  6570     02D8  3A01               	xorlw	1	; case 25
  6571     02D9  1903               	skipnz
  6572     02DA  2A84               	goto	i1l2406
  6573     02DB  2ADC               	goto	i1l375
  6574     02DC                     i1l375:
  6575     02DC  0008               	return
  6576     02DD                     __end_of_GetControllerInput:
  6577     007E                     btemp	set	126	;btemp
  6578     007E                     int$flags	set	126
  6579     007E                     wtemp0	set	126
  6580                           
  6581                           	psect	config
  6582                           
  6583                           ;Config register CONFIG1 @ 0x8007
  6584                           ;	External Oscillator mode selection bits
  6585                           ;	FEXTOSC = ECH, EC above 8MHz; PFM set to high power
  6586                           ;	Power-up default value for COSC bits
  6587                           ;	RSTOSC = HFINT32, HFINTOSC with OSCFRQ= 32 MHz and CDIV = 1:1
  6588                           ;	Clock Out Enable bit
  6589                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  6590                           ;	Clock Switch Enable bit
  6591                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  6592                           ;	Fail-Safe Clock Monitor Enable bit
  6593                           ;	FCMEN = OFF, FSCM timer disabled
  6594     8007                     	org	32775
  6595     8007  1F8F               	dw	8079
  6596                           
  6597                           ;Config register CONFIG2 @ 0x8008
  6598                           ;	Master Clear Enable bit
  6599                           ;	MCLRE = ON, MCLR pin is Master Clear function
  6600                           ;	Power-up Timer Enable bit
  6601                           ;	PWRTE = OFF, PWRT disabled
  6602                           ;	Low-Power BOR enable bit
  6603                           ;	LPBOREN = OFF, ULPBOR disabled
  6604                           ;	Brown-out reset enable bits
  6605                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  6606                           ;	Brown-out Reset Voltage Selection
  6607                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
  6608                           ;	Zero-cross detect disable
  6609                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
  6610                           ;	Peripheral Pin Select one-way control
  6611                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  6612                           ;	Stack Overflow/Underflow Reset Enable bit
  6613                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  6614                           ;	Background Debugger
  6615                           ;	DEBUG = 0x1, unprogrammed default
  6616     8008                     	org	32776
  6617     8008  3FFF               	dw	16383
  6618                           
  6619                           ;Config register CONFIG3 @ 0x8009
  6620                           ;	WDT Period Select bits
  6621                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  6622                           ;	WDT operating mode
  6623                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  6624                           ;	WDT Window Select bits
  6625                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  6626                           ;	WDT input clock selector
  6627                           ;	WDTCCS = SC, Software Control
  6628     8009                     	org	32777
  6629     8009  3F9F               	dw	16287
  6630                           
  6631                           ;Config register CONFIG4 @ 0x800A
  6632                           ;	UserNVM self-write protection bits
  6633                           ;	WRT = OFF, Write protection off
  6634                           ;	Scanner Enable bit
  6635                           ;	SCANE = available, Scanner module is available for use
  6636                           ;	Low Voltage Programming Enable bit
  6637                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
  6638     800A                     	org	32778
  6639     800A  3FFF               	dw	16383
  6640                           
  6641                           ;Config register CONFIG5 @ 0x800B
  6642                           ;	UserNVM Program memory code protection bit
  6643                           ;	CP = OFF, Program Memory code protection disabled
  6644                           ;	DataNVM code protection bit
  6645                           ;	CPD = OFF, Data EEPROM code protection disabled
  6646     800B                     	org	32779
  6647     800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    2
    Data        79
    BSS         95
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     21      80
    BANK1            80      0      75
    BANK2            80      0      36
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ColorSensor@color	PTR unsigned char  size(1) Largest target is 1
		 -> color(BANK0[1]), 

    ColorSensor@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 

    ColorSensor@I2CStage	PTR int  size(1) Largest target is 2
		 -> I2CStage(BANK0[2]), 

    ColorSensor@newI2CMessage	PTR unsigned char  size(1) Largest target is 1
		 -> newI2CMessage(BANK0[1]), 

    Command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK1[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK1[10]), TurnRightCommand(BANK1[10]), 

    currentCommand$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK1[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK1[10]), TurnRightCommand(BANK1[10]), 

    GetValueAndEndI2C@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 

    IncrementColorStage@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 

    LoadTemp@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 

    ReadColorReady@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 

    Reset@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 

    S328command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK1[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK1[10]), TurnRightCommand(BANK1[10]), 

    UpdateColors@colors	PTR struct colorScheme size(1) Largest target is 12
		 -> colors(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myFunction in COMMON

    _myFunction->_GetControllerInput

Critical Paths under _main in BANK0

    _main->_ColorSensor
    _drive->_CreateMoveBackwardCommmand
    _drive->_CreateMoveForwardCommmand
    _drive->_CreateTurnLeftCommmand
    _drive->_CreateTurnRightCommmand
    _SetUpColorSensor->_SetUp
    _ColorSensor->_UpdateColors
    _UpdateColors->___awmod
    _GetValueAndEndI2C->_ReadColorReady
    _ReadColorReady->_IncrementColorStage

Critical Paths under _myFunction in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myFunction in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myFunction in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myFunction in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myFunction in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myFunction in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myFunction in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myFunction in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myFunction in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myFunction in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myFunction in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myFunction in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myFunction in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4614
                       _ActivatePump
                        _ColorSensor
              _CreateControlsCommand
                        _MovePumpArm
                   _SetUpColorSensor
                          _SetUpPump
                       _SetUpPumpArm
                              _drive
 ---------------------------------------------------------------------------------
 (1) _drive                                                3     3      0     569
                                              2 BANK0      1     1      0
                        _CreateBreak
              _CreateControlsCommand
         _CreateMoveBackwardCommmand
          _CreateMoveForwardCommmand
             _CreateTurnLeftCommmand
            _CreateTurnRightCommmand
 ---------------------------------------------------------------------------------
 (2) _CreateTurnRightCommmand                              2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateTurnLeftCommmand                               2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveForwardCommmand                            2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveBackwardCommmand                           2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateControlsCommand                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateBreak                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpPumpArm                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpPump                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpColorSensor                                     4     4      0      46
                                              6 BANK0      4     4      0
                              _SetUp
                           _SetUpI2C
 ---------------------------------------------------------------------------------
 (2) _SetUpI2C                                             0     0      0       0
                       _SetUpI2CPins
                      _SetUpIC2Clock
 ---------------------------------------------------------------------------------
 (3) _SetUpIC2Clock                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SetUpI2CPins                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetUp                                                6     4      2      23
                                              0 BANK0      6     4      2
                 _EndIC2Transmission
                      _RepeatedStart
               _StartIC2Transmission
                   _StartReadRequest
                  _StartWriteRequest
 ---------------------------------------------------------------------------------
 (3) _StartWriteRequest                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _StartReadRequest                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _StartIC2Transmission                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RepeatedStart                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EndIC2Transmission                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MovePumpArm                                          2     0      2     196
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ColorSensor                                          9     6      3    3629
                                             12 BANK0      9     6      3
                       _UpdateColors
 ---------------------------------------------------------------------------------
 (2) _UpdateColors                                         5     3      2    2906
                                              7 BANK0      5     3      2
                  _GetValueAndEndI2C
                     _ReadAddressI2C
                            _ReadI2C
                          _RepeatI2C
               _SelectColourRegister
                           _StartI2C
                           _WriteI2C
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     448
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _WriteI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _StartI2C                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SelectColourRegister                                 3     1      2     130
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _RepeatI2C                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ReadAddressI2C                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetValueAndEndI2C                                    2     2      0    2131
                                              3 BANK0      2     2      0
                             _EndI2C
                _IncrementColorStage
                           _LoadTemp
                     _ReadColorReady
                              _Reset
 ---------------------------------------------------------------------------------
 (4) _Reset                                                1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ReadColorReady                                       2     1      1     528
                                              1 BANK0      2     1      1
                _IncrementColorStage
 ---------------------------------------------------------------------------------
 (5) _IncrementColorStage                                  1     1      0     308
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _LoadTemp                                             2     1      1     480
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (4) _EndI2C                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ActivatePump                                         2     0      2     174
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _myFunction                                           4     4      0     539
                                              5 COMMON     4     4      0
                 _GetControllerInput
 ---------------------------------------------------------------------------------
 (7) _GetControllerInput                                   5     3      2     516
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ActivatePump
   _ColorSensor
     _UpdateColors
       _GetValueAndEndI2C
         _EndI2C
         _IncrementColorStage
         _LoadTemp
         _ReadColorReady
           _IncrementColorStage
         _Reset
       _ReadAddressI2C
       _ReadI2C
       _RepeatI2C
       _SelectColourRegister
       _StartI2C
       _WriteI2C
       ___awmod
   _CreateControlsCommand
   _MovePumpArm
   _SetUpColorSensor
     _SetUp
       _EndIC2Transmission
       _RepeatedStart
       _StartIC2Transmission
       _StartReadRequest
       _StartWriteRequest
     _SetUpI2C
       _SetUpI2CPins
       _SetUpIC2Clock
   _SetUpPump
   _SetUpPumpArm
   _drive
     _CreateBreak
     _CreateControlsCommand
     _CreateMoveBackwardCommmand
     _CreateMoveForwardCommmand
     _CreateTurnLeftCommmand
     _CreateTurnRightCommmand

 _myFunction (ROOT)
   _GetControllerInput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     15      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      24       9       45.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CC      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CC      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Sun Mar 31 15:03:05 2024

                               l111 07F6                                 l114 0F47  
                               l141 0FE5                                 l117 0F8E  
                               l222 06BE                                 l150 0FD5  
                               l231 0F3D                                 l303 03E0  
                               l143 0FEA                                 l152 0FDA  
                               l144 0FEC                                 l225 0FFF  
                               l153 0FDC                                 l234 0F5C  
                               l162 0F74                                 l170 07FE  
                               l138 0FE0                                 l410 01D2  
                               l243 0F40                                 l171 07FF  
                               l147 0FD0                                 l252 0F71  
                               l228 0F50                                 l164 0F79  
                               l156 0F7F                                 l180 052B  
                               l237 0F56                                 l165 0F7A  
                               l413 071C                                 l270 0486  
                               l246 0F43                                 l158 0F83  
                               l174 051C                                 l422 0779  
                               l159 0F84                                 l191 054A  
                               l183 0530                                 l431 0FA2  
                               l256 07C8                                 l440 07AF  
                               l168 07F9                                 l192 0554  
                               l416 073B                                 l249 0FBC  
                               l185 0535                                 l177 0521  
                               l425 07DF                                 l282 0626  
                               l194 0559                                 l186 0540  
                               l434 0F98                                 l443 0FCA  
                               l179 0526                                 l419 075A  
                               l196 0577                                 l428 0794  
                               l445 0FCC                                 l189 0545  
                               l293 05D0                                 l297 03E0  
                               l776 067A                                 _RED 006E  
                               u710 07C4                                 u711 07C3  
                               u800 0638                                 u720 0F83  
                               u801 0637                                 u721 0F82  
                               u810 0643                                 u730 0FE5  
                               u811 0642                                 u731 0FE4  
                               u740 0FEA                                 u900 0530  
                               u741 0FE9                                 u901 052F  
                               u830 0653                                 u750 07FE  
                               u910 0535                                 u831 0652  
                               u751 07FD                                 u911 0534  
                               u840 065D                                 u760 0FD5  
                               u920 0545                                 u841 065C  
                               u825 0647                                 u761 0FD4  
                               u921 0544                                 u770 0FDA  
                               u930 054A                                 u771 0FD9  
                               u931 0549                                 u860 066C  
                               u780 0F79                                 u940 0559  
                               u861 066B                                 u845 0659  
                               u781 0F78                                 u941 0558  
                               u870 0671                                 u790 062D  
                               u950 0570                                 u871 0670  
                               u855 0662                                 u791 062C  
                               u951 056F                                 u880 0521  
                               u960 0589                                 u881 0520  
                               u961 0588                                 u970 02E7  
                               u890 0526                                 u971 02E6  
                               u891 0525                                 u980 0309  
                               u981 0308                                 u990 0327  
                               u991 0326                                 u995 0323  
     __end_of_CreateControlsCommand 0795                _StartIC2Transmission 0F7B  
                      ___awmod@sign 0055                                 wreg 0009  
        ?_CreateMoveForwardCommmand 004F              GetValueAndEndI2C@value 0052  
      __end_of_SelectColourRegister 06BF                        _BAUD1CONbits 011F  
                              l2000 0F59                                l2010 03E3  
                              l2002 0F51                                l2020 0406  
                              l2012 03E8                                l2004 0F53  
                              l2100 0528                                l2030 0428  
                              l2022 040B                                l2014 03EF  
                              l2006 0F3E                                l2110 0552  
                              l2102 0537                                l2040 044B  
                              l2032 042E                                l2024 0411  
                              l2016 03F5                                l2008 0F41  
                              l2120 0570                                l2112 055A  
                              l2104 053A                                l2200 073C  
                              l2042 0451                                l2034 0434  
                              l2026 0416                                l2018 03FB  
                              l2050 0483                                l2130 05D4  
                              l2114 0563                                l2106 054C  
                              l2210 0755                                l2202 0741  
                              l2044 045D                                l2036 0440  
                              l2028 0423                                l2060 0634  
                              l2052 0627                                l2140 05F3  
                              l2132 05D8                                l2300 03DA  
                              l2124 0575                                l2116 0565  
                              l2108 054F                                l2220 076D  
                              l2212 0758                                l2204 0743  
                              l2038 0445                                l2070 064B  
                              l2062 0638                                l2054 0629  
                              l2142 05F7                                l2134 05DC  
                              l2310 07A1                                l2118 0568  
                              l2302 0F99                                l2230 07CE  
                              l2222 0770                                l2214 075B  
                              l2206 074E                                l2048 0462  
                              l2080 0666                                l2072 064F  
                              l2064 063D                                l2056 062D  
                              l2136 05EB                                l2128 05D3  
                              l2312 07A4                                l2240 0583  
                              l2304 0F8F                                l2232 07D0  
                              l2160 0783                                l2224 0774  
                              l2216 0760                                l2208 0751  
                              l2320 00C7                                l2074 0653  
                              l2066 0643                                l2082 066C  
                              l2058 0632                                l2138 05EF  
                              l2146 05FC                                l2314 07AD  
                              l2306 0795                                l2090 0F85  
                              l2250 059D                                l2242 0589  
                              l2234 07DB                                l2170 0792  
                              l2162 0785                                l2226 0777  
                              l2218 0762                                l2330 0108  
                              l2322 00D5                                l2316 0FBD  
                              l2084 0671                                l2076 065D  
                              l2068 0646                                l2148 0618  
                              l2308 0798                                l2092 0F88  
                              l2260 05B0                                l2252 059E  
                              l2244 058D                                l2236 07DD  
                              l2228 07C9                                l2164 0789  
                              l2180 0713                                l2172 06FE  
                              l2340 0149                                l2332 0116  
                              l2324 00E3                                l2318 0FC7  
                              l2086 0676                                l2078 0661  
                              l2270 02DF                                l2094 0F8B  
                              l2262 05BE                                l2254 05AC  
                              l2246 059A                                l2238 0578  
                              l2166 078B                                l2158 077A  
                              l2190 0724                                l2182 0717  
                              l2174 0703                                l2350 018A  
                              l2342 0157                                l2334 0124  
                              l2326 00F1                                l2280 0327  
                              l2272 02E7                                l2096 0513  
                              l2264 05C0                                l2256 05AE  
                              l2248 059C                                l2168 0791  
                              l2192 072F                                l2184 071A  
                              l2176 0705                                l2360 01CB  
                              l2352 0193                                l2344 0160  
                              l2336 012D                                l2328 00FA  
                              l2600 04AE                                l2290 038E  
                              l2282 0346                                l2274 02EB  
                              l2098 0516                                l2266 05C1  
                              l2258 05AF                                l2194 0732  
                              l2186 071D                                l2178 0710  
                              l2354 01A1                                l2362 01CF  
                              l2346 016E                                l2338 013B  
                              l2610 04B6                                l2602 04B1  
                              l2292 0392                                l2284 034A  
                              l2276 0300                                l2268 05C2  
                              l2196 0736                                l2188 0722  
                              l2356 01AF                                l2348 017C  
                              l2620 04BE                                l2612 04B9  
                              l2604 04B3                                l2294 0398  
                              l2286 0350                                l2278 0309  
                              l2198 0739                                l2358 01BD  
                              l2630 04ED                                l2622 04BF  
                              l2614 04BA                                l2606 04B4  
                              l1920 0FB1                                l2296 03B7  
                              l2288 036F                                l2632 04FD  
                              l2624 04C9                                l2616 04BC  
                              l2608 04B5                                l1930 07B5  
                              l1922 0FEF                                l2298 03D6  
                              l2650 050D                                l2626 04D8  
                              l2618 04BD                                l1924 0F3B  
                              l1932 07BB                                l1940 07EC  
                              l2644 04FD                                l2628 04E2  
                              l2580 0487                                l1926 0F6B  
                              l1934 07C4                                l1950 07F4  
                              l1942 07EE                                l2646 0503  
                              l2590 04A0                                l2582 0494  
                              l1928 07B2                                l2760 069E  
                              l1960 07F7                                l1952 07F5  
                              l1944 07F0                                l1936 07E0  
                              l2648 0509                                l2592 04A2  
                              l2584 049A                                l1970 0681  
                              l1962 0FCD                                l1946 07F1  
                              l1938 07E9                                l1954 0F44  
                              l2594 04A7                                l2586 049C  
                              l1980 0690                                l1972 0684  
                              l1964 0F72                                l1956 0F7B  
                              l1948 07F3                                l2596 04A9  
                              l2588 049D                                l1982 0693  
                              l1974 0687                                l1990 06BB  
                              l1966 067B                                l2758 0601  
                              l1958 0FDD                                l2598 04AB  
                              l1984 0696                                l1976 068A  
                              l1968 067E                                l1978 068D  
                              l1988 0699                                l1996 0F4C  
                              l1998 0F57                                _BLUE 006D  
                              u1000 0346                                u1001 0345  
                              u1010 036F                                u1011 036E  
                              u1020 038E                                u1100 00F1  
                              u1021 038D                                u1005 0342  
                              u1101 00F0                                u1030 03B7  
                              u1110 0108                                u1031 03B6  
                              u1015 036B                                u1111 0107  
                              u1040 03D6                                u1200 01A1  
                              u1120 0116                                u1041 03D5  
                              u1025 038A                                u1201 01A0  
                              u1121 0115                                u1105 00ED  
                              u1050 07A1                                u1210 01AF  
                              u1130 0124                                u1035 03B3  
                              u1051 07A0                                u1211 01AE  
                              u1131 0123                                u1115 0104  
                              u1060 07AD                                u1220 01BD  
                              u1140 013B                                u1300 0509  
                              u1045 03D2                                u1061 07AC  
                              u1221 01BC                                u1205 019D  
                              u1141 013A                                u1125 0112  
                              u1301 0508                                u1070 0FC7  
                              u1230 01CB                                u1150 0149  
                              u1071 0FC6                                u1231 01CA  
                              u1215 01AB                                u1151 0148  
                              u1135 0120                                u1160 0157  
                              u1080 00D5                                u1225 01B9  
                              u1161 0156                                u1145 0137  
                              u1081 00D4                                u1170 016E  
                              u1090 00E3                                u1235 01C7  
                              u1171 016D                                u1155 0145  
                              u1091 00E2                                u1180 017C  
                              u1181 017B                                u1165 0153  
                              u1085 00D1                                u1190 018A  
                              u1270 04C9                                u1407 05B7  
                              u1191 0189                                u1175 016A  
                              u1095 00DF                                u1271 04C8  
                              u1280 04E2                                u1417 05C9  
                              u1185 0178                                u1281 04E1  
                              u1290 0503                                u1195 0186  
                              u1291 0502                                u1387 0593  
                              u1397 05A5                 __end_of_CreateBreak 07E0  
                              _main 0487                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                              start 0085                      _ReadAddressI2C 0F51  
           GetValueAndEndI2C@colors 0053                     __end_of_ReadI2C 0F41  
            MovePumpArm@switchValue 004F                 __end_of_ColorSensor 03E1  
         CreateTurnLeftCommmand@pwm 004F                               ?_main 0070  
                   __end_of___awmod 067B                               _GREEN 006C  
             ?_StartIC2Transmission 0070                               i1l450 0010  
                             i1l375 02DC                               i1l458 0083  
                             _RCREG 0119                  _GetControllerInput 01D3  
                  ColorSensor@color 005D                               _Break 00A7  
                             _SetUp 0513                               _Reset 0FED  
 __end_of_CreateMoveForwardCommmand 075B           ??_CreateTurnRightCommmand 0051  
                             _color 004E                               _cycle 0079  
                             _drive 00C7                 ?_GetControllerInput 0070  
                             status 0003                               wtemp0 007E  
            __end_of_ReadAddressI2C 0F57                     __initialization 0087  
                      __end_of_main 0513                 _MoveBackwardCommand 00B1  
                        SetUp@value 0053                      _ReadColorReady 07B0  
                  __end_of_LoadTemp 0F72                    _StartReadRequest 0FCD  
              ??_GetControllerInput 0072                    __end_of_SetUpI2C 0F8F  
                            ??_main 0064                              ?_SetUp 004F  
                            ?_Reset 0070                    __end_of_StartI2C 0F51  
                       _CreateBreak 07C9                       ??_MovePumpArm 0051  
                            ?_drive 0070                    __end_of_WriteI2C 0F5D  
                            _RC3PPS 0F23                              _RC4PPS 0F24  
                            _RC5PPS 0F25                              i1l2402 0272  
                            i1l2412 0298                              i1l2406 0284  
                            i1l2408 0295                              i1l2370 01E2  
                            i1l2364 01D3                              i1l2390 023C  
                            i1l2382 0218                              i1l2374 01F4  
                            i1l2368 01DD                              i1l2394 024E  
                            i1l2386 022A                              i1l2378 0206  
                            i1l2660 0023                              i1l2652 0006  
                            i1l2398 0260                              i1l2670 0047  
                            i1l2662 002A                              i1l2654 000B  
                            i1l2680 006C                              i1l2664 0031  
                            i1l2656 0014                              i1l2672 0049  
                            u131_20 000B                              u131_21 000A  
                            i1l2762 029E                              i1l2682 0070  
                            i1l2674 004D                              i1l2666 003F  
                            i1l2658 001C                              i1l2684 007A  
                            i1l2676 005C                              i1l2668 0042  
                            i1l2686 0081                              i1l2678 005E  
                            u124_20 01DC                              u132_20 0014  
                            u124_21 01DB                              u132_21 0013  
                            u133_20 0023                              u133_21 0022  
                            u134_20 003F                              u134_21 003E  
                            u134_25 003B                              u135_20 004D  
                            u135_21 004C                              u136_20 005C  
                            u136_21 005B                              u136_25 0058  
                            u137_20 006C                              u137_21 006B  
                            u137_25 0068                 _IncrementColorStage 0FAF  
                            _EndI2C 0F3B                           ??_ReadI2C 004F  
                   ?_ReadAddressI2C 0070                   ColorSensor@colors 005C  
            __end_of_ReadColorReady 07C9                        _ActivatePump 0FBD  
                       _ColorSensor 02DD              _CreateTurnLeftCommmand 071D  
                         ??___awmod 0053                       ?_SetUpI2CPins 0070  
              _SelectColourRegister 067B                              _colors 00DF  
              ?_IncrementColorStage 0070                     ___awmod@divisor 004F  
            ??_StartIC2Transmission 004F                     ___awmod@counter 0054  
                      __pdataCOMMON 0079              SetUpColorSensor@result 0057  
           __end_of__initialization 00C3                 __end_of_MovePumpArm 07B0  
                     ?_SetUpPumpArm 0070                     ?_ReadColorReady 0050  
                    __pcstackCOMMON 0070                       __end_of_SetUp 0578  
                     __end_of_Reset 1000                      ??_SetUpI2CPins 004F  
                      __pidataBANK0 0FA3                        __pidataBANK1 06BF  
             ?_SelectColourRegister 004F                       __end_of_drive 01D3  
             ??_IncrementColorStage 004F                  _EndIC2Transmission 0F72  
                  _TurnRightCommand 00C5                   _GetValueAndEndI2C 03E1  
                           ??_SetUp 0051         ??_CreateMoveForwardCommmand 0051  
                           ??_Reset 004F                  ?_GetValueAndEndI2C 0070  
               ?_EndIC2Transmission 0070                             ??_drive 0051  
                 __end_of_RepeatI2C 0F44                         Reset@colors 004F  
                        __pbssBANK0 0020                          __pbssBANK1 00DF  
                        __pbssBANK2 0120                   __end_of_SetUpPump 0F99  
                         ?_LoadTemp 004F                 ??_GetValueAndEndI2C 0052  
                           ?_EndI2C 0070               __end_of_CONTROL_INPUT 1002  
                         ?_SetUpI2C 0070                      ??_SetUpPumpArm 004F  
                    _SSP1DATPPSbits 0EC6                ??_EndIC2Transmission 004F  
                        __pmaintext 0487                           ?_StartI2C 0070  
                        __pintentry 0004                           ?_WriteI2C 0070  
                    _SSP1CLKPPSbits 0EC5           __end_of_GetValueAndEndI2C 0487  
                     _SetUpIC2Clock 0F44                       LoadTemp@value 004F  
        CreateTurnRightCommmand@pwm 004F               _CreateControlsCommand 077A  
                           _SSP1ADD 018D                             _SSP1BUF 018C  
                       _MovePumpArm 0795            __end_of_StartReadRequest 0FDD  
                        ??_LoadTemp 0050                             _Command 0136  
                           _ReadI2C 0F3E       CreateMoveBackwardCommmand@pwm 004F  
                        ??_SetUpI2C 004F            ColorSensor@newI2CMessage 0063  
         _CreateMoveForwardCommmand 073C              ??_SelectColourRegister 0051  
                        ??_StartI2C 004F                             ___awmod 0627  
                        ??_WriteI2C 004F                             __ptext1 00C7  
                           __ptext2 06FE                             __ptext3 071D  
                           __ptext4 073C                             __ptext5 075B  
                           __ptext6 077A                             __ptext7 07C9  
                           __ptext8 0F99                             __ptext9 0F8F  
                    ?_SetUpIC2Clock 0070        ??_CreateMoveBackwardCommmand 0051  
                           _counter 0044                          _myFunction 0004  
                  ___awmod@dividend 0051                          _inputStage 0048  
                      ?_CreateBreak 0070                       ?_UpdateColors 0056  
                           clrloop0 0F5E                __end_of_SetUpI2CPins 07F7  
                  ??_ReadAddressI2C 004F                end_of_initialization 00C3  
                           init_ram 0F63                             initloop 0F64  
                     _RepeatedStart 07F7              UpdateColors@stageValue 0056  
           ?_CreateTurnLeftCommmand 004F                        ?_ColorSensor 005B  
                  _SetUpColorSensor 0578                     myFunction@input 0077  
          ?_CreateTurnRightCommmand 004F             ActivatePump@switchValue 004F  
            ?_CreateControlsCommand 0070                __end_of_SetUpPumpArm 0FA3  
                         _TRISAbits 0011                           _TRISBbits 0012  
                         _TRISCbits 0013                     _TurnLeftCommand 00CF  
                    ??_UpdateColors 0058                           _RXPPSbits 0ECB  
                    ?_RepeatedStart 0070      __end_of_CreateTurnLeftCommmand 073C  
                  ??_ReadColorReady 0051                      __end_of_EndI2C 0F3E  
                   ??_SetUpIC2Clock 004F                       __pidataCOMMON 0F48  
                       ?_myFunction 0070                 start_initialization 0087  
    SelectColourRegister@colorStage 004F                           _RepeatI2C 0F41  
                          ??_EndI2C 004F                      _CONTROL_OUTPUT 006A  
                         _SetUpPump 0F8F         __end_of_IncrementColorStage 0FBD  
                    _currentCommand 0036                         __pdataBANK0 0064  
                       __pdataBANK1 00A0     __end_of_CreateTurnRightCommmand 071D  
                _MoveForwardCommand 00BB                 ColorSensor@I2CStage 005B  
__end_of_CreateMoveBackwardCommmand 077A          _CreateMoveBackwardCommmand 075B  
           _EnableLaserScopeCommand 00A0                ReadColorReady@buffer 0050  
              ReadColorReady@colors 0051                           ___latbits 0002  
                     __pcstackBANK0 004F                        ?_MovePumpArm 004F  
                   ??_RepeatedStart 004F                   ?_StartReadRequest 0070  
                      _currentInput 004A                          ?_RepeatI2C 0070  
                ??_StartReadRequest 004F                            ?_ReadI2C 0070  
                        ?_SetUpPump 0070             GetControllerInput@input 0070  
              __end_of_UpdateColors 0627                            ?___awmod 004F  
                      _SetUpI2CPins 07E0                           _commandIt 0046  
                          _I2CStage 004C                           _frequency 007B  
          __end_of_SetUpColorSensor 05D1                            _LATAbits 0016  
                          _LATBbits 0017                      LoadTemp@colors 0050  
                         clear_ram0 0F5D                            _PIE3bits 0719  
                      _SetUpPumpArm 0F99                       ?_ActivatePump 004F  
                          _PIR3bits 070F                            _SSP1CON1 0190  
    SelectColourRegister@writeValue 0051             ??_CreateControlsCommand 004F  
                          _WPUCbits 0F4F                            _Controls 0120  
                          _LoadTemp 0F69                         ??_RepeatI2C 004F  
                       ??_SetUpPump 004F                            _SetUpI2C 0F85  
                     _CONTROL_INPUT 1000                      ??_ActivatePump 0051  
        __end_of_GetControllerInput 02DD                            _StartI2C 0F4C  
                          _WriteI2C 0F57        CreateMoveForwardCommmand@pwm 004F  
                       _SP1BRGLbits 011B                          _ANSELAbits 0F38  
                        _ANSELBbits 0F43                          _ANSELCbits 0F4E  
                 _StartWriteRequest 0FDD                        ??_myFunction 0075  
                ?_StartWriteRequest 0070                            __ptext10 0578  
                          __ptext11 0F85                            __ptext20 0795  
                          __ptext12 0F44                            __ptext21 02DD  
                          __ptext13 07E0                            __ptext30 03E1  
                          __ptext22 05D1                            __ptext14 0513  
                          __ptext31 0FED                            __ptext23 0627  
                          __ptext15 0FDD                            __ptext32 07B0  
                          __ptext24 0F57                            __ptext16 0FCD  
                          __ptext33 0FAF                            __ptext25 0F4C  
                          __ptext17 0F7B                            __ptext34 0F69  
                          __ptext26 067B                            __ptext18 07F7  
                          __ptext35 0F3B                            __ptext27 0F41  
                          __ptext19 0F72                            __ptext36 0FBD  
                          __ptext28 0F3E                            __ptext29 0F51  
                          __ptext38 01D3                        _SSP1CON2bits 0191  
                          _controls 0020                 ??_StartWriteRequest 004F  
      __end_of_StartIC2Transmission 0F85                          _RC1STAbits 011D  
                __end_of_myFunction 0085                            int$flags 007E  
         __end_of_StartWriteRequest 0FED         ?_CreateMoveBackwardCommmand 004F  
             __end_of_SetUpIC2Clock 0F48                          _INTCONbits 000B  
                      _UpdateColors 05D1                       _newI2CMessage 006F  
                          intlevel1 0000                        _DAC1CON1bits 090F  
                _GetUserDataCommand 00D9                         _SSP1BUFbits 018C  
                     __pstringtext1 1000                  UpdateColors@colors 005A  
                        _TX1REGbits 011A                __end_of_ActivatePump 0FCD  
                     ??_CreateBreak 004F            ??_CreateTurnLeftCommmand 0051  
                        _TX1STAbits 011E           IncrementColorStage@colors 004F  
                 ?_SetUpColorSensor 0070             _CreateTurnRightCommmand 06FE  
             __end_of_RepeatedStart 0800                  ??_SetUpColorSensor 0055  
        __end_of_EndIC2Transmission 0F7B                          _SWITCH_MID 0064  
                        _SWITCH_MAX 0068                       ??_ColorSensor 005E  
                        _SWITCH_MIN 0066  



Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Mar 28 10:29:54 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F18855
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     7                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Generated 21/06/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F18855 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70     0000                     	;# 
    71     0001                     	;# 
    72     0002                     	;# 
    73     0003                     	;# 
    74     0004                     	;# 
    75     0005                     	;# 
    76     0006                     	;# 
    77     0007                     	;# 
    78     0008                     	;# 
    79     0009                     	;# 
    80     000A                     	;# 
    81     000B                     	;# 
    82     000C                     	;# 
    83     000D                     	;# 
    84     000E                     	;# 
    85     0010                     	;# 
    86     0011                     	;# 
    87     0012                     	;# 
    88     0013                     	;# 
    89     0016                     	;# 
    90     0017                     	;# 
    91     0018                     	;# 
    92     001C                     	;# 
    93     001C                     	;# 
    94     001D                     	;# 
    95     001D                     	;# 
    96     001E                     	;# 
    97     001F                     	;# 
    98     008C                     	;# 
    99     008C                     	;# 
   100     008D                     	;# 
   101     008E                     	;# 
   102     008E                     	;# 
   103     008F                     	;# 
   104     0090                     	;# 
   105     0090                     	;# 
   106     0091                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0095                     	;# 
   110     0096                     	;# 
   111     0097                     	;# 
   112     0098                     	;# 
   113     0099                     	;# 
   114     009A                     	;# 
   115     009B                     	;# 
   116     009C                     	;# 
   117     009D                     	;# 
   118     009E                     	;# 
   119     010C                     	;# 
   120     010D                     	;# 
   121     010E                     	;# 
   122     010E                     	;# 
   123     010F                     	;# 
   124     0110                     	;# 
   125     0110                     	;# 
   126     0111                     	;# 
   127     0112                     	;# 
   128     0112                     	;# 
   129     0113                     	;# 
   130     0114                     	;# 
   131     0114                     	;# 
   132     0115                     	;# 
   133     0116                     	;# 
   134     0116                     	;# 
   135     0117                     	;# 
   136     0119                     	;# 
   137     0119                     	;# 
   138     0119                     	;# 
   139     011A                     	;# 
   140     011A                     	;# 
   141     011A                     	;# 
   142     011B                     	;# 
   143     011B                     	;# 
   144     011B                     	;# 
   145     011B                     	;# 
   146     011B                     	;# 
   147     011C                     	;# 
   148     011C                     	;# 
   149     011C                     	;# 
   150     011D                     	;# 
   151     011D                     	;# 
   152     011D                     	;# 
   153     011E                     	;# 
   154     011E                     	;# 
   155     011E                     	;# 
   156     011F                     	;# 
   157     011F                     	;# 
   158     011F                     	;# 
   159     011F                     	;# 
   160     011F                     	;# 
   161     018C                     	;# 
   162     018D                     	;# 
   163     018E                     	;# 
   164     018F                     	;# 
   165     0190                     	;# 
   166     0191                     	;# 
   167     0192                     	;# 
   168     0196                     	;# 
   169     0197                     	;# 
   170     0198                     	;# 
   171     0199                     	;# 
   172     019A                     	;# 
   173     019B                     	;# 
   174     019C                     	;# 
   175     020C                     	;# 
   176     020C                     	;# 
   177     020D                     	;# 
   178     020E                     	;# 
   179     020F                     	;# 
   180     020F                     	;# 
   181     0210                     	;# 
   182     0210                     	;# 
   183     0211                     	;# 
   184     0211                     	;# 
   185     0212                     	;# 
   186     0212                     	;# 
   187     0213                     	;# 
   188     0214                     	;# 
   189     0215                     	;# 
   190     0215                     	;# 
   191     0216                     	;# 
   192     0216                     	;# 
   193     0217                     	;# 
   194     0217                     	;# 
   195     0218                     	;# 
   196     0218                     	;# 
   197     0219                     	;# 
   198     021A                     	;# 
   199     021B                     	;# 
   200     021B                     	;# 
   201     021C                     	;# 
   202     021C                     	;# 
   203     021D                     	;# 
   204     021D                     	;# 
   205     021E                     	;# 
   206     021F                     	;# 
   207     028C                     	;# 
   208     028C                     	;# 
   209     028D                     	;# 
   210     028D                     	;# 
   211     028E                     	;# 
   212     028F                     	;# 
   213     0290                     	;# 
   214     0290                     	;# 
   215     0291                     	;# 
   216     0292                     	;# 
   217     0292                     	;# 
   218     0293                     	;# 
   219     0293                     	;# 
   220     0294                     	;# 
   221     0295                     	;# 
   222     0296                     	;# 
   223     0296                     	;# 
   224     0297                     	;# 
   225     0298                     	;# 
   226     0298                     	;# 
   227     0299                     	;# 
   228     0299                     	;# 
   229     029A                     	;# 
   230     029B                     	;# 
   231     029C                     	;# 
   232     029C                     	;# 
   233     029D                     	;# 
   234     030C                     	;# 
   235     030C                     	;# 
   236     030D                     	;# 
   237     030E                     	;# 
   238     030F                     	;# 
   239     0310                     	;# 
   240     0310                     	;# 
   241     0311                     	;# 
   242     0312                     	;# 
   243     0313                     	;# 
   244     0314                     	;# 
   245     0314                     	;# 
   246     0315                     	;# 
   247     0316                     	;# 
   248     0317                     	;# 
   249     0318                     	;# 
   250     0318                     	;# 
   251     0319                     	;# 
   252     031A                     	;# 
   253     031B                     	;# 
   254     031C                     	;# 
   255     031C                     	;# 
   256     031D                     	;# 
   257     031E                     	;# 
   258     031F                     	;# 
   259     038C                     	;# 
   260     038C                     	;# 
   261     038D                     	;# 
   262     038E                     	;# 
   263     0390                     	;# 
   264     0390                     	;# 
   265     0391                     	;# 
   266     0392                     	;# 
   267     040C                     	;# 
   268     040D                     	;# 
   269     040E                     	;# 
   270     040F                     	;# 
   271     0410                     	;# 
   272     0411                     	;# 
   273     0416                     	;# 
   274     0416                     	;# 
   275     0417                     	;# 
   276     0418                     	;# 
   277     0418                     	;# 
   278     0419                     	;# 
   279     041A                     	;# 
   280     041A                     	;# 
   281     041B                     	;# 
   282     041C                     	;# 
   283     041C                     	;# 
   284     041D                     	;# 
   285     041E                     	;# 
   286     041F                     	;# 
   287     048C                     	;# 
   288     048C                     	;# 
   289     048D                     	;# 
   290     048E                     	;# 
   291     048F                     	;# 
   292     048F                     	;# 
   293     0490                     	;# 
   294     0491                     	;# 
   295     0492                     	;# 
   296     0492                     	;# 
   297     0493                     	;# 
   298     0494                     	;# 
   299     0495                     	;# 
   300     0495                     	;# 
   301     0496                     	;# 
   302     0497                     	;# 
   303     0498                     	;# 
   304     0499                     	;# 
   305     049A                     	;# 
   306     049B                     	;# 
   307     049C                     	;# 
   308     049D                     	;# 
   309     050C                     	;# 
   310     050C                     	;# 
   311     050D                     	;# 
   312     050E                     	;# 
   313     050F                     	;# 
   314     050F                     	;# 
   315     0510                     	;# 
   316     0511                     	;# 
   317     0512                     	;# 
   318     0512                     	;# 
   319     0513                     	;# 
   320     0514                     	;# 
   321     0515                     	;# 
   322     0515                     	;# 
   323     0516                     	;# 
   324     0517                     	;# 
   325     0518                     	;# 
   326     0519                     	;# 
   327     051A                     	;# 
   328     051B                     	;# 
   329     051C                     	;# 
   330     051D                     	;# 
   331     058C                     	;# 
   332     058C                     	;# 
   333     058D                     	;# 
   334     058E                     	;# 
   335     058F                     	;# 
   336     058F                     	;# 
   337     0590                     	;# 
   338     0591                     	;# 
   339     0592                     	;# 
   340     0593                     	;# 
   341     060C                     	;# 
   342     060D                     	;# 
   343     060E                     	;# 
   344     060F                     	;# 
   345     0610                     	;# 
   346     0611                     	;# 
   347     0612                     	;# 
   348     0613                     	;# 
   349     0614                     	;# 
   350     0616                     	;# 
   351     0617                     	;# 
   352     0618                     	;# 
   353     0619                     	;# 
   354     061A                     	;# 
   355     061B                     	;# 
   356     061C                     	;# 
   357     061D                     	;# 
   358     061E                     	;# 
   359     068C                     	;# 
   360     068D                     	;# 
   361     068E                     	;# 
   362     068F                     	;# 
   363     0690                     	;# 
   364     0691                     	;# 
   365     0692                     	;# 
   366     0693                     	;# 
   367     0694                     	;# 
   368     070C                     	;# 
   369     070D                     	;# 
   370     070E                     	;# 
   371     070F                     	;# 
   372     0710                     	;# 
   373     0711                     	;# 
   374     0712                     	;# 
   375     0713                     	;# 
   376     0714                     	;# 
   377     0716                     	;# 
   378     0717                     	;# 
   379     0718                     	;# 
   380     0719                     	;# 
   381     071A                     	;# 
   382     071B                     	;# 
   383     071C                     	;# 
   384     071D                     	;# 
   385     071E                     	;# 
   386     0796                     	;# 
   387     0797                     	;# 
   388     0798                     	;# 
   389     0799                     	;# 
   390     079A                     	;# 
   391     079B                     	;# 
   392     080C                     	;# 
   393     080D                     	;# 
   394     080E                     	;# 
   395     080F                     	;# 
   396     0810                     	;# 
   397     0811                     	;# 
   398     0812                     	;# 
   399     0813                     	;# 
   400     0814                     	;# 
   401     081A                     	;# 
   402     081B                     	;# 
   403     081C                     	;# 
   404     081D                     	;# 
   405     081E                     	;# 
   406     081F                     	;# 
   407     088C                     	;# 
   408     088D                     	;# 
   409     088E                     	;# 
   410     088F                     	;# 
   411     0890                     	;# 
   412     0891                     	;# 
   413     0892                     	;# 
   414     0893                     	;# 
   415     0895                     	;# 
   416     0896                     	;# 
   417     0897                     	;# 
   418     0898                     	;# 
   419     0899                     	;# 
   420     089A                     	;# 
   421     089B                     	;# 
   422     090C                     	;# 
   423     090E                     	;# 
   424     090F                     	;# 
   425     091F                     	;# 
   426     091F                     	;# 
   427     098F                     	;# 
   428     098F                     	;# 
   429     0990                     	;# 
   430     0991                     	;# 
   431     0992                     	;# 
   432     0993                     	;# 
   433     0994                     	;# 
   434     0995                     	;# 
   435     0996                     	;# 
   436     0997                     	;# 
   437     0E0F                     	;# 
   438     0E10                     	;# 
   439     0E11                     	;# 
   440     0E12                     	;# 
   441     0E13                     	;# 
   442     0E14                     	;# 
   443     0E15                     	;# 
   444     0E16                     	;# 
   445     0E17                     	;# 
   446     0E18                     	;# 
   447     0E19                     	;# 
   448     0E1A                     	;# 
   449     0E1B                     	;# 
   450     0E1C                     	;# 
   451     0E1D                     	;# 
   452     0E1E                     	;# 
   453     0E1F                     	;# 
   454     0E20                     	;# 
   455     0E21                     	;# 
   456     0E22                     	;# 
   457     0E23                     	;# 
   458     0E24                     	;# 
   459     0E25                     	;# 
   460     0E26                     	;# 
   461     0E27                     	;# 
   462     0E28                     	;# 
   463     0E29                     	;# 
   464     0E2A                     	;# 
   465     0E2B                     	;# 
   466     0E2C                     	;# 
   467     0E2D                     	;# 
   468     0E2E                     	;# 
   469     0E2F                     	;# 
   470     0E30                     	;# 
   471     0E31                     	;# 
   472     0E32                     	;# 
   473     0E33                     	;# 
   474     0E34                     	;# 
   475     0E35                     	;# 
   476     0E36                     	;# 
   477     0E37                     	;# 
   478     0E8F                     	;# 
   479     0E90                     	;# 
   480     0E91                     	;# 
   481     0E92                     	;# 
   482     0E93                     	;# 
   483     0E94                     	;# 
   484     0E95                     	;# 
   485     0E96                     	;# 
   486     0E97                     	;# 
   487     0E9C                     	;# 
   488     0E9D                     	;# 
   489     0E9E                     	;# 
   490     0EA1                     	;# 
   491     0EA2                     	;# 
   492     0EA3                     	;# 
   493     0EA4                     	;# 
   494     0EA5                     	;# 
   495     0EA9                     	;# 
   496     0EAA                     	;# 
   497     0EAB                     	;# 
   498     0EAC                     	;# 
   499     0EB1                     	;# 
   500     0EB2                     	;# 
   501     0EB3                     	;# 
   502     0EB8                     	;# 
   503     0EB9                     	;# 
   504     0EBA                     	;# 
   505     0EBB                     	;# 
   506     0EBC                     	;# 
   507     0EBD                     	;# 
   508     0EBE                     	;# 
   509     0EC3                     	;# 
   510     0EC5                     	;# 
   511     0EC6                     	;# 
   512     0EC7                     	;# 
   513     0EC8                     	;# 
   514     0EC9                     	;# 
   515     0ECA                     	;# 
   516     0ECB                     	;# 
   517     0ECC                     	;# 
   518     0F10                     	;# 
   519     0F11                     	;# 
   520     0F12                     	;# 
   521     0F13                     	;# 
   522     0F14                     	;# 
   523     0F15                     	;# 
   524     0F16                     	;# 
   525     0F17                     	;# 
   526     0F18                     	;# 
   527     0F19                     	;# 
   528     0F1A                     	;# 
   529     0F1B                     	;# 
   530     0F1C                     	;# 
   531     0F1D                     	;# 
   532     0F1E                     	;# 
   533     0F1F                     	;# 
   534     0F20                     	;# 
   535     0F21                     	;# 
   536     0F22                     	;# 
   537     0F23                     	;# 
   538     0F24                     	;# 
   539     0F25                     	;# 
   540     0F26                     	;# 
   541     0F27                     	;# 
   542     0F38                     	;# 
   543     0F39                     	;# 
   544     0F3A                     	;# 
   545     0F3B                     	;# 
   546     0F3C                     	;# 
   547     0F3D                     	;# 
   548     0F3E                     	;# 
   549     0F3F                     	;# 
   550     0F40                     	;# 
   551     0F41                     	;# 
   552     0F43                     	;# 
   553     0F44                     	;# 
   554     0F45                     	;# 
   555     0F46                     	;# 
   556     0F47                     	;# 
   557     0F48                     	;# 
   558     0F49                     	;# 
   559     0F4A                     	;# 
   560     0F4B                     	;# 
   561     0F4C                     	;# 
   562     0F4E                     	;# 
   563     0F4F                     	;# 
   564     0F50                     	;# 
   565     0F51                     	;# 
   566     0F52                     	;# 
   567     0F53                     	;# 
   568     0F54                     	;# 
   569     0F55                     	;# 
   570     0F56                     	;# 
   571     0F57                     	;# 
   572     0F65                     	;# 
   573     0F68                     	;# 
   574     0F69                     	;# 
   575     0F6A                     	;# 
   576     0F6B                     	;# 
   577     0FE4                     	;# 
   578     0FE5                     	;# 
   579     0FE6                     	;# 
   580     0FE7                     	;# 
   581     0FE8                     	;# 
   582     0FE9                     	;# 
   583     0FEA                     	;# 
   584     0FEB                     	;# 
   585     0FED                     	;# 
   586     0FEE                     	;# 
   587     0FEF                     	;# 
   588     0000                     	;# 
   589     0001                     	;# 
   590     0002                     	;# 
   591     0003                     	;# 
   592     0004                     	;# 
   593     0005                     	;# 
   594     0006                     	;# 
   595     0007                     	;# 
   596     0008                     	;# 
   597     0009                     	;# 
   598     000A                     	;# 
   599     000B                     	;# 
   600     000C                     	;# 
   601     000D                     	;# 
   602     000E                     	;# 
   603     0010                     	;# 
   604     0011                     	;# 
   605     0012                     	;# 
   606     0013                     	;# 
   607     0016                     	;# 
   608     0017                     	;# 
   609     0018                     	;# 
   610     001C                     	;# 
   611     001C                     	;# 
   612     001D                     	;# 
   613     001D                     	;# 
   614     001E                     	;# 
   615     001F                     	;# 
   616     008C                     	;# 
   617     008C                     	;# 
   618     008D                     	;# 
   619     008E                     	;# 
   620     008E                     	;# 
   621     008F                     	;# 
   622     0090                     	;# 
   623     0090                     	;# 
   624     0091                     	;# 
   625     0093                     	;# 
   626     0094                     	;# 
   627     0095                     	;# 
   628     0096                     	;# 
   629     0097                     	;# 
   630     0098                     	;# 
   631     0099                     	;# 
   632     009A                     	;# 
   633     009B                     	;# 
   634     009C                     	;# 
   635     009D                     	;# 
   636     009E                     	;# 
   637     010C                     	;# 
   638     010D                     	;# 
   639     010E                     	;# 
   640     010E                     	;# 
   641     010F                     	;# 
   642     0110                     	;# 
   643     0110                     	;# 
   644     0111                     	;# 
   645     0112                     	;# 
   646     0112                     	;# 
   647     0113                     	;# 
   648     0114                     	;# 
   649     0114                     	;# 
   650     0115                     	;# 
   651     0116                     	;# 
   652     0116                     	;# 
   653     0117                     	;# 
   654     0119                     	;# 
   655     0119                     	;# 
   656     0119                     	;# 
   657     011A                     	;# 
   658     011A                     	;# 
   659     011A                     	;# 
   660     011B                     	;# 
   661     011B                     	;# 
   662     011B                     	;# 
   663     011B                     	;# 
   664     011B                     	;# 
   665     011C                     	;# 
   666     011C                     	;# 
   667     011C                     	;# 
   668     011D                     	;# 
   669     011D                     	;# 
   670     011D                     	;# 
   671     011E                     	;# 
   672     011E                     	;# 
   673     011E                     	;# 
   674     011F                     	;# 
   675     011F                     	;# 
   676     011F                     	;# 
   677     011F                     	;# 
   678     011F                     	;# 
   679     018C                     	;# 
   680     018D                     	;# 
   681     018E                     	;# 
   682     018F                     	;# 
   683     0190                     	;# 
   684     0191                     	;# 
   685     0192                     	;# 
   686     0196                     	;# 
   687     0197                     	;# 
   688     0198                     	;# 
   689     0199                     	;# 
   690     019A                     	;# 
   691     019B                     	;# 
   692     019C                     	;# 
   693     020C                     	;# 
   694     020C                     	;# 
   695     020D                     	;# 
   696     020E                     	;# 
   697     020F                     	;# 
   698     020F                     	;# 
   699     0210                     	;# 
   700     0210                     	;# 
   701     0211                     	;# 
   702     0211                     	;# 
   703     0212                     	;# 
   704     0212                     	;# 
   705     0213                     	;# 
   706     0214                     	;# 
   707     0215                     	;# 
   708     0215                     	;# 
   709     0216                     	;# 
   710     0216                     	;# 
   711     0217                     	;# 
   712     0217                     	;# 
   713     0218                     	;# 
   714     0218                     	;# 
   715     0219                     	;# 
   716     021A                     	;# 
   717     021B                     	;# 
   718     021B                     	;# 
   719     021C                     	;# 
   720     021C                     	;# 
   721     021D                     	;# 
   722     021D                     	;# 
   723     021E                     	;# 
   724     021F                     	;# 
   725     028C                     	;# 
   726     028C                     	;# 
   727     028D                     	;# 
   728     028D                     	;# 
   729     028E                     	;# 
   730     028F                     	;# 
   731     0290                     	;# 
   732     0290                     	;# 
   733     0291                     	;# 
   734     0292                     	;# 
   735     0292                     	;# 
   736     0293                     	;# 
   737     0293                     	;# 
   738     0294                     	;# 
   739     0295                     	;# 
   740     0296                     	;# 
   741     0296                     	;# 
   742     0297                     	;# 
   743     0298                     	;# 
   744     0298                     	;# 
   745     0299                     	;# 
   746     0299                     	;# 
   747     029A                     	;# 
   748     029B                     	;# 
   749     029C                     	;# 
   750     029C                     	;# 
   751     029D                     	;# 
   752     030C                     	;# 
   753     030C                     	;# 
   754     030D                     	;# 
   755     030E                     	;# 
   756     030F                     	;# 
   757     0310                     	;# 
   758     0310                     	;# 
   759     0311                     	;# 
   760     0312                     	;# 
   761     0313                     	;# 
   762     0314                     	;# 
   763     0314                     	;# 
   764     0315                     	;# 
   765     0316                     	;# 
   766     0317                     	;# 
   767     0318                     	;# 
   768     0318                     	;# 
   769     0319                     	;# 
   770     031A                     	;# 
   771     031B                     	;# 
   772     031C                     	;# 
   773     031C                     	;# 
   774     031D                     	;# 
   775     031E                     	;# 
   776     031F                     	;# 
   777     038C                     	;# 
   778     038C                     	;# 
   779     038D                     	;# 
   780     038E                     	;# 
   781     0390                     	;# 
   782     0390                     	;# 
   783     0391                     	;# 
   784     0392                     	;# 
   785     040C                     	;# 
   786     040D                     	;# 
   787     040E                     	;# 
   788     040F                     	;# 
   789     0410                     	;# 
   790     0411                     	;# 
   791     0416                     	;# 
   792     0416                     	;# 
   793     0417                     	;# 
   794     0418                     	;# 
   795     0418                     	;# 
   796     0419                     	;# 
   797     041A                     	;# 
   798     041A                     	;# 
   799     041B                     	;# 
   800     041C                     	;# 
   801     041C                     	;# 
   802     041D                     	;# 
   803     041E                     	;# 
   804     041F                     	;# 
   805     048C                     	;# 
   806     048C                     	;# 
   807     048D                     	;# 
   808     048E                     	;# 
   809     048F                     	;# 
   810     048F                     	;# 
   811     0490                     	;# 
   812     0491                     	;# 
   813     0492                     	;# 
   814     0492                     	;# 
   815     0493                     	;# 
   816     0494                     	;# 
   817     0495                     	;# 
   818     0495                     	;# 
   819     0496                     	;# 
   820     0497                     	;# 
   821     0498                     	;# 
   822     0499                     	;# 
   823     049A                     	;# 
   824     049B                     	;# 
   825     049C                     	;# 
   826     049D                     	;# 
   827     050C                     	;# 
   828     050C                     	;# 
   829     050D                     	;# 
   830     050E                     	;# 
   831     050F                     	;# 
   832     050F                     	;# 
   833     0510                     	;# 
   834     0511                     	;# 
   835     0512                     	;# 
   836     0512                     	;# 
   837     0513                     	;# 
   838     0514                     	;# 
   839     0515                     	;# 
   840     0515                     	;# 
   841     0516                     	;# 
   842     0517                     	;# 
   843     0518                     	;# 
   844     0519                     	;# 
   845     051A                     	;# 
   846     051B                     	;# 
   847     051C                     	;# 
   848     051D                     	;# 
   849     058C                     	;# 
   850     058C                     	;# 
   851     058D                     	;# 
   852     058E                     	;# 
   853     058F                     	;# 
   854     058F                     	;# 
   855     0590                     	;# 
   856     0591                     	;# 
   857     0592                     	;# 
   858     0593                     	;# 
   859     060C                     	;# 
   860     060D                     	;# 
   861     060E                     	;# 
   862     060F                     	;# 
   863     0610                     	;# 
   864     0611                     	;# 
   865     0612                     	;# 
   866     0613                     	;# 
   867     0614                     	;# 
   868     0616                     	;# 
   869     0617                     	;# 
   870     0618                     	;# 
   871     0619                     	;# 
   872     061A                     	;# 
   873     061B                     	;# 
   874     061C                     	;# 
   875     061D                     	;# 
   876     061E                     	;# 
   877     068C                     	;# 
   878     068D                     	;# 
   879     068E                     	;# 
   880     068F                     	;# 
   881     0690                     	;# 
   882     0691                     	;# 
   883     0692                     	;# 
   884     0693                     	;# 
   885     0694                     	;# 
   886     070C                     	;# 
   887     070D                     	;# 
   888     070E                     	;# 
   889     070F                     	;# 
   890     0710                     	;# 
   891     0711                     	;# 
   892     0712                     	;# 
   893     0713                     	;# 
   894     0714                     	;# 
   895     0716                     	;# 
   896     0717                     	;# 
   897     0718                     	;# 
   898     0719                     	;# 
   899     071A                     	;# 
   900     071B                     	;# 
   901     071C                     	;# 
   902     071D                     	;# 
   903     071E                     	;# 
   904     0796                     	;# 
   905     0797                     	;# 
   906     0798                     	;# 
   907     0799                     	;# 
   908     079A                     	;# 
   909     079B                     	;# 
   910     080C                     	;# 
   911     080D                     	;# 
   912     080E                     	;# 
   913     080F                     	;# 
   914     0810                     	;# 
   915     0811                     	;# 
   916     0812                     	;# 
   917     0813                     	;# 
   918     0814                     	;# 
   919     081A                     	;# 
   920     081B                     	;# 
   921     081C                     	;# 
   922     081D                     	;# 
   923     081E                     	;# 
   924     081F                     	;# 
   925     088C                     	;# 
   926     088D                     	;# 
   927     088E                     	;# 
   928     088F                     	;# 
   929     0890                     	;# 
   930     0891                     	;# 
   931     0892                     	;# 
   932     0893                     	;# 
   933     0895                     	;# 
   934     0896                     	;# 
   935     0897                     	;# 
   936     0898                     	;# 
   937     0899                     	;# 
   938     089A                     	;# 
   939     089B                     	;# 
   940     090C                     	;# 
   941     090E                     	;# 
   942     090F                     	;# 
   943     091F                     	;# 
   944     091F                     	;# 
   945     098F                     	;# 
   946     098F                     	;# 
   947     0990                     	;# 
   948     0991                     	;# 
   949     0992                     	;# 
   950     0993                     	;# 
   951     0994                     	;# 
   952     0995                     	;# 
   953     0996                     	;# 
   954     0997                     	;# 
   955     0E0F                     	;# 
   956     0E10                     	;# 
   957     0E11                     	;# 
   958     0E12                     	;# 
   959     0E13                     	;# 
   960     0E14                     	;# 
   961     0E15                     	;# 
   962     0E16                     	;# 
   963     0E17                     	;# 
   964     0E18                     	;# 
   965     0E19                     	;# 
   966     0E1A                     	;# 
   967     0E1B                     	;# 
   968     0E1C                     	;# 
   969     0E1D                     	;# 
   970     0E1E                     	;# 
   971     0E1F                     	;# 
   972     0E20                     	;# 
   973     0E21                     	;# 
   974     0E22                     	;# 
   975     0E23                     	;# 
   976     0E24                     	;# 
   977     0E25                     	;# 
   978     0E26                     	;# 
   979     0E27                     	;# 
   980     0E28                     	;# 
   981     0E29                     	;# 
   982     0E2A                     	;# 
   983     0E2B                     	;# 
   984     0E2C                     	;# 
   985     0E2D                     	;# 
   986     0E2E                     	;# 
   987     0E2F                     	;# 
   988     0E30                     	;# 
   989     0E31                     	;# 
   990     0E32                     	;# 
   991     0E33                     	;# 
   992     0E34                     	;# 
   993     0E35                     	;# 
   994     0E36                     	;# 
   995     0E37                     	;# 
   996     0E8F                     	;# 
   997     0E90                     	;# 
   998     0E91                     	;# 
   999     0E92                     	;# 
  1000     0E93                     	;# 
  1001     0E94                     	;# 
  1002     0E95                     	;# 
  1003     0E96                     	;# 
  1004     0E97                     	;# 
  1005     0E9C                     	;# 
  1006     0E9D                     	;# 
  1007     0E9E                     	;# 
  1008     0EA1                     	;# 
  1009     0EA2                     	;# 
  1010     0EA3                     	;# 
  1011     0EA4                     	;# 
  1012     0EA5                     	;# 
  1013     0EA9                     	;# 
  1014     0EAA                     	;# 
  1015     0EAB                     	;# 
  1016     0EAC                     	;# 
  1017     0EB1                     	;# 
  1018     0EB2                     	;# 
  1019     0EB3                     	;# 
  1020     0EB8                     	;# 
  1021     0EB9                     	;# 
  1022     0EBA                     	;# 
  1023     0EBB                     	;# 
  1024     0EBC                     	;# 
  1025     0EBD                     	;# 
  1026     0EBE                     	;# 
  1027     0EC3                     	;# 
  1028     0EC5                     	;# 
  1029     0EC6                     	;# 
  1030     0EC7                     	;# 
  1031     0EC8                     	;# 
  1032     0EC9                     	;# 
  1033     0ECA                     	;# 
  1034     0ECB                     	;# 
  1035     0ECC                     	;# 
  1036     0F10                     	;# 
  1037     0F11                     	;# 
  1038     0F12                     	;# 
  1039     0F13                     	;# 
  1040     0F14                     	;# 
  1041     0F15                     	;# 
  1042     0F16                     	;# 
  1043     0F17                     	;# 
  1044     0F18                     	;# 
  1045     0F19                     	;# 
  1046     0F1A                     	;# 
  1047     0F1B                     	;# 
  1048     0F1C                     	;# 
  1049     0F1D                     	;# 
  1050     0F1E                     	;# 
  1051     0F1F                     	;# 
  1052     0F20                     	;# 
  1053     0F21                     	;# 
  1054     0F22                     	;# 
  1055     0F23                     	;# 
  1056     0F24                     	;# 
  1057     0F25                     	;# 
  1058     0F26                     	;# 
  1059     0F27                     	;# 
  1060     0F38                     	;# 
  1061     0F39                     	;# 
  1062     0F3A                     	;# 
  1063     0F3B                     	;# 
  1064     0F3C                     	;# 
  1065     0F3D                     	;# 
  1066     0F3E                     	;# 
  1067     0F3F                     	;# 
  1068     0F40                     	;# 
  1069     0F41                     	;# 
  1070     0F43                     	;# 
  1071     0F44                     	;# 
  1072     0F45                     	;# 
  1073     0F46                     	;# 
  1074     0F47                     	;# 
  1075     0F48                     	;# 
  1076     0F49                     	;# 
  1077     0F4A                     	;# 
  1078     0F4B                     	;# 
  1079     0F4C                     	;# 
  1080     0F4E                     	;# 
  1081     0F4F                     	;# 
  1082     0F50                     	;# 
  1083     0F51                     	;# 
  1084     0F52                     	;# 
  1085     0F53                     	;# 
  1086     0F54                     	;# 
  1087     0F55                     	;# 
  1088     0F56                     	;# 
  1089     0F57                     	;# 
  1090     0F65                     	;# 
  1091     0F68                     	;# 
  1092     0F69                     	;# 
  1093     0F6A                     	;# 
  1094     0F6B                     	;# 
  1095     0FE4                     	;# 
  1096     0FE5                     	;# 
  1097     0FE6                     	;# 
  1098     0FE7                     	;# 
  1099     0FE8                     	;# 
  1100     0FE9                     	;# 
  1101     0FEA                     	;# 
  1102     0FEB                     	;# 
  1103     0FED                     	;# 
  1104     0FEE                     	;# 
  1105     0FEF                     	;# 
  1106                           
  1107                           	psect	idataCOMMON
  1108     048B                     __pidataCOMMON:
  1109                           
  1110                           ;initializer for _CONTROL_OUTPUT
  1111     048B  3401               	retlw	1
  1112     048C  3400               	retlw	0
  1113                           
  1114                           	psect	idataBANK0
  1115     037A                     __pidataBANK0:
  1116                           
  1117                           ;initializer for _SWITCH_MID
  1118     037A  34DC               	retlw	220
  1119     037B  3405               	retlw	5
  1120                           
  1121                           ;initializer for _SWITCH_MIN
  1122     037C  34E8               	retlw	232
  1123     037D  3403               	retlw	3
  1124                           
  1125                           ;initializer for _SWITCH_MAX
  1126     037E  34D0               	retlw	208
  1127     037F  3407               	retlw	7
  1128                           
  1129                           ;initializer for _TurnRightCommand
  1130     0380  34FE               	retlw	254
  1131     0381  3419               	retlw	25
  1132     0382  3401               	retlw	1
  1133     0383  3406               	retlw	6
  1134     0384  3404               	retlw	4
  1135     0385  3400               	retlw	0
  1136     0386  3402               	retlw	2
  1137     0387  3432               	retlw	50
  1138     0388  3401               	retlw	1
  1139     0389  3432               	retlw	50
  1140                           
  1141                           ;initializer for _TurnLeftCommand
  1142     038A  34FE               	retlw	254
  1143     038B  3419               	retlw	25
  1144     038C  3401               	retlw	1
  1145     038D  3406               	retlw	6
  1146     038E  3404               	retlw	4
  1147     038F  3400               	retlw	0
  1148     0390  3401               	retlw	1
  1149     0391  3432               	retlw	50
  1150     0392  3402               	retlw	2
  1151     0393  3432               	retlw	50
  1152                           
  1153                           ;initializer for _GetUserDataCommand
  1154     0394  34FE               	retlw	254
  1155     0395  3419               	retlw	25
  1156     0396  3401               	retlw	1
  1157     0397  3405               	retlw	5
  1158     0398  3400               	retlw	0
  1159     0399  3400               	retlw	0
  1160                           
  1161                           	psect	idataBANK1
  1162     0355                     __pidataBANK1:
  1163                           
  1164                           ;initializer for _EnableLaserScopeCommand
  1165     0355  34FE               	retlw	254
  1166     0356  3419               	retlw	25
  1167     0357  3401               	retlw	1
  1168     0358  3408               	retlw	8
  1169     0359  3401               	retlw	1
  1170     035A  3400               	retlw	0
  1171     035B  3401               	retlw	1
  1172                           
  1173                           ;initializer for _Break
  1174     035C  34FE               	retlw	254
  1175     035D  3419               	retlw	25
  1176     035E  3401               	retlw	1
  1177     035F  3406               	retlw	6
  1178     0360  3404               	retlw	4
  1179     0361  3400               	retlw	0
  1180     0362  3400               	retlw	0
  1181     0363  3400               	retlw	0
  1182     0364  3400               	retlw	0
  1183     0365  3400               	retlw	0
  1184                           
  1185                           ;initializer for _MoveBackwardCommand
  1186     0366  34FE               	retlw	254
  1187     0367  3419               	retlw	25
  1188     0368  3401               	retlw	1
  1189     0369  3406               	retlw	6
  1190     036A  3404               	retlw	4
  1191     036B  3400               	retlw	0
  1192     036C  3402               	retlw	2
  1193     036D  3432               	retlw	50
  1194     036E  3402               	retlw	2
  1195     036F  3432               	retlw	50
  1196                           
  1197                           ;initializer for _MoveForwardCommand
  1198     0370  34FE               	retlw	254
  1199     0371  3419               	retlw	25
  1200     0372  3401               	retlw	1
  1201     0373  3406               	retlw	6
  1202     0374  3404               	retlw	4
  1203     0375  3400               	retlw	0
  1204     0376  3401               	retlw	1
  1205     0377  3432               	retlw	50
  1206     0378  3401               	retlw	1
  1207     0379  3432               	retlw	50
  1208                           
  1209                           	psect	stringtext1
  1210     048D                     __pstringtext1:
  1211     048D                     _CONTROL_INPUT:
  1212     048D  3401               	retlw	1
  1213     048E  3400               	retlw	0
  1214     048F                     __end_of_CONTROL_INPUT:
  1215     0017                     _LATBbits	set	23
  1216     0012                     _TRISBbits	set	18
  1217     000B                     _INTCONbits	set	11
  1218     0013                     _TRISCbits	set	19
  1219     0016                     _LATAbits	set	22
  1220     0011                     _TRISAbits	set	17
  1221     011A                     _TX1REGbits	set	282
  1222     0119                     _RCREG	set	281
  1223     011D                     _RC1STAbits	set	285
  1224     011B                     _SP1BRGLbits	set	283
  1225     011E                     _TX1STAbits	set	286
  1226     011F                     _BAUD1CONbits	set	287
  1227     070F                     _PIR3bits	set	1807
  1228     0719                     _PIE3bits	set	1817
  1229     0ECB                     _RXPPSbits	set	3787
  1230     0F43                     _ANSELBbits	set	3907
  1231     0F4E                     _ANSELCbits	set	3918
  1232     0F25                     _RC5PPS	set	3877
  1233     0F38                     _ANSELAbits	set	3896
  1234                           
  1235                           	psect	cinit
  1236     007F                     start_initialization:	
  1237                           ; #config settings
  1238                           
  1239     007F                     __initialization:
  1240                           
  1241                           ; Initialize objects allocated to COMMON
  1242     007F  3184  248B  3180   	fcall	__pidataCOMMON	;fetch initializer
  1243     0082  00FB               	movwf	__pdataCOMMON& (0+127)
  1244     0083  3184  248C  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  1245     0086  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1246                           
  1247                           ; Initialize objects allocated to BANK0
  1248     0087  307A               	movlw	low __pidataBANK0
  1249     0088  0084               	movwf	4
  1250     0089  3083               	movlw	(high __pidataBANK0)| (0+128)
  1251     008A  0085               	movwf	5
  1252     008B  3048               	movlw	low __pdataBANK0
  1253     008C  0086               	movwf	6
  1254     008D  3000               	movlw	high __pdataBANK0
  1255     008E  0087               	movwf	7
  1256     008F  3020               	movlw	32
  1257     0090  3184  247F  3180   	fcall	init_ram
  1258                           
  1259                           ; Initialize objects allocated to BANK1
  1260     0093  3055               	movlw	low __pidataBANK1
  1261     0094  0084               	movwf	4
  1262     0095  3083               	movlw	(high __pidataBANK1)| (0+128)
  1263     0096  0085               	movwf	5
  1264     0097  30A0               	movlw	low __pdataBANK1
  1265     0098  0086               	movwf	6
  1266     0099  3000               	movlw	high __pdataBANK1
  1267     009A  0087               	movwf	7
  1268     009B  3025               	movlw	37
  1269     009C  3184  247F  3180   	fcall	init_ram
  1270                           
  1271                           ; Clear objects allocated to COMMON
  1272     009F  01F9               	clrf	__pbssCOMMON& (0+127)
  1273     00A0  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  1274                           
  1275                           ; Clear objects allocated to BANK0
  1276     00A1  3020               	movlw	low __pbssBANK0
  1277     00A2  0084               	movwf	4
  1278     00A3  3000               	movlw	high __pbssBANK0
  1279     00A4  0085               	movwf	5
  1280     00A5  3028               	movlw	40
  1281     00A6  3184  2485  3180   	fcall	clear_ram0
  1282                           
  1283                           ; Clear objects allocated to BANK1
  1284     00A9  30C5               	movlw	low __pbssBANK1
  1285     00AA  0084               	movwf	4
  1286     00AB  3000               	movlw	high __pbssBANK1
  1287     00AC  0085               	movwf	5
  1288     00AD  3024               	movlw	36
  1289     00AE  3184  2485  3180   	fcall	clear_ram0
  1290     00B1                     end_of_initialization:	
  1291                           ;End of C runtime variable initialization code
  1292                           
  1293     00B1                     __end_of__initialization:
  1294     00B1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1295     00B2  0020               	movlb	0
  1296     00B3  3182  2ACB         	ljmp	_main	;jump to C main() function
  1297                           
  1298                           	psect	bssCOMMON
  1299     0079                     __pbssCOMMON:
  1300     0079                     _currentInput:
  1301     0079                     	ds	2
  1302                           
  1303                           	psect	dataCOMMON
  1304     007B                     __pdataCOMMON:
  1305     007B                     _CONTROL_OUTPUT:
  1306     007B                     	ds	2
  1307                           
  1308                           	psect	bssBANK0
  1309     0020                     __pbssBANK0:
  1310     0020                     _controls:
  1311     0020                     	ds	22
  1312     0036                     _currentCommand:
  1313     0036                     	ds	14
  1314     0044                     _commandIt:
  1315     0044                     	ds	2
  1316     0046                     _inputStage:
  1317     0046                     	ds	2
  1318                           
  1319                           	psect	dataBANK0
  1320     0048                     __pdataBANK0:
  1321     0048                     _SWITCH_MID:
  1322     0048                     	ds	2
  1323     004A                     _SWITCH_MIN:
  1324     004A                     	ds	2
  1325     004C                     _SWITCH_MAX:
  1326     004C                     	ds	2
  1327     004E                     _TurnRightCommand:
  1328     004E                     	ds	10
  1329     0058                     _TurnLeftCommand:
  1330     0058                     	ds	10
  1331     0062                     _GetUserDataCommand:
  1332     0062                     	ds	6
  1333                           
  1334                           	psect	bssBANK1
  1335     00C5                     __pbssBANK1:
  1336     00C5                     _Controls:
  1337     00C5                     	ds	22
  1338     00DB                     _Command:
  1339     00DB                     	ds	14
  1340                           
  1341                           	psect	dataBANK1
  1342     00A0                     __pdataBANK1:
  1343     00A0                     _EnableLaserScopeCommand:
  1344     00A0                     	ds	7
  1345     00A7                     _Break:
  1346     00A7                     	ds	10
  1347     00B1                     _MoveBackwardCommand:
  1348     00B1                     	ds	10
  1349     00BB                     _MoveForwardCommand:
  1350     00BB                     	ds	10
  1351                           
  1352                           	psect	inittext
  1353     047F                     init_ram:
  1354     047F  00FE               	movwf	btemp
  1355     0480                     initloop:
  1356     0480  0012               	moviw fsr0++
  1357     0481  001E               	movwi fsr1++
  1358     0482  0BFE               	decfsz	btemp,f
  1359     0483  2C80               	goto	initloop
  1360     0484  3400               	retlw	0
  1361                           
  1362                           	psect	clrtext
  1363     0485                     clear_ram0:	
  1364                           ;	Called with FSR0 containing the base address, and
  1365                           ;	WREG with the size to clear
  1366                           
  1367     0485  0064               	clrwdt	;clear the watchdog before getting into this loop
  1368     0486                     clrloop0:
  1369     0486  0180               	clrf	0	;clear RAM location pointed to by FSR
  1370     0487  3101               	addfsr 0,1
  1371     0488  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1372     0489  2C86               	goto	clrloop0	;have we reached the end yet?
  1373     048A  3400               	retlw	0	;all done for this memory range, return
  1374                           
  1375                           	psect	cstackCOMMON
  1376     0070                     __pcstackCOMMON:
  1377     0070                     ?_SetUpPumpArm:
  1378     0070                     ?_SetUpPump:	
  1379                           ; 1 bytes @ 0x0
  1380                           
  1381     0070                     ?_CreateControlsCommand:	
  1382                           ; 1 bytes @ 0x0
  1383                           
  1384     0070                     ?_drive:	
  1385                           ; 1 bytes @ 0x0
  1386                           
  1387     0070                     ?_CreateBreak:	
  1388                           ; 1 bytes @ 0x0
  1389                           
  1390     0070                     ?_main:	
  1391                           ; 1 bytes @ 0x0
  1392                           
  1393     0070                     ?_GetControllerInput:	
  1394                           ; 1 bytes @ 0x0
  1395                           
  1396     0070                     ?_myFunction:	
  1397                           ; 1 bytes @ 0x0
  1398                           
  1399     0070                     GetControllerInput@input:	
  1400                           ; 1 bytes @ 0x0
  1401                           
  1402                           
  1403                           ; 2 bytes @ 0x0
  1404     0070                     	ds	2
  1405     0072                     ??_GetControllerInput:
  1406                           
  1407                           ; 1 bytes @ 0x2
  1408     0072                     	ds	3
  1409     0075                     ??_myFunction:
  1410                           
  1411                           ; 1 bytes @ 0x5
  1412     0075                     	ds	2
  1413     0077                     myFunction@input:
  1414                           
  1415                           ; 2 bytes @ 0x7
  1416     0077                     	ds	2
  1417                           
  1418                           	psect	cstackBANK0
  1419     0068                     __pcstackBANK0:
  1420     0068                     ??_SetUpPumpArm:
  1421     0068                     ??_SetUpPump:	
  1422                           ; 1 bytes @ 0x0
  1423                           
  1424     0068                     ??_CreateControlsCommand:	
  1425                           ; 1 bytes @ 0x0
  1426                           
  1427     0068                     ?_MovePumpArm:	
  1428                           ; 1 bytes @ 0x0
  1429                           
  1430     0068                     ?_ActivatePump:	
  1431                           ; 1 bytes @ 0x0
  1432                           
  1433     0068                     ?_CreateTurnRightCommmand:	
  1434                           ; 1 bytes @ 0x0
  1435                           
  1436     0068                     ?_CreateTurnLeftCommmand:	
  1437                           ; 1 bytes @ 0x0
  1438                           
  1439     0068                     ?_CreateMoveForwardCommmand:	
  1440                           ; 1 bytes @ 0x0
  1441                           
  1442     0068                     ?_CreateMoveBackwardCommmand:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445     0068                     ??_CreateBreak:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448     0068                     CreateTurnRightCommmand@pwm:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451     0068                     CreateTurnLeftCommmand@pwm:	
  1452                           ; 2 bytes @ 0x0
  1453                           
  1454     0068                     CreateMoveForwardCommmand@pwm:	
  1455                           ; 2 bytes @ 0x0
  1456                           
  1457     0068                     CreateMoveBackwardCommmand@pwm:	
  1458                           ; 2 bytes @ 0x0
  1459                           
  1460     0068                     MovePumpArm@switchValue:	
  1461                           ; 2 bytes @ 0x0
  1462                           
  1463     0068                     ActivatePump@switchValue:	
  1464                           ; 2 bytes @ 0x0
  1465                           
  1466                           
  1467                           ; 2 bytes @ 0x0
  1468     0068                     	ds	2
  1469     006A                     ??_MovePumpArm:
  1470     006A                     ??_ActivatePump:	
  1471                           ; 1 bytes @ 0x2
  1472                           
  1473     006A                     ??_drive:	
  1474                           ; 1 bytes @ 0x2
  1475                           
  1476     006A                     ??_CreateTurnRightCommmand:	
  1477                           ; 1 bytes @ 0x2
  1478                           
  1479     006A                     ??_CreateTurnLeftCommmand:	
  1480                           ; 1 bytes @ 0x2
  1481                           
  1482     006A                     ??_CreateMoveForwardCommmand:	
  1483                           ; 1 bytes @ 0x2
  1484                           
  1485     006A                     ??_CreateMoveBackwardCommmand:	
  1486                           ; 1 bytes @ 0x2
  1487                           
  1488                           
  1489                           ; 1 bytes @ 0x2
  1490     006A                     	ds	1
  1491     006B                     ??_main:
  1492                           
  1493                           	psect	maintext
  1494     02CB                     __pmaintext:	
  1495                           ; 1 bytes @ 0x3
  1496 ;;
  1497 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1498 ;;
  1499 ;; *************** function _main *****************
  1500 ;; Defined at:
  1501 ;;		line 109 in file "motorMain.c"
  1502 ;; Parameters:    Size  Location     Type
  1503 ;;		None
  1504 ;; Auto vars:     Size  Location     Type
  1505 ;;		None
  1506 ;; Return value:  Size  Location     Type
  1507 ;;                  1    wreg      void 
  1508 ;; Registers used:
  1509 ;;		wreg, status,2, status,0, pclath, cstack
  1510 ;; Tracked objects:
  1511 ;;		On entry : B1F/0
  1512 ;;		On exit  : 0/0
  1513 ;;		Unchanged: 0/0
  1514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1519 ;;Total ram usage:        0 bytes
  1520 ;; Hardware stack levels required when called: 4
  1521 ;; This function calls:
  1522 ;;		_ActivatePump
  1523 ;;		_CreateControlsCommand
  1524 ;;		_MovePumpArm
  1525 ;;		_SetUpPump
  1526 ;;		_SetUpPumpArm
  1527 ;;		_drive
  1528 ;; This function is called by:
  1529 ;;		Startup code after reset
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533     02CB                     _main:	
  1534                           ;psect for function _main
  1535                           
  1536     02CB                     l1322:	
  1537                           ;incstack = 0
  1538                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  1539                           
  1540                           
  1541                           ;motorMain.c: 111:    TRISAbits.TRISA5 = 1;
  1542     02CB  0020               	movlb	0	; select bank0
  1543     02CC  1691               	bsf	17,5	;volatile
  1544                           
  1545                           ;motorMain.c: 112:     ANSELAbits.ANSA5 = 0;
  1546     02CD  003E               	movlb	30	; select bank30
  1547     02CE  12B8               	bcf	56,5	;volatile
  1548                           
  1549                           ;motorMain.c: 114:     TRISAbits.TRISA0 = 0;
  1550     02CF  0020               	movlb	0	; select bank0
  1551     02D0  1011               	bcf	17,0	;volatile
  1552                           
  1553                           ;motorMain.c: 115:     TRISAbits.TRISA1 = 0;
  1554     02D1  1091               	bcf	17,1	;volatile
  1555                           
  1556                           ;motorMain.c: 116:     TRISAbits.TRISA2 = 0;
  1557     02D2  1111               	bcf	17,2	;volatile
  1558                           
  1559                           ;motorMain.c: 117:     TRISAbits.TRISA3 = 0;
  1560     02D3  1191               	bcf	17,3	;volatile
  1561                           
  1562                           ;motorMain.c: 120:     LATAbits.LATA0 = 0;
  1563     02D4  1016               	bcf	22,0	;volatile
  1564                           
  1565                           ;motorMain.c: 121:     LATAbits.LATA1 = 0;
  1566     02D5  1096               	bcf	22,1	;volatile
  1567                           
  1568                           ;motorMain.c: 122:     LATAbits.LATA2 = 0;
  1569     02D6  1116               	bcf	22,2	;volatile
  1570                           
  1571                           ;motorMain.c: 123:     LATAbits.LATA3 = 0;
  1572     02D7  1196               	bcf	22,3	;volatile
  1573     02D8                     l1324:
  1574                           
  1575                           ;motorMain.c: 125:     SetUpPumpArm();
  1576     02D8  3184  246B  3182   	fcall	_SetUpPumpArm
  1577                           
  1578                           ;motorMain.c: 126:     SetUpPump();
  1579     02DB  3184  2475  3182   	fcall	_SetUpPump
  1580     02DE                     l1326:
  1581                           
  1582                           ;motorMain.c: 128:     BAUD1CONbits.BRG16=1;
  1583     02DE  0022               	movlb	2	; select bank2
  1584     02DF  159F               	bsf	31,3	;volatile
  1585     02E0                     l1328:
  1586                           
  1587                           ;motorMain.c: 130:     TX1STAbits.BRGH = 0x1;
  1588     02E0  151E               	bsf	30,2	;volatile
  1589     02E1                     l1330:
  1590                           
  1591                           ;motorMain.c: 134:     RC5PPS = 0x10;
  1592     02E1  3010               	movlw	16
  1593     02E2  003E               	movlb	30	; select bank30
  1594     02E3  00A5               	movwf	37	;volatile
  1595     02E4                     l1332:
  1596                           
  1597                           ;motorMain.c: 135:     TRISCbits.TRISC5 = 0;
  1598     02E4  0020               	movlb	0	; select bank0
  1599     02E5  1293               	bcf	19,5	;volatile
  1600     02E6                     l1334:
  1601                           
  1602                           ;motorMain.c: 137:     RXPPSbits.RXPPS = 0x16;
  1603     02E6  003D               	movlb	29	; select bank29
  1604     02E7  084B               	movf	75,w	;volatile
  1605     02E8  39E0               	andlw	-32
  1606     02E9  3816               	iorlw	22
  1607     02EA  00CB               	movwf	75	;volatile
  1608     02EB                     l1336:
  1609                           
  1610                           ;motorMain.c: 138:     TRISCbits.TRISC6 = 1;
  1611     02EB  0020               	movlb	0	; select bank0
  1612     02EC  1713               	bsf	19,6	;volatile
  1613     02ED                     l1338:
  1614                           
  1615                           ;motorMain.c: 139:     ANSELCbits.ANSC6 = 0;
  1616     02ED  003E               	movlb	30	; select bank30
  1617     02EE  134E               	bcf	78,6	;volatile
  1618     02EF                     l1340:
  1619                           
  1620                           ;motorMain.c: 142:     SP1BRGLbits.SP1BRGL = 68;
  1621     02EF  3044               	movlw	68
  1622     02F0  0022               	movlb	2	; select bank2
  1623     02F1  009B               	movwf	27	;volatile
  1624     02F2                     l1342:
  1625                           
  1626                           ;motorMain.c: 144:     CreateControlsCommand();
  1627     02F2  3184  240E  3182   	fcall	_CreateControlsCommand
  1628     02F5                     l1344:
  1629                           
  1630                           ;motorMain.c: 147:     RC1STAbits.SPEN = 1;
  1631     02F5  0022               	movlb	2	; select bank2
  1632     02F6  179D               	bsf	29,7	;volatile
  1633     02F7                     l1346:
  1634                           
  1635                           ;motorMain.c: 148:     TX1STAbits.TXEN =1;
  1636     02F7  169E               	bsf	30,5	;volatile
  1637     02F8                     l1348:
  1638                           
  1639                           ;motorMain.c: 149:     TX1STAbits.SYNC=0;
  1640     02F8  121E               	bcf	30,4	;volatile
  1641     02F9                     l1350:
  1642                           
  1643                           ;motorMain.c: 151:     RC1STAbits.CREN = 1;
  1644     02F9  161D               	bsf	29,4	;volatile
  1645     02FA                     l1352:
  1646                           
  1647                           ;motorMain.c: 154:     INTCONbits.GIE = 1;
  1648     02FA  178B               	bsf	11,7	;volatile
  1649     02FB                     l1354:
  1650                           
  1651                           ;motorMain.c: 155:     INTCONbits.PEIE = 1;
  1652     02FB  170B               	bsf	11,6	;volatile
  1653     02FC                     l1356:
  1654                           
  1655                           ;motorMain.c: 156:     PIE3bits.RCIE = 1;
  1656     02FC  002E               	movlb	14	; select bank14
  1657     02FD  1699               	bsf	25,5	;volatile
  1658     02FE                     l1358:
  1659                           
  1660                           ;motorMain.c: 157:     PIE3bits.TXIE = 1;
  1661     02FE  1619               	bsf	25,4	;volatile
  1662     02FF                     l1360:
  1663                           
  1664                           ;motorMain.c: 161:         if(controls.switchA < SWITCH_MIN){
  1665     02FF  3003               	movlw	3
  1666     0300  0020               	movlb	0	; select bank0
  1667     0301  0229               	subwf	_controls+9,w
  1668     0302  30E8               	movlw	232
  1669     0303  1903               	skipnz
  1670     0304  0228               	subwf	_controls+8,w
  1671     0305  1803               	skipnc
  1672     0306  2B08               	goto	u531
  1673     0307  2B09               	goto	u530
  1674     0308                     u531:
  1675     0308  2B0B               	goto	l104
  1676     0309                     u530:
  1677     0309                     l1362:
  1678                           
  1679                           ;motorMain.c: 162:             LATAbits.LATA0 = 1;
  1680     0309  1416               	bsf	22,0	;volatile
  1681                           
  1682                           ;motorMain.c: 163:         }
  1683     030A  2B0C               	goto	l1364
  1684     030B                     l104:	
  1685                           ;motorMain.c: 164:         else{
  1686                           
  1687                           
  1688                           ;motorMain.c: 165:             LATAbits.LATA0 = 0;
  1689     030B  1016               	bcf	22,0	;volatile
  1690     030C                     l1364:
  1691                           
  1692                           ;motorMain.c: 167:         if(controls.switchB <= SWITCH_MIN){
  1693     030C  3003               	movlw	3
  1694     030D  022B               	subwf	_controls+11,w
  1695     030E  30E9               	movlw	233
  1696     030F  1903               	skipnz
  1697     0310  022A               	subwf	_controls+10,w
  1698     0311  1803               	skipnc
  1699     0312  2B14               	goto	u541
  1700     0313  2B15               	goto	u540
  1701     0314                     u541:
  1702     0314  2B17               	goto	l106
  1703     0315                     u540:
  1704     0315                     l1366:
  1705                           
  1706                           ;motorMain.c: 168:             LATAbits.LATA1 = 1;
  1707     0315  1496               	bsf	22,1	;volatile
  1708                           
  1709                           ;motorMain.c: 169:         }
  1710     0316  2B18               	goto	l1368
  1711     0317                     l106:	
  1712                           ;motorMain.c: 170:         else{
  1713                           
  1714                           
  1715                           ;motorMain.c: 171:             LATAbits.LATA1 = 0;
  1716     0317  1096               	bcf	22,1	;volatile
  1717     0318                     l1368:
  1718                           
  1719                           ;motorMain.c: 173:         if(controls.switchC == SWITCH_MID){
  1720     0318  30DC               	movlw	220
  1721     0319  062C               	xorwf	_controls+12,w
  1722     031A  3005               	movlw	5
  1723     031B  1903               	skipnz
  1724     031C  062D               	xorwf	_controls+13,w
  1725     031D  1D03               	btfss	3,2
  1726     031E  2B20               	goto	u551
  1727     031F  2B21               	goto	u550
  1728     0320                     u551:
  1729     0320  2B23               	goto	l108
  1730     0321                     u550:
  1731     0321                     l1370:
  1732                           
  1733                           ;motorMain.c: 174:             LATAbits.LATA2 = 1;
  1734     0321  1516               	bsf	22,2	;volatile
  1735                           
  1736                           ;motorMain.c: 175:         }
  1737     0322  2B24               	goto	l1372
  1738     0323                     l108:	
  1739                           ;motorMain.c: 176:         else{
  1740                           
  1741                           
  1742                           ;motorMain.c: 177:             LATAbits.LATA2 = 0;
  1743     0323  1116               	bcf	22,2	;volatile
  1744     0324                     l1372:
  1745                           
  1746                           ;motorMain.c: 179:         if(controls.switchD <= SWITCH_MIN){
  1747     0324  3003               	movlw	3
  1748     0325  022F               	subwf	_controls+15,w
  1749     0326  30E9               	movlw	233
  1750     0327  1903               	skipnz
  1751     0328  022E               	subwf	_controls+14,w
  1752     0329  1803               	skipnc
  1753     032A  2B2C               	goto	u561
  1754     032B  2B2D               	goto	u560
  1755     032C                     u561:
  1756     032C  2B2F               	goto	l110
  1757     032D                     u560:
  1758     032D                     l1374:
  1759                           
  1760                           ;motorMain.c: 180:             LATAbits.LATA3 = 1;
  1761     032D  1596               	bsf	22,3	;volatile
  1762                           
  1763                           ;motorMain.c: 181:         }
  1764     032E  2B30               	goto	l1376
  1765     032F                     l110:	
  1766                           ;motorMain.c: 182:         else{
  1767                           
  1768                           
  1769                           ;motorMain.c: 183:             LATAbits.LATA3 = 0;
  1770     032F  1196               	bcf	22,3	;volatile
  1771     0330                     l1376:
  1772                           
  1773                           ;motorMain.c: 186:         MovePumpArm(controls.switchC);
  1774     0330  082D               	movf	_controls+13,w
  1775     0331  00E9               	movwf	MovePumpArm@switchValue+1
  1776     0332  082C               	movf	_controls+12,w
  1777     0333  00E8               	movwf	MovePumpArm@switchValue
  1778     0334  3184  2429  3182   	fcall	_MovePumpArm
  1779                           
  1780                           ;motorMain.c: 187:         ActivatePump(controls.switchD);
  1781     0337  0020               	movlb	0	; select bank0
  1782     0338  082F               	movf	_controls+15,w
  1783     0339  00E9               	movwf	ActivatePump@switchValue+1
  1784     033A  082E               	movf	_controls+14,w
  1785     033B  00E8               	movwf	ActivatePump@switchValue
  1786     033C  3184  245B  3182   	fcall	_ActivatePump
  1787     033F                     l1378:
  1788                           
  1789                           ;motorMain.c: 188:         if(currentCommand.done){
  1790     033F  0020               	movlb	0	; select bank0
  1791     0340  0843               	movf	_currentCommand+13,w
  1792     0341  1903               	btfsc	3,2
  1793     0342  2B44               	goto	u571
  1794     0343  2B45               	goto	u570
  1795     0344                     u571:
  1796     0344  2AFF               	goto	l1360
  1797     0345                     u570:
  1798     0345                     l1380:
  1799                           
  1800                           ;motorMain.c: 189:             if(currentCommand.sendId == CONTROL_INPUT){
  1801     0345  033A               	decf	_currentCommand+4,w
  1802     0346  043B               	iorwf	_currentCommand+5,w
  1803     0347  1D03               	btfss	3,2
  1804     0348  2B4A               	goto	u581
  1805     0349  2B4B               	goto	u580
  1806     034A                     u581:
  1807     034A  2B4F               	goto	l1384
  1808     034B                     u580:
  1809     034B                     l1382:
  1810                           
  1811                           ;motorMain.c: 190:                 drive();
  1812     034B  3180  20B5  3182   	fcall	_drive
  1813                           
  1814                           ;motorMain.c: 191:             }
  1815     034E  2AFF               	goto	l1360
  1816     034F                     l1384:
  1817                           
  1818                           ;motorMain.c: 193:                 CreateControlsCommand();
  1819     034F  3184  240E  3182   	fcall	_CreateControlsCommand
  1820     0352  2AFF               	goto	l1360
  1821     0353  3180  287D         	ljmp	start
  1822     0355                     __end_of_main:
  1823                           
  1824                           	psect	text1
  1825     00B5                     __ptext1:	
  1826 ;; *************** function _drive *****************
  1827 ;; Defined at:
  1828 ;;		line 229 in file "motorMain.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;		None
  1831 ;; Auto vars:     Size  Location     Type
  1832 ;;  power           2    0        unsigned int 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, status,2, status,0, pclath, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1846 ;;Total ram usage:        1 bytes
  1847 ;; Hardware stack levels used: 1
  1848 ;; Hardware stack levels required when called: 3
  1849 ;; This function calls:
  1850 ;;		_CreateBreak
  1851 ;;		_CreateControlsCommand
  1852 ;;		_CreateMoveBackwardCommmand
  1853 ;;		_CreateMoveForwardCommmand
  1854 ;;		_CreateTurnLeftCommmand
  1855 ;;		_CreateTurnRightCommmand
  1856 ;; This function is called by:
  1857 ;;		_main
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861     00B5                     _drive:	
  1862                           ;psect for function _drive
  1863                           
  1864     00B5                     l1224:	
  1865                           ;incstack = 0
  1866                           ; Regs used in _drive: [wreg+status,2+status,0+pclath+cstack]
  1867                           
  1868                           
  1869                           ;motorMain.c: 232:     if((controls.rightX >= 0x6A4) && (controls.rightY >= 0x546 && con
      +                          trols.rightY <= 0x672)){
  1870     00B5  0020               	movlb	0	; select bank0
  1871     00B6  0821               	movf	_controls+1,w
  1872     00B7  3A80               	xorlw	128
  1873     00B8  00EA               	movwf	??_drive
  1874     00B9  3086               	movlw	134
  1875     00BA  026A               	subwf	??_drive,w
  1876     00BB  1D03               	skipz
  1877     00BC  28BF               	goto	u365
  1878     00BD  30A4               	movlw	164
  1879     00BE  0220               	subwf	_controls,w
  1880     00BF                     u365:
  1881     00BF  1C03               	skipc
  1882     00C0  28C2               	goto	u361
  1883     00C1  28C3               	goto	u360
  1884     00C2                     u361:
  1885     00C2  28E8               	goto	l1232
  1886     00C3                     u360:
  1887     00C3                     l1226:
  1888     00C3  0020               	movlb	0	; select bank0
  1889     00C4  0823               	movf	_controls+3,w
  1890     00C5  3A80               	xorlw	128
  1891     00C6  00EA               	movwf	??_drive
  1892     00C7  3085               	movlw	133
  1893     00C8  026A               	subwf	??_drive,w
  1894     00C9  1D03               	skipz
  1895     00CA  28CD               	goto	u375
  1896     00CB  3046               	movlw	70
  1897     00CC  0222               	subwf	_controls+2,w
  1898     00CD                     u375:
  1899     00CD  1C03               	skipc
  1900     00CE  28D0               	goto	u371
  1901     00CF  28D1               	goto	u370
  1902     00D0                     u371:
  1903     00D0  28E8               	goto	l1232
  1904     00D1                     u370:
  1905     00D1                     l1228:
  1906     00D1  0020               	movlb	0	; select bank0
  1907     00D2  0823               	movf	_controls+3,w
  1908     00D3  3A80               	xorlw	128
  1909     00D4  00EA               	movwf	??_drive
  1910     00D5  3086               	movlw	134
  1911     00D6  026A               	subwf	??_drive,w
  1912     00D7  1D03               	skipz
  1913     00D8  28DB               	goto	u385
  1914     00D9  3073               	movlw	115
  1915     00DA  0222               	subwf	_controls+2,w
  1916     00DB                     u385:
  1917     00DB  1803               	skipnc
  1918     00DC  28DE               	goto	u381
  1919     00DD  28DF               	goto	u380
  1920     00DE                     u381:
  1921     00DE  28E8               	goto	l1232
  1922     00DF                     u380:
  1923     00DF                     l1230:
  1924                           
  1925                           ;motorMain.c: 233:         CreateTurnRightCommmand(power);
  1926     00DF  304B               	movlw	75
  1927     00E0  0020               	movlb	0	; select bank0
  1928     00E1  00E8               	movwf	CreateTurnRightCommmand@pwm
  1929     00E2  3000               	movlw	0
  1930     00E3  00E9               	movwf	CreateTurnRightCommmand@pwm+1
  1931     00E4  3183  23D8  3180   	fcall	_CreateTurnRightCommmand
  1932                           
  1933                           ;motorMain.c: 234:     }else if((controls.rightX <= 0x514) && (controls.rightY >= 0x546 
      +                          && controls.rightY <= 0x672)){
  1934     00E7  29C0               	goto	l156
  1935     00E8                     l1232:
  1936     00E8  0020               	movlb	0	; select bank0
  1937     00E9  0821               	movf	_controls+1,w
  1938     00EA  3A80               	xorlw	128
  1939     00EB  00EA               	movwf	??_drive
  1940     00EC  3085               	movlw	133
  1941     00ED  026A               	subwf	??_drive,w
  1942     00EE  1D03               	skipz
  1943     00EF  28F2               	goto	u395
  1944     00F0  3015               	movlw	21
  1945     00F1  0220               	subwf	_controls,w
  1946     00F2                     u395:
  1947     00F2  1803               	skipnc
  1948     00F3  28F5               	goto	u391
  1949     00F4  28F6               	goto	u390
  1950     00F5                     u391:
  1951     00F5  291B               	goto	l1240
  1952     00F6                     u390:
  1953     00F6                     l1234:
  1954     00F6  0020               	movlb	0	; select bank0
  1955     00F7  0823               	movf	_controls+3,w
  1956     00F8  3A80               	xorlw	128
  1957     00F9  00EA               	movwf	??_drive
  1958     00FA  3085               	movlw	133
  1959     00FB  026A               	subwf	??_drive,w
  1960     00FC  1D03               	skipz
  1961     00FD  2900               	goto	u405
  1962     00FE  3046               	movlw	70
  1963     00FF  0222               	subwf	_controls+2,w
  1964     0100                     u405:
  1965     0100  1C03               	skipc
  1966     0101  2903               	goto	u401
  1967     0102  2904               	goto	u400
  1968     0103                     u401:
  1969     0103  291B               	goto	l1240
  1970     0104                     u400:
  1971     0104                     l1236:
  1972     0104  0020               	movlb	0	; select bank0
  1973     0105  0823               	movf	_controls+3,w
  1974     0106  3A80               	xorlw	128
  1975     0107  00EA               	movwf	??_drive
  1976     0108  3086               	movlw	134
  1977     0109  026A               	subwf	??_drive,w
  1978     010A  1D03               	skipz
  1979     010B  290E               	goto	u415
  1980     010C  3073               	movlw	115
  1981     010D  0222               	subwf	_controls+2,w
  1982     010E                     u415:
  1983     010E  1803               	skipnc
  1984     010F  2911               	goto	u411
  1985     0110  2912               	goto	u410
  1986     0111                     u411:
  1987     0111  291B               	goto	l1240
  1988     0112                     u410:
  1989     0112                     l1238:
  1990                           
  1991                           ;motorMain.c: 235:         CreateTurnLeftCommmand(power);
  1992     0112  304B               	movlw	75
  1993     0113  0020               	movlb	0	; select bank0
  1994     0114  00E8               	movwf	CreateTurnLeftCommmand@pwm
  1995     0115  3000               	movlw	0
  1996     0116  00E9               	movwf	CreateTurnLeftCommmand@pwm+1
  1997     0117  3183  23F3  3180   	fcall	_CreateTurnLeftCommmand
  1998                           
  1999                           ;motorMain.c: 236:     }else if((controls.rightY >= 0x6A4) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  2000     011A  29C0               	goto	l156
  2001     011B                     l1240:
  2002     011B  0020               	movlb	0	; select bank0
  2003     011C  0823               	movf	_controls+3,w
  2004     011D  3A80               	xorlw	128
  2005     011E  00EA               	movwf	??_drive
  2006     011F  3086               	movlw	134
  2007     0120  026A               	subwf	??_drive,w
  2008     0121  1D03               	skipz
  2009     0122  2925               	goto	u425
  2010     0123  30A4               	movlw	164
  2011     0124  0222               	subwf	_controls+2,w
  2012     0125                     u425:
  2013     0125  1C03               	skipc
  2014     0126  2928               	goto	u421
  2015     0127  2929               	goto	u420
  2016     0128                     u421:
  2017     0128  294E               	goto	l1248
  2018     0129                     u420:
  2019     0129                     l1242:
  2020     0129  0020               	movlb	0	; select bank0
  2021     012A  0821               	movf	_controls+1,w
  2022     012B  3A80               	xorlw	128
  2023     012C  00EA               	movwf	??_drive
  2024     012D  3085               	movlw	133
  2025     012E  026A               	subwf	??_drive,w
  2026     012F  1D03               	skipz
  2027     0130  2933               	goto	u435
  2028     0131  3046               	movlw	70
  2029     0132  0220               	subwf	_controls,w
  2030     0133                     u435:
  2031     0133  1C03               	skipc
  2032     0134  2936               	goto	u431
  2033     0135  2937               	goto	u430
  2034     0136                     u431:
  2035     0136  294E               	goto	l1248
  2036     0137                     u430:
  2037     0137                     l1244:
  2038     0137  0020               	movlb	0	; select bank0
  2039     0138  0821               	movf	_controls+1,w
  2040     0139  3A80               	xorlw	128
  2041     013A  00EA               	movwf	??_drive
  2042     013B  3086               	movlw	134
  2043     013C  026A               	subwf	??_drive,w
  2044     013D  1D03               	skipz
  2045     013E  2941               	goto	u445
  2046     013F  3073               	movlw	115
  2047     0140  0220               	subwf	_controls,w
  2048     0141                     u445:
  2049     0141  1803               	skipnc
  2050     0142  2944               	goto	u441
  2051     0143  2945               	goto	u440
  2052     0144                     u441:
  2053     0144  294E               	goto	l1248
  2054     0145                     u440:
  2055     0145                     l1246:
  2056                           
  2057                           ;motorMain.c: 237:         CreateMoveForwardCommmand(power);
  2058     0145  304B               	movlw	75
  2059     0146  0020               	movlb	0	; select bank0
  2060     0147  00E8               	movwf	CreateMoveForwardCommmand@pwm
  2061     0148  3000               	movlw	0
  2062     0149  00E9               	movwf	CreateMoveForwardCommmand@pwm+1
  2063     014A  3183  239A  3180   	fcall	_CreateMoveForwardCommmand
  2064                           
  2065                           ;motorMain.c: 238:     }else if((controls.rightY <= 0x514) && (controls.rightX >= 0x546 
      +                          && controls.rightX <= 0x672)){
  2066     014D  29C0               	goto	l156
  2067     014E                     l1248:
  2068     014E  0020               	movlb	0	; select bank0
  2069     014F  0823               	movf	_controls+3,w
  2070     0150  3A80               	xorlw	128
  2071     0151  00EA               	movwf	??_drive
  2072     0152  3085               	movlw	133
  2073     0153  026A               	subwf	??_drive,w
  2074     0154  1D03               	skipz
  2075     0155  2958               	goto	u455
  2076     0156  3015               	movlw	21
  2077     0157  0222               	subwf	_controls+2,w
  2078     0158                     u455:
  2079     0158  1803               	skipnc
  2080     0159  295B               	goto	u451
  2081     015A  295C               	goto	u450
  2082     015B                     u451:
  2083     015B  2981               	goto	l1256
  2084     015C                     u450:
  2085     015C                     l1250:
  2086     015C  0020               	movlb	0	; select bank0
  2087     015D  0821               	movf	_controls+1,w
  2088     015E  3A80               	xorlw	128
  2089     015F  00EA               	movwf	??_drive
  2090     0160  3085               	movlw	133
  2091     0161  026A               	subwf	??_drive,w
  2092     0162  1D03               	skipz
  2093     0163  2966               	goto	u465
  2094     0164  3046               	movlw	70
  2095     0165  0220               	subwf	_controls,w
  2096     0166                     u465:
  2097     0166  1C03               	skipc
  2098     0167  2969               	goto	u461
  2099     0168  296A               	goto	u460
  2100     0169                     u461:
  2101     0169  2981               	goto	l1256
  2102     016A                     u460:
  2103     016A                     l1252:
  2104     016A  0020               	movlb	0	; select bank0
  2105     016B  0821               	movf	_controls+1,w
  2106     016C  3A80               	xorlw	128
  2107     016D  00EA               	movwf	??_drive
  2108     016E  3086               	movlw	134
  2109     016F  026A               	subwf	??_drive,w
  2110     0170  1D03               	skipz
  2111     0171  2974               	goto	u475
  2112     0172  3073               	movlw	115
  2113     0173  0220               	subwf	_controls,w
  2114     0174                     u475:
  2115     0174  1803               	skipnc
  2116     0175  2977               	goto	u471
  2117     0176  2978               	goto	u470
  2118     0177                     u471:
  2119     0177  2981               	goto	l1256
  2120     0178                     u470:
  2121     0178                     l1254:
  2122                           
  2123                           ;motorMain.c: 239:         CreateMoveBackwardCommmand(power);
  2124     0178  304B               	movlw	75
  2125     0179  0020               	movlb	0	; select bank0
  2126     017A  00E8               	movwf	CreateMoveBackwardCommmand@pwm
  2127     017B  3000               	movlw	0
  2128     017C  00E9               	movwf	CreateMoveBackwardCommmand@pwm+1
  2129     017D  3183  23B9  3180   	fcall	_CreateMoveBackwardCommmand
  2130                           
  2131                           ;motorMain.c: 240:     }else if((controls.rightY >= 0x546 && controls.rightY <= 0x672) &
      +                          & (controls.rightX >= 0x546 && controls.rightX <= 0x672)){
  2132     0180  29C0               	goto	l156
  2133     0181                     l1256:
  2134     0181  0020               	movlb	0	; select bank0
  2135     0182  0823               	movf	_controls+3,w
  2136     0183  3A80               	xorlw	128
  2137     0184  00EA               	movwf	??_drive
  2138     0185  3085               	movlw	133
  2139     0186  026A               	subwf	??_drive,w
  2140     0187  1D03               	skipz
  2141     0188  298B               	goto	u485
  2142     0189  3046               	movlw	70
  2143     018A  0222               	subwf	_controls+2,w
  2144     018B                     u485:
  2145     018B  1C03               	skipc
  2146     018C  298E               	goto	u481
  2147     018D  298F               	goto	u480
  2148     018E                     u481:
  2149     018E  29BD               	goto	l1266
  2150     018F                     u480:
  2151     018F                     l1258:
  2152     018F  0020               	movlb	0	; select bank0
  2153     0190  0823               	movf	_controls+3,w
  2154     0191  3A80               	xorlw	128
  2155     0192  00EA               	movwf	??_drive
  2156     0193  3086               	movlw	134
  2157     0194  026A               	subwf	??_drive,w
  2158     0195  1D03               	skipz
  2159     0196  2999               	goto	u495
  2160     0197  3073               	movlw	115
  2161     0198  0222               	subwf	_controls+2,w
  2162     0199                     u495:
  2163     0199  1803               	skipnc
  2164     019A  299C               	goto	u491
  2165     019B  299D               	goto	u490
  2166     019C                     u491:
  2167     019C  29BD               	goto	l1266
  2168     019D                     u490:
  2169     019D                     l1260:
  2170     019D  0020               	movlb	0	; select bank0
  2171     019E  0821               	movf	_controls+1,w
  2172     019F  3A80               	xorlw	128
  2173     01A0  00EA               	movwf	??_drive
  2174     01A1  3085               	movlw	133
  2175     01A2  026A               	subwf	??_drive,w
  2176     01A3  1D03               	skipz
  2177     01A4  29A7               	goto	u505
  2178     01A5  3046               	movlw	70
  2179     01A6  0220               	subwf	_controls,w
  2180     01A7                     u505:
  2181     01A7  1C03               	skipc
  2182     01A8  29AA               	goto	u501
  2183     01A9  29AB               	goto	u500
  2184     01AA                     u501:
  2185     01AA  29BD               	goto	l1266
  2186     01AB                     u500:
  2187     01AB                     l1262:
  2188     01AB  0020               	movlb	0	; select bank0
  2189     01AC  0821               	movf	_controls+1,w
  2190     01AD  3A80               	xorlw	128
  2191     01AE  00EA               	movwf	??_drive
  2192     01AF  3086               	movlw	134
  2193     01B0  026A               	subwf	??_drive,w
  2194     01B1  1D03               	skipz
  2195     01B2  29B5               	goto	u515
  2196     01B3  3073               	movlw	115
  2197     01B4  0220               	subwf	_controls,w
  2198     01B5                     u515:
  2199     01B5  1803               	skipnc
  2200     01B6  29B8               	goto	u511
  2201     01B7  29B9               	goto	u510
  2202     01B8                     u511:
  2203     01B8  29BD               	goto	l1266
  2204     01B9                     u510:
  2205     01B9                     l1264:
  2206                           
  2207                           ;motorMain.c: 241:         CreateBreak();
  2208     01B9  3184  2444  3180   	fcall	_CreateBreak
  2209                           
  2210                           ;motorMain.c: 242:     }
  2211     01BC  29C0               	goto	l156
  2212     01BD                     l1266:
  2213                           
  2214                           ;motorMain.c: 244:         CreateControlsCommand();
  2215     01BD  3184  240E  3180   	fcall	_CreateControlsCommand
  2216     01C0                     l156:
  2217     01C0  0008               	return
  2218     01C1                     __end_of_drive:
  2219                           
  2220                           	psect	text2
  2221     03D8                     __ptext2:	
  2222 ;; *************** function _CreateTurnRightCommmand *****************
  2223 ;; Defined at:
  2224 ;;		line 248 in file "motorMain.c"
  2225 ;; Parameters:    Size  Location     Type
  2226 ;;  pwm             2    0[BANK0 ] unsigned int 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;		None
  2229 ;; Return value:  Size  Location     Type
  2230 ;;                  1    wreg      void 
  2231 ;; Registers used:
  2232 ;;		wreg, status,2
  2233 ;; Tracked objects:
  2234 ;;		On entry : 0/0
  2235 ;;		On exit  : 0/0
  2236 ;;		Unchanged: 0/0
  2237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2238 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2241 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2242 ;;Total ram usage:        2 bytes
  2243 ;; Hardware stack levels used: 1
  2244 ;; Hardware stack levels required when called: 2
  2245 ;; This function calls:
  2246 ;;		Nothing
  2247 ;; This function is called by:
  2248 ;;		_drive
  2249 ;; This function uses a non-reentrant model
  2250 ;;
  2251                           
  2252     03D8                     _CreateTurnRightCommmand:	
  2253                           ;psect for function _CreateTurnRightCommmand
  2254                           
  2255     03D8                     l1140:	
  2256                           ;incstack = 0
  2257                           ; Regs used in _CreateTurnRightCommmand: [wreg+status,2]
  2258                           
  2259                           
  2260                           ;motorMain.c: 249:     currentCommand.sendId = 3;
  2261     03D8  3003               	movlw	3
  2262     03D9  0020               	movlb	0	; select bank0
  2263     03DA  00BA               	movwf	_currentCommand+4
  2264     03DB  3000               	movlw	0
  2265     03DC  00BB               	movwf	_currentCommand+5
  2266     03DD                     l1142:
  2267                           
  2268                           ;motorMain.c: 250:     currentCommand.sendIt = 0;
  2269     03DD  01B8               	clrf	_currentCommand+2
  2270     03DE  01B9               	clrf	_currentCommand+3
  2271     03DF                     l1144:
  2272                           
  2273                           ;motorMain.c: 251:     currentCommand.sendLimit = 10;
  2274     03DF  300A               	movlw	10
  2275     03E0  00B6               	movwf	_currentCommand
  2276     03E1  3000               	movlw	0
  2277     03E2  00B7               	movwf	_currentCommand+1
  2278                           
  2279                           ;motorMain.c: 252:     currentCommand.receiveId = 0;
  2280     03E3  01C1               	clrf	_currentCommand+11
  2281     03E4  01C2               	clrf	_currentCommand+12
  2282                           
  2283                           ;motorMain.c: 253:     currentCommand.receiveLimit = 0;
  2284     03E5  01BF               	clrf	_currentCommand+9
  2285     03E6  01C0               	clrf	_currentCommand+10
  2286                           
  2287                           ;motorMain.c: 254:     currentCommand.receiveIt = 0;
  2288     03E7  01BD               	clrf	_currentCommand+7
  2289     03E8  01BE               	clrf	_currentCommand+8
  2290                           
  2291                           ;motorMain.c: 255:     currentCommand.done = 0;
  2292     03E9  01C3               	clrf	_currentCommand+13
  2293     03EA                     l1146:
  2294                           
  2295                           ;motorMain.c: 257:     TurnRightCommand[7] = pwm;
  2296     03EA  0868               	movf	CreateTurnRightCommmand@pwm,w
  2297     03EB  00D5               	movwf	_TurnRightCommand+7
  2298     03EC                     l1148:
  2299                           
  2300                           ;motorMain.c: 258:     TurnRightCommand[9] = pwm;
  2301     03EC  0868               	movf	CreateTurnRightCommmand@pwm,w
  2302     03ED  00D7               	movwf	_TurnRightCommand+9
  2303     03EE                     l1150:
  2304                           
  2305                           ;motorMain.c: 259:     currentCommand.toSend = TurnRightCommand;
  2306     03EE  304E               	movlw	(low (_TurnRightCommand| 0))& (0+255)
  2307     03EF  00BC               	movwf	low ((_currentCommand| 0+6))
  2308     03F0                     l1152:
  2309                           
  2310                           ;motorMain.c: 260:     PIE3bits.TXIE = 1;
  2311     03F0  002E               	movlb	14	; select bank14
  2312     03F1  1619               	bsf	25,4	;volatile
  2313     03F2                     l159:
  2314     03F2  0008               	return
  2315     03F3                     __end_of_CreateTurnRightCommmand:
  2316                           
  2317                           	psect	text3
  2318     03F3                     __ptext3:	
  2319 ;; *************** function _CreateTurnLeftCommmand *****************
  2320 ;; Defined at:
  2321 ;;		line 263 in file "motorMain.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  pwm             2    0[BANK0 ] unsigned int 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;		None
  2326 ;; Return value:  Size  Location     Type
  2327 ;;                  1    wreg      void 
  2328 ;; Registers used:
  2329 ;;		wreg, status,2
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2335 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2339 ;;Total ram usage:        2 bytes
  2340 ;; Hardware stack levels used: 1
  2341 ;; Hardware stack levels required when called: 2
  2342 ;; This function calls:
  2343 ;;		Nothing
  2344 ;; This function is called by:
  2345 ;;		_drive
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349     03F3                     _CreateTurnLeftCommmand:	
  2350                           ;psect for function _CreateTurnLeftCommmand
  2351                           
  2352     03F3                     l1154:	
  2353                           ;incstack = 0
  2354                           ; Regs used in _CreateTurnLeftCommmand: [wreg+status,2]
  2355                           
  2356                           
  2357                           ;motorMain.c: 264:     currentCommand.sendId = 4;
  2358     03F3  3004               	movlw	4
  2359     03F4  0020               	movlb	0	; select bank0
  2360     03F5  00BA               	movwf	_currentCommand+4
  2361     03F6  3000               	movlw	0
  2362     03F7  00BB               	movwf	_currentCommand+5
  2363     03F8                     l1156:
  2364                           
  2365                           ;motorMain.c: 265:     currentCommand.sendIt = 0;
  2366     03F8  01B8               	clrf	_currentCommand+2
  2367     03F9  01B9               	clrf	_currentCommand+3
  2368     03FA                     l1158:
  2369                           
  2370                           ;motorMain.c: 266:     currentCommand.sendLimit = 10;
  2371     03FA  300A               	movlw	10
  2372     03FB  00B6               	movwf	_currentCommand
  2373     03FC  3000               	movlw	0
  2374     03FD  00B7               	movwf	_currentCommand+1
  2375                           
  2376                           ;motorMain.c: 267:     currentCommand.receiveId = 0;
  2377     03FE  01C1               	clrf	_currentCommand+11
  2378     03FF  01C2               	clrf	_currentCommand+12
  2379                           
  2380                           ;motorMain.c: 268:     currentCommand.receiveLimit = 0;
  2381     0400  01BF               	clrf	_currentCommand+9
  2382     0401  01C0               	clrf	_currentCommand+10
  2383                           
  2384                           ;motorMain.c: 269:     currentCommand.receiveIt = 0;
  2385     0402  01BD               	clrf	_currentCommand+7
  2386     0403  01BE               	clrf	_currentCommand+8
  2387                           
  2388                           ;motorMain.c: 270:     currentCommand.done = 0;
  2389     0404  01C3               	clrf	_currentCommand+13
  2390     0405                     l1160:
  2391                           
  2392                           ;motorMain.c: 272:     TurnLeftCommand[7] = pwm;
  2393     0405  0868               	movf	CreateTurnLeftCommmand@pwm,w
  2394     0406  00DF               	movwf	_TurnLeftCommand+7
  2395     0407                     l1162:
  2396                           
  2397                           ;motorMain.c: 273:     TurnLeftCommand[9] = pwm;
  2398     0407  0868               	movf	CreateTurnLeftCommmand@pwm,w
  2399     0408  00E1               	movwf	_TurnLeftCommand+9
  2400     0409                     l1164:
  2401                           
  2402                           ;motorMain.c: 274:     currentCommand.toSend = TurnLeftCommand;
  2403     0409  3058               	movlw	(low (_TurnLeftCommand| 0))& (0+255)
  2404     040A  00BC               	movwf	low ((_currentCommand| 0+6))
  2405     040B                     l1166:
  2406                           
  2407                           ;motorMain.c: 275:     PIE3bits.TXIE = 1;
  2408     040B  002E               	movlb	14	; select bank14
  2409     040C  1619               	bsf	25,4	;volatile
  2410     040D                     l162:
  2411     040D  0008               	return
  2412     040E                     __end_of_CreateTurnLeftCommmand:
  2413                           
  2414                           	psect	text4
  2415     039A                     __ptext4:	
  2416 ;; *************** function _CreateMoveForwardCommmand *****************
  2417 ;; Defined at:
  2418 ;;		line 278 in file "motorMain.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;  pwm             2    0[BANK0 ] unsigned int 
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, status,2
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2432 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2435 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2436 ;;Total ram usage:        2 bytes
  2437 ;; Hardware stack levels used: 1
  2438 ;; Hardware stack levels required when called: 2
  2439 ;; This function calls:
  2440 ;;		Nothing
  2441 ;; This function is called by:
  2442 ;;		_drive
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446     039A                     _CreateMoveForwardCommmand:	
  2447                           ;psect for function _CreateMoveForwardCommmand
  2448                           
  2449     039A                     l1168:	
  2450                           ;incstack = 0
  2451                           ; Regs used in _CreateMoveForwardCommmand: [wreg+status,2]
  2452                           
  2453                           
  2454                           ;motorMain.c: 279:     currentCommand.sendId = 5;
  2455     039A  3005               	movlw	5
  2456     039B  0020               	movlb	0	; select bank0
  2457     039C  00BA               	movwf	_currentCommand+4
  2458     039D  3000               	movlw	0
  2459     039E  00BB               	movwf	_currentCommand+5
  2460     039F                     l1170:
  2461                           
  2462                           ;motorMain.c: 280:     currentCommand.sendIt = 0;
  2463     039F  01B8               	clrf	_currentCommand+2
  2464     03A0  01B9               	clrf	_currentCommand+3
  2465     03A1                     l1172:
  2466                           
  2467                           ;motorMain.c: 281:     currentCommand.sendLimit = 10;
  2468     03A1  300A               	movlw	10
  2469     03A2  00B6               	movwf	_currentCommand
  2470     03A3  3000               	movlw	0
  2471     03A4  00B7               	movwf	_currentCommand+1
  2472                           
  2473                           ;motorMain.c: 282:     currentCommand.receiveId = 0;
  2474     03A5  01C1               	clrf	_currentCommand+11
  2475     03A6  01C2               	clrf	_currentCommand+12
  2476                           
  2477                           ;motorMain.c: 283:     currentCommand.receiveLimit = 0;
  2478     03A7  01BF               	clrf	_currentCommand+9
  2479     03A8  01C0               	clrf	_currentCommand+10
  2480                           
  2481                           ;motorMain.c: 284:     currentCommand.receiveIt = 0;
  2482     03A9  01BD               	clrf	_currentCommand+7
  2483     03AA  01BE               	clrf	_currentCommand+8
  2484                           
  2485                           ;motorMain.c: 285:     currentCommand.done = 0;
  2486     03AB  01C3               	clrf	_currentCommand+13
  2487     03AC                     l1174:
  2488                           
  2489                           ;motorMain.c: 287:     MoveForwardCommand[7] = pwm;
  2490     03AC  0868               	movf	CreateMoveForwardCommmand@pwm,w
  2491     03AD  0021               	movlb	1	; select bank1
  2492     03AE  00C2               	movwf	(_MoveForwardCommand^(0+128)+7)
  2493     03AF                     l1176:
  2494                           
  2495                           ;motorMain.c: 288:     MoveForwardCommand[9] = pwm;
  2496     03AF  0020               	movlb	0	; select bank0
  2497     03B0  0868               	movf	CreateMoveForwardCommmand@pwm,w
  2498     03B1  0021               	movlb	1	; select bank1
  2499     03B2  00C4               	movwf	(_MoveForwardCommand^(0+128)+9)
  2500     03B3                     l1178:
  2501                           
  2502                           ;motorMain.c: 289:     currentCommand.toSend = MoveForwardCommand;
  2503     03B3  30BB               	movlw	(low (_MoveForwardCommand| 0))& (0+255)
  2504     03B4  0020               	movlb	0	; select bank0
  2505     03B5  00BC               	movwf	low ((_currentCommand| 0+6))
  2506     03B6                     l1180:
  2507                           
  2508                           ;motorMain.c: 290:     PIE3bits.TXIE = 1;
  2509     03B6  002E               	movlb	14	; select bank14
  2510     03B7  1619               	bsf	25,4	;volatile
  2511     03B8                     l165:
  2512     03B8  0008               	return
  2513     03B9                     __end_of_CreateMoveForwardCommmand:
  2514                           
  2515                           	psect	text5
  2516     03B9                     __ptext5:	
  2517 ;; *************** function _CreateMoveBackwardCommmand *****************
  2518 ;; Defined at:
  2519 ;;		line 293 in file "motorMain.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  pwm             2    0[BANK0 ] unsigned int 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;		None
  2524 ;; Return value:  Size  Location     Type
  2525 ;;                  1    wreg      void 
  2526 ;; Registers used:
  2527 ;;		wreg, status,2
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2533 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2536 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2537 ;;Total ram usage:        2 bytes
  2538 ;; Hardware stack levels used: 1
  2539 ;; Hardware stack levels required when called: 2
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_drive
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547     03B9                     _CreateMoveBackwardCommmand:	
  2548                           ;psect for function _CreateMoveBackwardCommmand
  2549                           
  2550     03B9                     l1182:	
  2551                           ;incstack = 0
  2552                           ; Regs used in _CreateMoveBackwardCommmand: [wreg+status,2]
  2553                           
  2554                           
  2555                           ;motorMain.c: 294:     currentCommand.sendId = 6;
  2556     03B9  3006               	movlw	6
  2557     03BA  0020               	movlb	0	; select bank0
  2558     03BB  00BA               	movwf	_currentCommand+4
  2559     03BC  3000               	movlw	0
  2560     03BD  00BB               	movwf	_currentCommand+5
  2561     03BE                     l1184:
  2562                           
  2563                           ;motorMain.c: 295:     currentCommand.sendIt = 0;
  2564     03BE  01B8               	clrf	_currentCommand+2
  2565     03BF  01B9               	clrf	_currentCommand+3
  2566     03C0                     l1186:
  2567                           
  2568                           ;motorMain.c: 296:     currentCommand.sendLimit = 10;
  2569     03C0  300A               	movlw	10
  2570     03C1  00B6               	movwf	_currentCommand
  2571     03C2  3000               	movlw	0
  2572     03C3  00B7               	movwf	_currentCommand+1
  2573                           
  2574                           ;motorMain.c: 297:     currentCommand.receiveId = 0;
  2575     03C4  01C1               	clrf	_currentCommand+11
  2576     03C5  01C2               	clrf	_currentCommand+12
  2577                           
  2578                           ;motorMain.c: 298:     currentCommand.receiveLimit = 0;
  2579     03C6  01BF               	clrf	_currentCommand+9
  2580     03C7  01C0               	clrf	_currentCommand+10
  2581                           
  2582                           ;motorMain.c: 299:     currentCommand.receiveIt = 0;
  2583     03C8  01BD               	clrf	_currentCommand+7
  2584     03C9  01BE               	clrf	_currentCommand+8
  2585                           
  2586                           ;motorMain.c: 300:     currentCommand.done = 0;
  2587     03CA  01C3               	clrf	_currentCommand+13
  2588     03CB                     l1188:
  2589                           
  2590                           ;motorMain.c: 302:     MoveBackwardCommand[7] = pwm;
  2591     03CB  0868               	movf	CreateMoveBackwardCommmand@pwm,w
  2592     03CC  0021               	movlb	1	; select bank1
  2593     03CD  00B8               	movwf	(_MoveBackwardCommand^(0+128)+7)
  2594     03CE                     l1190:
  2595                           
  2596                           ;motorMain.c: 303:     MoveBackwardCommand[9] = pwm;
  2597     03CE  0020               	movlb	0	; select bank0
  2598     03CF  0868               	movf	CreateMoveBackwardCommmand@pwm,w
  2599     03D0  0021               	movlb	1	; select bank1
  2600     03D1  00BA               	movwf	(_MoveBackwardCommand^(0+128)+9)
  2601     03D2                     l1192:
  2602                           
  2603                           ;motorMain.c: 304:     currentCommand.toSend = MoveBackwardCommand;
  2604     03D2  30B1               	movlw	(low (_MoveBackwardCommand| 0))& (0+255)
  2605     03D3  0020               	movlb	0	; select bank0
  2606     03D4  00BC               	movwf	low ((_currentCommand| 0+6))
  2607     03D5                     l1194:
  2608                           
  2609                           ;motorMain.c: 305:     PIE3bits.TXIE = 1;
  2610     03D5  002E               	movlb	14	; select bank14
  2611     03D6  1619               	bsf	25,4	;volatile
  2612     03D7                     l168:
  2613     03D7  0008               	return
  2614     03D8                     __end_of_CreateMoveBackwardCommmand:
  2615                           
  2616                           	psect	text6
  2617     040E                     __ptext6:	
  2618 ;; *************** function _CreateControlsCommand *****************
  2619 ;; Defined at:
  2620 ;;		line 321 in file "motorMain.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, status,2
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2638 ;;Total ram usage:        0 bytes
  2639 ;; Hardware stack levels used: 1
  2640 ;; Hardware stack levels required when called: 2
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_main
  2645 ;;		_drive
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649     040E                     _CreateControlsCommand:	
  2650                           ;psect for function _CreateControlsCommand
  2651                           
  2652     040E                     l1126:	
  2653                           ;incstack = 0
  2654                           ; Regs used in _CreateControlsCommand: [wreg+status,2]
  2655                           
  2656                           
  2657                           ;motorMain.c: 322:     currentCommand.receiveId = CONTROL_INPUT;
  2658     040E  3001               	movlw	1
  2659     040F  0020               	movlb	0	; select bank0
  2660     0410  00C1               	movwf	_currentCommand+11
  2661     0411  3000               	movlw	0
  2662     0412  00C2               	movwf	_currentCommand+12
  2663                           
  2664                           ;motorMain.c: 323:     currentCommand.receiveLimit = 26;
  2665     0413  301A               	movlw	26
  2666     0414  00BF               	movwf	_currentCommand+9
  2667     0415  3000               	movlw	0
  2668     0416  00C0               	movwf	_currentCommand+10
  2669     0417                     l1128:
  2670                           
  2671                           ;motorMain.c: 324:     currentCommand.receiveIt = 0;
  2672     0417  01BD               	clrf	_currentCommand+7
  2673     0418  01BE               	clrf	_currentCommand+8
  2674     0419                     l1130:
  2675                           
  2676                           ;motorMain.c: 325:     currentCommand.sendId = CONTROL_OUTPUT;
  2677     0419  3001               	movlw	1
  2678     041A  00BA               	movwf	_currentCommand+4
  2679     041B  3000               	movlw	0
  2680     041C  00BB               	movwf	_currentCommand+5
  2681     041D                     l1132:
  2682                           
  2683                           ;motorMain.c: 326:     currentCommand.toSend = (unsigned char*) GetUserDataCommand;
  2684     041D  3062               	movlw	(low (_GetUserDataCommand| 0))& (0+255)
  2685     041E  00BC               	movwf	low ((_currentCommand| 0+6))
  2686     041F                     l1134:
  2687                           
  2688                           ;motorMain.c: 327:     currentCommand.sendIt = 0;
  2689     041F  01B8               	clrf	_currentCommand+2
  2690     0420  01B9               	clrf	_currentCommand+3
  2691                           
  2692                           ;motorMain.c: 328:     currentCommand.sendLimit = 6;
  2693     0421  3006               	movlw	6
  2694     0422  00B6               	movwf	_currentCommand
  2695     0423  3000               	movlw	0
  2696     0424  00B7               	movwf	_currentCommand+1
  2697     0425                     l1136:
  2698                           
  2699                           ;motorMain.c: 329:     currentCommand.done = 0;
  2700     0425  01C3               	clrf	_currentCommand+13
  2701     0426                     l1138:
  2702                           
  2703                           ;motorMain.c: 330:     PIE3bits.TXIE = 1;
  2704     0426  002E               	movlb	14	; select bank14
  2705     0427  1619               	bsf	25,4	;volatile
  2706     0428                     l174:
  2707     0428  0008               	return
  2708     0429                     __end_of_CreateControlsCommand:
  2709                           
  2710                           	psect	text7
  2711     0444                     __ptext7:	
  2712 ;; *************** function _CreateBreak *****************
  2713 ;; Defined at:
  2714 ;;		line 308 in file "motorMain.c"
  2715 ;; Parameters:    Size  Location     Type
  2716 ;;		None
  2717 ;; Auto vars:     Size  Location     Type
  2718 ;;		None
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  1    wreg      void 
  2721 ;; Registers used:
  2722 ;;		wreg, status,2
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2732 ;;Total ram usage:        0 bytes
  2733 ;; Hardware stack levels used: 1
  2734 ;; Hardware stack levels required when called: 2
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_drive
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741                           
  2742     0444                     _CreateBreak:	
  2743                           ;psect for function _CreateBreak
  2744                           
  2745     0444                     l1196:	
  2746                           ;incstack = 0
  2747                           ; Regs used in _CreateBreak: [wreg+status,2]
  2748                           
  2749                           
  2750                           ;motorMain.c: 309:     currentCommand.sendId = 7;
  2751     0444  3007               	movlw	7
  2752     0445  0020               	movlb	0	; select bank0
  2753     0446  00BA               	movwf	_currentCommand+4
  2754     0447  3000               	movlw	0
  2755     0448  00BB               	movwf	_currentCommand+5
  2756     0449                     l1198:
  2757                           
  2758                           ;motorMain.c: 310:     currentCommand.sendIt = 0;
  2759     0449  01B8               	clrf	_currentCommand+2
  2760     044A  01B9               	clrf	_currentCommand+3
  2761     044B                     l1200:
  2762                           
  2763                           ;motorMain.c: 311:     currentCommand.sendLimit = 10;
  2764     044B  300A               	movlw	10
  2765     044C  00B6               	movwf	_currentCommand
  2766     044D  3000               	movlw	0
  2767     044E  00B7               	movwf	_currentCommand+1
  2768                           
  2769                           ;motorMain.c: 312:     currentCommand.receiveId = 0;
  2770     044F  01C1               	clrf	_currentCommand+11
  2771     0450  01C2               	clrf	_currentCommand+12
  2772                           
  2773                           ;motorMain.c: 313:     currentCommand.receiveLimit = 0;
  2774     0451  01BF               	clrf	_currentCommand+9
  2775     0452  01C0               	clrf	_currentCommand+10
  2776                           
  2777                           ;motorMain.c: 314:     currentCommand.receiveIt = 0;
  2778     0453  01BD               	clrf	_currentCommand+7
  2779     0454  01BE               	clrf	_currentCommand+8
  2780                           
  2781                           ;motorMain.c: 315:     currentCommand.done = 0;
  2782     0455  01C3               	clrf	_currentCommand+13
  2783     0456                     l1202:
  2784                           
  2785                           ;motorMain.c: 317:     currentCommand.toSend = Break;
  2786     0456  30A7               	movlw	(low (_Break| 0))& (0+255)
  2787     0457  00BC               	movwf	low ((_currentCommand| 0+6))
  2788     0458                     l1204:
  2789                           
  2790                           ;motorMain.c: 318:     PIE3bits.TXIE = 1;
  2791     0458  002E               	movlb	14	; select bank14
  2792     0459  1619               	bsf	25,4	;volatile
  2793     045A                     l171:
  2794     045A  0008               	return
  2795     045B                     __end_of_CreateBreak:
  2796                           
  2797                           	psect	text8
  2798     046B                     __ptext8:	
  2799 ;; *************** function _SetUpPumpArm *****************
  2800 ;; Defined at:
  2801 ;;		line 335 in file "motorMain.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;                  1    wreg      void 
  2808 ;; Registers used:
  2809 ;;		None
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2819 ;;Total ram usage:        0 bytes
  2820 ;; Hardware stack levels used: 1
  2821 ;; Hardware stack levels required when called: 2
  2822 ;; This function calls:
  2823 ;;		Nothing
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829     046B                     _SetUpPumpArm:	
  2830                           ;psect for function _SetUpPumpArm
  2831                           
  2832     046B                     l1206:	
  2833                           ;incstack = 0
  2834                           ; Regs used in _SetUpPumpArm: []
  2835                           
  2836                           
  2837                           ;motorMain.c: 336:     TRISBbits.TRISB0 = 0;
  2838     046B  0020               	movlb	0	; select bank0
  2839     046C  1012               	bcf	18,0	;volatile
  2840                           
  2841                           ;motorMain.c: 337:     TRISBbits.TRISB1 = 0;
  2842     046D  1092               	bcf	18,1	;volatile
  2843                           
  2844                           ;motorMain.c: 338:     ANSELBbits.ANSB0 = 0;
  2845     046E  003E               	movlb	30	; select bank30
  2846     046F  1043               	bcf	67,0	;volatile
  2847                           
  2848                           ;motorMain.c: 339:     ANSELBbits.ANSB1 = 0;
  2849     0470  10C3               	bcf	67,1	;volatile
  2850                           
  2851                           ;motorMain.c: 341:     LATBbits.LATB0 = 0;
  2852     0471  0020               	movlb	0	; select bank0
  2853     0472  1017               	bcf	23,0	;volatile
  2854                           
  2855                           ;motorMain.c: 342:     LATBbits.LATB1 = 0;
  2856     0473  1097               	bcf	23,1	;volatile
  2857     0474                     l177:
  2858     0474  0008               	return
  2859     0475                     __end_of_SetUpPumpArm:
  2860                           
  2861                           	psect	text9
  2862     0475                     __ptext9:	
  2863 ;; *************** function _SetUpPump *****************
  2864 ;; Defined at:
  2865 ;;		line 346 in file "motorMain.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		None
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used: 1
  2885 ;; Hardware stack levels required when called: 2
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_main
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893     0475                     _SetUpPump:	
  2894                           ;psect for function _SetUpPump
  2895                           
  2896     0475                     l1208:	
  2897                           ;incstack = 0
  2898                           ; Regs used in _SetUpPump: []
  2899                           
  2900                           
  2901                           ;motorMain.c: 347:     TRISBbits.TRISB2 = 0;
  2902     0475  0020               	movlb	0	; select bank0
  2903     0476  1112               	bcf	18,2	;volatile
  2904                           
  2905                           ;motorMain.c: 348:     TRISBbits.TRISB3 = 0;
  2906     0477  1192               	bcf	18,3	;volatile
  2907                           
  2908                           ;motorMain.c: 349:     ANSELBbits.ANSB2 = 0;
  2909     0478  003E               	movlb	30	; select bank30
  2910     0479  1143               	bcf	67,2	;volatile
  2911                           
  2912                           ;motorMain.c: 350:     ANSELBbits.ANSB3 = 0;
  2913     047A  11C3               	bcf	67,3	;volatile
  2914                           
  2915                           ;motorMain.c: 352:     LATBbits.LATB2 = 0;
  2916     047B  0020               	movlb	0	; select bank0
  2917     047C  1117               	bcf	23,2	;volatile
  2918                           
  2919                           ;motorMain.c: 353:     LATBbits.LATB3 = 0;
  2920     047D  1197               	bcf	23,3	;volatile
  2921     047E                     l180:
  2922     047E  0008               	return
  2923     047F                     __end_of_SetUpPump:
  2924                           
  2925                           	psect	text10
  2926     0429                     __ptext10:	
  2927 ;; *************** function _MovePumpArm *****************
  2928 ;; Defined at:
  2929 ;;		line 356 in file "motorMain.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;  switchValue     2    0[BANK0 ] int 
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;		None
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, status,2, status,0
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2943 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2946 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2947 ;;Total ram usage:        2 bytes
  2948 ;; Hardware stack levels used: 1
  2949 ;; Hardware stack levels required when called: 2
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_main
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957     0429                     _MovePumpArm:	
  2958                           ;psect for function _MovePumpArm
  2959                           
  2960     0429                     l1210:	
  2961                           ;incstack = 0
  2962                           ; Regs used in _MovePumpArm: [wreg+status,2+status,0]
  2963                           
  2964                           
  2965                           ;motorMain.c: 357:     LATBbits.LATB0 = 0;
  2966     0429  0020               	movlb	0	; select bank0
  2967     042A  1017               	bcf	23,0	;volatile
  2968                           
  2969                           ;motorMain.c: 358:     LATBbits.LATB1 = 0;
  2970     042B  1097               	bcf	23,1	;volatile
  2971     042C                     l1212:
  2972                           
  2973                           ;motorMain.c: 359:     if(switchValue == SWITCH_MIN){
  2974     042C  30E8               	movlw	232
  2975     042D  0668               	xorwf	MovePumpArm@switchValue,w
  2976     042E  3003               	movlw	3
  2977     042F  1903               	skipnz
  2978     0430  0669               	xorwf	MovePumpArm@switchValue+1,w
  2979     0431  1D03               	btfss	3,2
  2980     0432  2C34               	goto	u331
  2981     0433  2C35               	goto	u330
  2982     0434                     u331:
  2983     0434  2C38               	goto	l1216
  2984     0435                     u330:
  2985     0435                     l1214:
  2986                           
  2987                           ;motorMain.c: 360:             LATBbits.LATB0 = 1;
  2988     0435  1417               	bsf	23,0	;volatile
  2989                           
  2990                           ;motorMain.c: 361:             LATBbits.LATB1 = 0;
  2991     0436  1097               	bcf	23,1	;volatile
  2992                           
  2993                           ;motorMain.c: 362:     }
  2994     0437  2C43               	goto	l186
  2995     0438                     l1216:
  2996     0438  30D0               	movlw	208
  2997     0439  0668               	xorwf	MovePumpArm@switchValue,w
  2998     043A  3007               	movlw	7
  2999     043B  1903               	skipnz
  3000     043C  0669               	xorwf	MovePumpArm@switchValue+1,w
  3001     043D  1D03               	btfss	3,2
  3002     043E  2C40               	goto	u341
  3003     043F  2C41               	goto	u340
  3004     0440                     u341:
  3005     0440  2C43               	goto	l186
  3006     0441                     u340:
  3007     0441                     l1218:
  3008                           
  3009                           ;motorMain.c: 364:             LATBbits.LATB0 = 0;
  3010     0441  1017               	bcf	23,0	;volatile
  3011                           
  3012                           ;motorMain.c: 365:             LATBbits.LATB1 = 1;
  3013     0442  1497               	bsf	23,1	;volatile
  3014     0443                     l186:
  3015     0443  0008               	return
  3016     0444                     __end_of_MovePumpArm:
  3017                           
  3018                           	psect	text11
  3019     045B                     __ptext11:	
  3020 ;; *************** function _ActivatePump *****************
  3021 ;; Defined at:
  3022 ;;		line 369 in file "motorMain.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  switchValue     2    0[BANK0 ] int 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3036 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3040 ;;Total ram usage:        2 bytes
  3041 ;; Hardware stack levels used: 1
  3042 ;; Hardware stack levels required when called: 2
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_main
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050     045B                     _ActivatePump:	
  3051                           ;psect for function _ActivatePump
  3052                           
  3053     045B                     l1220:	
  3054                           ;incstack = 0
  3055                           ; Regs used in _ActivatePump: [wreg]
  3056                           
  3057                           
  3058                           ;motorMain.c: 370:     if(switchValue <= SWITCH_MIN){
  3059     045B  3003               	movlw	3
  3060     045C  0020               	movlb	0	; select bank0
  3061     045D  0269               	subwf	ActivatePump@switchValue+1,w
  3062     045E  30E9               	movlw	233
  3063     045F  1903               	skipnz
  3064     0460  0268               	subwf	ActivatePump@switchValue,w
  3065     0461  1803               	skipnc
  3066     0462  2C64               	goto	u351
  3067     0463  2C65               	goto	u350
  3068     0464                     u351:
  3069     0464  2C68               	goto	l189
  3070     0465                     u350:
  3071     0465                     l1222:
  3072                           
  3073                           ;motorMain.c: 371:         LATBbits.LATB2 = 1;
  3074     0465  1517               	bsf	23,2	;volatile
  3075                           
  3076                           ;motorMain.c: 372:         LATBbits.LATB3 = 0;
  3077     0466  1197               	bcf	23,3	;volatile
  3078                           
  3079                           ;motorMain.c: 373:     }
  3080     0467  2C6A               	goto	l191
  3081     0468                     l189:	
  3082                           ;motorMain.c: 374:     else{
  3083                           
  3084                           
  3085                           ;motorMain.c: 375:         LATBbits.LATB2 = 0;
  3086     0468  1117               	bcf	23,2	;volatile
  3087                           
  3088                           ;motorMain.c: 376:         LATBbits.LATB3 = 0;
  3089     0469  1197               	bcf	23,3	;volatile
  3090     046A                     l191:
  3091     046A  0008               	return
  3092     046B                     __end_of_ActivatePump:
  3093                           
  3094                           	psect	intentry
  3095     0004                     __pintentry:	
  3096 ;; *************** function _myFunction *****************
  3097 ;; Defined at:
  3098 ;;		line 379 in file "motorMain.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  input           2    7[COMMON] int 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3114 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3115 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3116 ;;Total ram usage:        4 bytes
  3117 ;; Hardware stack levels used: 1
  3118 ;; Hardware stack levels required when called: 1
  3119 ;; This function calls:
  3120 ;;		_GetControllerInput
  3121 ;; This function is called by:
  3122 ;;		Interrupt level 1
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126     0004                     _myFunction:
  3127                           
  3128                           ;incstack = 0
  3129     0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  3130                           
  3131                           ; Regs used in _myFunction: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3132     0005  3180               	pagesel	$
  3133     0006                     i1l1386:
  3134                           
  3135                           ;motorMain.c: 380:     if(PIR3bits.RCIF == 1){
  3136     0006  002E               	movlb	14	; select bank14
  3137     0007  1E8F               	btfss	15,5	;volatile
  3138     0008  280A               	goto	u59_21
  3139     0009  280B               	goto	u59_20
  3140     000A                     u59_21:
  3141     000A  2841               	goto	i1l196
  3142     000B                     u59_20:
  3143     000B                     i1l1388:
  3144                           
  3145                           ;motorMain.c: 381:         int input = RCREG;
  3146     000B  0022               	movlb	2	; select bank2
  3147     000C  0819               	movf	25,w	;volatile
  3148     000D  00F5               	movwf	??_myFunction
  3149     000E  01F6               	clrf	??_myFunction+1
  3150     000F  0875               	movf	??_myFunction,w
  3151     0010  00F7               	movwf	myFunction@input
  3152     0011  0876               	movf	??_myFunction+1,w
  3153     0012  00F8               	movwf	myFunction@input+1
  3154     0013                     i1l1390:
  3155                           
  3156                           ;motorMain.c: 382:         if(currentCommand.receiveId == CONTROL_INPUT){
  3157     0013  0020               	movlb	0	; select bank0
  3158     0014  0341               	decf	_currentCommand+11,w
  3159     0015  0442               	iorwf	_currentCommand+12,w
  3160     0016  1D03               	btfss	3,2
  3161     0017  2819               	goto	u60_21
  3162     0018  281A               	goto	u60_20
  3163     0019                     u60_21:
  3164     0019  2828               	goto	i1l1396
  3165     001A                     u60_20:
  3166     001A                     i1l1392:
  3167                           
  3168                           ;motorMain.c: 383:             GetControllerInput(input);
  3169     001A  0878               	movf	myFunction@input+1,w
  3170     001B  00F1               	movwf	GetControllerInput@input+1
  3171     001C  0877               	movf	myFunction@input,w
  3172     001D  00F0               	movwf	GetControllerInput@input
  3173     001E  3181  21C1  3180   	fcall	_GetControllerInput
  3174     0021                     i1l1394:
  3175                           
  3176                           ;motorMain.c: 384:             currentCommand.receiveIt = currentCommand.receiveIt + 1;
  3177     0021  0020               	movlb	0	; select bank0
  3178     0022  083D               	movf	_currentCommand+7,w
  3179     0023  3E01               	addlw	1
  3180     0024  00BD               	movwf	_currentCommand+7
  3181     0025  3000               	movlw	0
  3182     0026  3D3E               	addwfc	_currentCommand+8,w
  3183     0027  00BE               	movwf	_currentCommand+8
  3184     0028                     i1l1396:
  3185                           
  3186                           ;motorMain.c: 386:         if(currentCommand.receiveIt >= currentCommand.receiveLimit){
  3187     0028  083E               	movf	_currentCommand+8,w
  3188     0029  3A80               	xorlw	128
  3189     002A  00F5               	movwf	??_myFunction
  3190     002B  0840               	movf	_currentCommand+10,w
  3191     002C  3A80               	xorlw	128
  3192     002D  0275               	subwf	??_myFunction,w
  3193     002E  1D03               	skipz
  3194     002F  2832               	goto	u61_25
  3195     0030  083F               	movf	_currentCommand+9,w
  3196     0031  023D               	subwf	_currentCommand+7,w
  3197     0032                     u61_25:
  3198     0032  1C03               	skipc
  3199     0033  2835               	goto	u61_21
  3200     0034  2836               	goto	u61_20
  3201     0035                     u61_21:
  3202     0035  2839               	goto	i1l1400
  3203     0036                     u61_20:
  3204     0036                     i1l1398:
  3205                           
  3206                           ;motorMain.c: 387:             currentCommand.done = 1;
  3207     0036  0020               	movlb	0	; select bank0
  3208     0037  01C3               	clrf	_currentCommand+13
  3209     0038  0AC3               	incf	_currentCommand+13,f
  3210     0039                     i1l1400:
  3211                           
  3212                           ;motorMain.c: 389:         inputStage++;
  3213     0039  3001               	movlw	1
  3214     003A  0020               	movlb	0	; select bank0
  3215     003B  07C6               	addwf	_inputStage,f
  3216     003C  3000               	movlw	0
  3217     003D  3DC7               	addwfc	_inputStage+1,f
  3218     003E                     i1l1402:
  3219                           
  3220                           ;motorMain.c: 390:         PIR3bits.RCIF =0;
  3221     003E  002E               	movlb	14	; select bank14
  3222     003F  128F               	bcf	15,5	;volatile
  3223                           
  3224                           ;motorMain.c: 391:     }
  3225     0040  287B               	goto	i1l204
  3226     0041                     i1l196:	
  3227                           ;motorMain.c: 392:     else if(PIR3bits.TXIF == 1){
  3228                           
  3229     0041  1E0F               	btfss	15,4	;volatile
  3230     0042  2844               	goto	u62_21
  3231     0043  2845               	goto	u62_20
  3232     0044                     u62_21:
  3233     0044  287B               	goto	i1l204
  3234     0045                     u62_20:
  3235     0045                     i1l1404:
  3236                           
  3237                           ;motorMain.c: 393:         if(currentCommand.sendIt >= currentCommand.sendLimit){
  3238     0045  0020               	movlb	0	; select bank0
  3239     0046  0839               	movf	_currentCommand+3,w
  3240     0047  3A80               	xorlw	128
  3241     0048  00F5               	movwf	??_myFunction
  3242     0049  0837               	movf	_currentCommand+1,w
  3243     004A  3A80               	xorlw	128
  3244     004B  0275               	subwf	??_myFunction,w
  3245     004C  1D03               	skipz
  3246     004D  2850               	goto	u63_25
  3247     004E  0836               	movf	_currentCommand,w
  3248     004F  0238               	subwf	_currentCommand+2,w
  3249     0050                     u63_25:
  3250     0050  1C03               	skipc
  3251     0051  2853               	goto	u63_21
  3252     0052  2854               	goto	u63_20
  3253     0053                     u63_21:
  3254     0053  2868               	goto	i1l1412
  3255     0054                     u63_20:
  3256     0054                     i1l1406:
  3257                           
  3258                           ;motorMain.c: 394:             PIE3bits.TXIE = 0;
  3259     0054  002E               	movlb	14	; select bank14
  3260     0055  1219               	bcf	25,4	;volatile
  3261     0056                     i1l1408:
  3262                           
  3263                           ;motorMain.c: 395:             if(currentCommand.receiveLimit <= 0){
  3264     0056  0020               	movlb	0	; select bank0
  3265     0057  0840               	movf	_currentCommand+10,w
  3266     0058  3A80               	xorlw	128
  3267     0059  00F5               	movwf	??_myFunction
  3268     005A  3080               	movlw	128
  3269     005B  0275               	subwf	??_myFunction,w
  3270     005C  1D03               	skipz
  3271     005D  2860               	goto	u64_25
  3272     005E  3001               	movlw	1
  3273     005F  023F               	subwf	_currentCommand+9,w
  3274     0060                     u64_25:
  3275     0060  1803               	skipnc
  3276     0061  2863               	goto	u64_21
  3277     0062  2864               	goto	u64_20
  3278     0063                     u64_21:
  3279     0063  2879               	goto	i1l1416
  3280     0064                     u64_20:
  3281     0064                     i1l1410:
  3282                           
  3283                           ;motorMain.c: 396:                 currentCommand.done = 1;
  3284     0064  0020               	movlb	0	; select bank0
  3285     0065  01C3               	clrf	_currentCommand+13
  3286     0066  0AC3               	incf	_currentCommand+13,f
  3287     0067  2879               	goto	i1l1416
  3288     0068                     i1l1412:
  3289                           
  3290                           ;motorMain.c: 400:             TX1REGbits.TX1REG = currentCommand.toSend[currentCommand.
      +                          sendIt];
  3291     0068  0020               	movlb	0	; select bank0
  3292     0069  0838               	movf	_currentCommand+2,w
  3293     006A  073C               	addwf	low ((_currentCommand| 0+6)),w
  3294     006B  00F5               	movwf	??_myFunction
  3295     006C  0875               	movf	??_myFunction,w
  3296     006D  0086               	movwf	6
  3297     006E  0187               	clrf	7
  3298     006F  0801               	movf	1,w
  3299     0070  0022               	movlb	2	; select bank2
  3300     0071  009A               	movwf	26	;volatile
  3301     0072                     i1l1414:
  3302                           
  3303                           ;motorMain.c: 401:             currentCommand.sendIt = currentCommand.sendIt + 1;
  3304     0072  0020               	movlb	0	; select bank0
  3305     0073  0838               	movf	_currentCommand+2,w
  3306     0074  3E01               	addlw	1
  3307     0075  00B8               	movwf	_currentCommand+2
  3308     0076  3000               	movlw	0
  3309     0077  3D39               	addwfc	_currentCommand+3,w
  3310     0078  00B9               	movwf	_currentCommand+3
  3311     0079                     i1l1416:
  3312                           
  3313                           ;motorMain.c: 403:         PIR3bits.TXIF = 0;
  3314     0079  002E               	movlb	14	; select bank14
  3315     007A  120F               	bcf	15,4	;volatile
  3316     007B                     i1l204:
  3317     007B  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3318     007C  0009               	retfie
  3319     007D                     __end_of_myFunction:
  3320                           
  3321                           	psect	text13
  3322     01C1                     __ptext13:	
  3323 ;; *************** function _GetControllerInput *****************
  3324 ;; Defined at:
  3325 ;;		line 200 in file "motorMain.c"
  3326 ;; Parameters:    Size  Location     Type
  3327 ;;  input           2    0[COMMON] int 
  3328 ;; Auto vars:     Size  Location     Type
  3329 ;;		None
  3330 ;; Return value:  Size  Location     Type
  3331 ;;                  1    wreg      void 
  3332 ;; Registers used:
  3333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3334 ;; Tracked objects:
  3335 ;;		On entry : 0/0
  3336 ;;		On exit  : 0/0
  3337 ;;		Unchanged: 0/0
  3338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3339 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3341 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3342 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3343 ;;Total ram usage:        5 bytes
  3344 ;; Hardware stack levels used: 1
  3345 ;; This function calls:
  3346 ;;		Nothing
  3347 ;; This function is called by:
  3348 ;;		_myFunction
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352     01C1                     _GetControllerInput:	
  3353                           ;psect for function _GetControllerInput
  3354                           
  3355     01C1                     i1l1268:	
  3356                           ;incstack = 0
  3357                           ; Regs used in _GetControllerInput: [wreg-fsr1h+status,2+status,0]
  3358                           
  3359                           
  3360                           ;motorMain.c: 201:     if(currentCommand.receiveIt <0 ){
  3361     01C1  3007               	movlw	7
  3362     01C2  3E36               	addlw	(low (_currentCommand| 0))& (0+255)
  3363     01C3  0086               	movwf	6
  3364     01C4  0187               	clrf	7
  3365     01C5  3141               	addfsr 1,1
  3366     01C6  1F81               	btfss	1,7
  3367     01C7  29C9               	goto	u52_21
  3368     01C8  29CA               	goto	u52_20
  3369     01C9                     u52_21:
  3370     01C9  2A86               	goto	i1l1316
  3371     01CA                     u52_20:
  3372     01CA  2ACA               	goto	i1l121
  3373     01CB                     i1l1272:
  3374     01CB  0871               	movf	GetControllerInput@input+1,w
  3375     01CC  00B5               	movwf	_controls+21
  3376     01CD  0870               	movf	GetControllerInput@input,w
  3377     01CE  00B4               	movwf	_controls+20
  3378     01CF  2ACA               	goto	i1l121
  3379     01D0                     i1l1274:
  3380     01D0  3014               	movlw	20
  3381     01D1  3E20               	addlw	(low (_controls| 0))& (0+255)
  3382     01D2  0086               	movwf	6
  3383     01D3  0187               	clrf	7
  3384     01D4  0871               	movf	GetControllerInput@input+1,w
  3385     01D5  00F3               	movwf	??_GetControllerInput+1
  3386     01D6  0870               	movf	GetControllerInput@input,w
  3387     01D7  00F2               	movwf	??_GetControllerInput
  3388     01D8  0872               	movf	??_GetControllerInput,w
  3389     01D9  00F3               	movwf	??_GetControllerInput+1
  3390     01DA  01F2               	clrf	??_GetControllerInput
  3391     01DB  3F40               	moviw [0]fsr1
  3392     01DC  0772               	addwf	??_GetControllerInput,w
  3393     01DD  00A0               	movwf	_controls
  3394     01DE  3F41               	moviw [1]fsr1
  3395     01DF  3D73               	addwfc	??_GetControllerInput+1,w
  3396     01E0  00A1               	movwf	_controls+1
  3397     01E1  2ACA               	goto	i1l121
  3398     01E2                     i1l1278:
  3399     01E2  3014               	movlw	20
  3400     01E3  3E20               	addlw	(low (_controls| 0))& (0+255)
  3401     01E4  0086               	movwf	6
  3402     01E5  0187               	clrf	7
  3403     01E6  0871               	movf	GetControllerInput@input+1,w
  3404     01E7  00F3               	movwf	??_GetControllerInput+1
  3405     01E8  0870               	movf	GetControllerInput@input,w
  3406     01E9  00F2               	movwf	??_GetControllerInput
  3407     01EA  0872               	movf	??_GetControllerInput,w
  3408     01EB  00F3               	movwf	??_GetControllerInput+1
  3409     01EC  01F2               	clrf	??_GetControllerInput
  3410     01ED  3F40               	moviw [0]fsr1
  3411     01EE  0772               	addwf	??_GetControllerInput,w
  3412     01EF  00A2               	movwf	_controls+2
  3413     01F0  3F41               	moviw [1]fsr1
  3414     01F1  3D73               	addwfc	??_GetControllerInput+1,w
  3415     01F2  00A3               	movwf	_controls+3
  3416     01F3  2ACA               	goto	i1l121
  3417     01F4                     i1l1282:
  3418     01F4  3014               	movlw	20
  3419     01F5  3E20               	addlw	(low (_controls| 0))& (0+255)
  3420     01F6  0086               	movwf	6
  3421     01F7  0187               	clrf	7
  3422     01F8  0871               	movf	GetControllerInput@input+1,w
  3423     01F9  00F3               	movwf	??_GetControllerInput+1
  3424     01FA  0870               	movf	GetControllerInput@input,w
  3425     01FB  00F2               	movwf	??_GetControllerInput
  3426     01FC  0872               	movf	??_GetControllerInput,w
  3427     01FD  00F3               	movwf	??_GetControllerInput+1
  3428     01FE  01F2               	clrf	??_GetControllerInput
  3429     01FF  3F40               	moviw [0]fsr1
  3430     0200  0772               	addwf	??_GetControllerInput,w
  3431     0201  00A4               	movwf	_controls+4
  3432     0202  3F41               	moviw [1]fsr1
  3433     0203  3D73               	addwfc	??_GetControllerInput+1,w
  3434     0204  00A5               	movwf	_controls+5
  3435     0205  2ACA               	goto	i1l121
  3436     0206                     i1l1286:
  3437     0206  3014               	movlw	20
  3438     0207  3E20               	addlw	(low (_controls| 0))& (0+255)
  3439     0208  0086               	movwf	6
  3440     0209  0187               	clrf	7
  3441     020A  0871               	movf	GetControllerInput@input+1,w
  3442     020B  00F3               	movwf	??_GetControllerInput+1
  3443     020C  0870               	movf	GetControllerInput@input,w
  3444     020D  00F2               	movwf	??_GetControllerInput
  3445     020E  0872               	movf	??_GetControllerInput,w
  3446     020F  00F3               	movwf	??_GetControllerInput+1
  3447     0210  01F2               	clrf	??_GetControllerInput
  3448     0211  3F40               	moviw [0]fsr1
  3449     0212  0772               	addwf	??_GetControllerInput,w
  3450     0213  00A6               	movwf	_controls+6
  3451     0214  3F41               	moviw [1]fsr1
  3452     0215  3D73               	addwfc	??_GetControllerInput+1,w
  3453     0216  00A7               	movwf	_controls+7
  3454     0217  2ACA               	goto	i1l121
  3455     0218                     i1l1290:
  3456     0218  3014               	movlw	20
  3457     0219  3E20               	addlw	(low (_controls| 0))& (0+255)
  3458     021A  0086               	movwf	6
  3459     021B  0187               	clrf	7
  3460     021C  0871               	movf	GetControllerInput@input+1,w
  3461     021D  00F3               	movwf	??_GetControllerInput+1
  3462     021E  0870               	movf	GetControllerInput@input,w
  3463     021F  00F2               	movwf	??_GetControllerInput
  3464     0220  0872               	movf	??_GetControllerInput,w
  3465     0221  00F3               	movwf	??_GetControllerInput+1
  3466     0222  01F2               	clrf	??_GetControllerInput
  3467     0223  3F40               	moviw [0]fsr1
  3468     0224  0772               	addwf	??_GetControllerInput,w
  3469     0225  00A8               	movwf	_controls+8
  3470     0226  3F41               	moviw [1]fsr1
  3471     0227  3D73               	addwfc	??_GetControllerInput+1,w
  3472     0228  00A9               	movwf	_controls+9
  3473     0229  2ACA               	goto	i1l121
  3474     022A                     i1l1294:
  3475     022A  3014               	movlw	20
  3476     022B  3E20               	addlw	(low (_controls| 0))& (0+255)
  3477     022C  0086               	movwf	6
  3478     022D  0187               	clrf	7
  3479     022E  0871               	movf	GetControllerInput@input+1,w
  3480     022F  00F3               	movwf	??_GetControllerInput+1
  3481     0230  0870               	movf	GetControllerInput@input,w
  3482     0231  00F2               	movwf	??_GetControllerInput
  3483     0232  0872               	movf	??_GetControllerInput,w
  3484     0233  00F3               	movwf	??_GetControllerInput+1
  3485     0234  01F2               	clrf	??_GetControllerInput
  3486     0235  3F40               	moviw [0]fsr1
  3487     0236  0772               	addwf	??_GetControllerInput,w
  3488     0237  00AA               	movwf	_controls+10
  3489     0238  3F41               	moviw [1]fsr1
  3490     0239  3D73               	addwfc	??_GetControllerInput+1,w
  3491     023A  00AB               	movwf	_controls+11
  3492     023B  2ACA               	goto	i1l121
  3493     023C                     i1l1298:
  3494     023C  3014               	movlw	20
  3495     023D  3E20               	addlw	(low (_controls| 0))& (0+255)
  3496     023E  0086               	movwf	6
  3497     023F  0187               	clrf	7
  3498     0240  0871               	movf	GetControllerInput@input+1,w
  3499     0241  00F3               	movwf	??_GetControllerInput+1
  3500     0242  0870               	movf	GetControllerInput@input,w
  3501     0243  00F2               	movwf	??_GetControllerInput
  3502     0244  0872               	movf	??_GetControllerInput,w
  3503     0245  00F3               	movwf	??_GetControllerInput+1
  3504     0246  01F2               	clrf	??_GetControllerInput
  3505     0247  3F40               	moviw [0]fsr1
  3506     0248  0772               	addwf	??_GetControllerInput,w
  3507     0249  00AC               	movwf	_controls+12
  3508     024A  3F41               	moviw [1]fsr1
  3509     024B  3D73               	addwfc	??_GetControllerInput+1,w
  3510     024C  00AD               	movwf	_controls+13
  3511     024D  2ACA               	goto	i1l121
  3512     024E                     i1l1302:
  3513     024E  3014               	movlw	20
  3514     024F  3E20               	addlw	(low (_controls| 0))& (0+255)
  3515     0250  0086               	movwf	6
  3516     0251  0187               	clrf	7
  3517     0252  0871               	movf	GetControllerInput@input+1,w
  3518     0253  00F3               	movwf	??_GetControllerInput+1
  3519     0254  0870               	movf	GetControllerInput@input,w
  3520     0255  00F2               	movwf	??_GetControllerInput
  3521     0256  0872               	movf	??_GetControllerInput,w
  3522     0257  00F3               	movwf	??_GetControllerInput+1
  3523     0258  01F2               	clrf	??_GetControllerInput
  3524     0259  3F40               	moviw [0]fsr1
  3525     025A  0772               	addwf	??_GetControllerInput,w
  3526     025B  00AE               	movwf	_controls+14
  3527     025C  3F41               	moviw [1]fsr1
  3528     025D  3D73               	addwfc	??_GetControllerInput+1,w
  3529     025E  00AF               	movwf	_controls+15
  3530     025F  2ACA               	goto	i1l121
  3531     0260                     i1l1306:
  3532     0260  3014               	movlw	20
  3533     0261  3E20               	addlw	(low (_controls| 0))& (0+255)
  3534     0262  0086               	movwf	6
  3535     0263  0187               	clrf	7
  3536     0264  0871               	movf	GetControllerInput@input+1,w
  3537     0265  00F3               	movwf	??_GetControllerInput+1
  3538     0266  0870               	movf	GetControllerInput@input,w
  3539     0267  00F2               	movwf	??_GetControllerInput
  3540     0268  0872               	movf	??_GetControllerInput,w
  3541     0269  00F3               	movwf	??_GetControllerInput+1
  3542     026A  01F2               	clrf	??_GetControllerInput
  3543     026B  3F40               	moviw [0]fsr1
  3544     026C  0772               	addwf	??_GetControllerInput,w
  3545     026D  00B0               	movwf	_controls+16
  3546     026E  3F41               	moviw [1]fsr1
  3547     026F  3D73               	addwfc	??_GetControllerInput+1,w
  3548     0270  00B1               	movwf	_controls+17
  3549     0271  2ACA               	goto	i1l121
  3550     0272                     i1l1310:
  3551     0272  3014               	movlw	20
  3552     0273  3E20               	addlw	(low (_controls| 0))& (0+255)
  3553     0274  0086               	movwf	6
  3554     0275  0187               	clrf	7
  3555     0276  0871               	movf	GetControllerInput@input+1,w
  3556     0277  00F3               	movwf	??_GetControllerInput+1
  3557     0278  0870               	movf	GetControllerInput@input,w
  3558     0279  00F2               	movwf	??_GetControllerInput
  3559     027A  0872               	movf	??_GetControllerInput,w
  3560     027B  00F3               	movwf	??_GetControllerInput+1
  3561     027C  01F2               	clrf	??_GetControllerInput
  3562     027D  3F40               	moviw [0]fsr1
  3563     027E  0772               	addwf	??_GetControllerInput,w
  3564     027F  00B2               	movwf	_controls+18
  3565     0280  3F41               	moviw [1]fsr1
  3566     0281  3D73               	addwfc	??_GetControllerInput+1,w
  3567     0282  00B3               	movwf	_controls+19
  3568     0283                     i1l1312:
  3569     0283  01F9               	clrf	_currentInput
  3570     0284  01FA               	clrf	_currentInput+1
  3571     0285  2ACA               	goto	i1l121
  3572     0286                     i1l1316:
  3573                           
  3574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3575                           ; Switch size 1, requested type "simple"
  3576                           ; Number of cases is 1, Range of values is 0 to 0
  3577                           ; switch strategies available:
  3578                           ; Name         Instructions Cycles
  3579                           ; simple_byte            4     3 (average)
  3580                           ; direct_byte            8     6 (fixed)
  3581                           ; jumptable            260     6 (fixed)
  3582                           ;	Chosen strategy is simple_byte
  3583     0286  0020               	movlb	0	; select bank0
  3584     0287  083E               	movf	_currentCommand+8,w
  3585     0288  3A00               	xorlw	0	; case 0
  3586     0289  1903               	skipnz
  3587     028A  2A8C               	goto	i1l1438
  3588     028B  2ACA               	goto	i1l121
  3589     028C                     i1l1438:
  3590                           
  3591                           ; Switch size 1, requested type "simple"
  3592                           ; Number of cases is 20, Range of values is 6 to 25
  3593                           ; switch strategies available:
  3594                           ; Name         Instructions Cycles
  3595                           ; direct_byte           49     9 (fixed)
  3596                           ; simple_byte           61    31 (average)
  3597                           ; jumptable            263     9 (fixed)
  3598                           ;	Chosen strategy is simple_byte
  3599     028C  083D               	movf	_currentCommand+7,w
  3600     028D  3A06               	xorlw	6	; case 6
  3601     028E  1903               	skipnz
  3602     028F  29CB               	goto	i1l1272
  3603     0290  3A01               	xorlw	1	; case 7
  3604     0291  1903               	skipnz
  3605     0292  29D0               	goto	i1l1274
  3606     0293  3A0F               	xorlw	15	; case 8
  3607     0294  1903               	skipnz
  3608     0295  29CB               	goto	i1l1272
  3609     0296  3A01               	xorlw	1	; case 9
  3610     0297  1903               	skipnz
  3611     0298  29E2               	goto	i1l1278
  3612     0299  3A03               	xorlw	3	; case 10
  3613     029A  1903               	skipnz
  3614     029B  29CB               	goto	i1l1272
  3615     029C  3A01               	xorlw	1	; case 11
  3616     029D  1903               	skipnz
  3617     029E  29F4               	goto	i1l1282
  3618     029F  3A07               	xorlw	7	; case 12
  3619     02A0  1903               	skipnz
  3620     02A1  29CB               	goto	i1l1272
  3621     02A2  3A01               	xorlw	1	; case 13
  3622     02A3  1903               	skipnz
  3623     02A4  2A06               	goto	i1l1286
  3624     02A5  3A03               	xorlw	3	; case 14
  3625     02A6  1903               	skipnz
  3626     02A7  29CB               	goto	i1l1272
  3627     02A8  3A01               	xorlw	1	; case 15
  3628     02A9  1903               	skipnz
  3629     02AA  2A18               	goto	i1l1290
  3630     02AB  3A1F               	xorlw	31	; case 16
  3631     02AC  1903               	skipnz
  3632     02AD  29CB               	goto	i1l1272
  3633     02AE  3A01               	xorlw	1	; case 17
  3634     02AF  1903               	skipnz
  3635     02B0  2A2A               	goto	i1l1294
  3636     02B1  3A03               	xorlw	3	; case 18
  3637     02B2  1903               	skipnz
  3638     02B3  29CB               	goto	i1l1272
  3639     02B4  3A01               	xorlw	1	; case 19
  3640     02B5  1903               	skipnz
  3641     02B6  2A3C               	goto	i1l1298
  3642     02B7  3A07               	xorlw	7	; case 20
  3643     02B8  1903               	skipnz
  3644     02B9  29CB               	goto	i1l1272
  3645     02BA  3A01               	xorlw	1	; case 21
  3646     02BB  1903               	skipnz
  3647     02BC  2A4E               	goto	i1l1302
  3648     02BD  3A03               	xorlw	3	; case 22
  3649     02BE  1903               	skipnz
  3650     02BF  29CB               	goto	i1l1272
  3651     02C0  3A01               	xorlw	1	; case 23
  3652     02C1  1903               	skipnz
  3653     02C2  2A60               	goto	i1l1306
  3654     02C3  3A0F               	xorlw	15	; case 24
  3655     02C4  1903               	skipnz
  3656     02C5  29CB               	goto	i1l1272
  3657     02C6  3A01               	xorlw	1	; case 25
  3658     02C7  1903               	skipnz
  3659     02C8  2A72               	goto	i1l1310
  3660     02C9  2ACA               	goto	i1l121
  3661     02CA                     i1l121:
  3662     02CA  0008               	return
  3663     02CB                     __end_of_GetControllerInput:
  3664     007E                     btemp	set	126	;btemp
  3665     007E                     int$flags	set	126
  3666     007E                     wtemp0	set	126
  3667                           
  3668                           	psect	config
  3669                           
  3670                           ;Config register CONFIG1 @ 0x8007
  3671                           ;	External Oscillator mode selection bits
  3672                           ;	FEXTOSC = ECH, EC above 8MHz; PFM set to high power
  3673                           ;	Power-up default value for COSC bits
  3674                           ;	RSTOSC = HFINT32, HFINTOSC with OSCFRQ= 32 MHz and CDIV = 1:1
  3675                           ;	Clock Out Enable bit
  3676                           ;	CLKOUTEN = OFF, CLKOUT function is disabled; i/o or oscillator function on OSC2
  3677                           ;	Clock Switch Enable bit
  3678                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  3679                           ;	Fail-Safe Clock Monitor Enable bit
  3680                           ;	FCMEN = OFF, FSCM timer disabled
  3681     8007                     	org	32775
  3682     8007  1F8F               	dw	8079
  3683                           
  3684                           ;Config register CONFIG2 @ 0x8008
  3685                           ;	Master Clear Enable bit
  3686                           ;	MCLRE = ON, MCLR pin is Master Clear function
  3687                           ;	Power-up Timer Enable bit
  3688                           ;	PWRTE = OFF, PWRT disabled
  3689                           ;	Low-Power BOR enable bit
  3690                           ;	LPBOREN = OFF, ULPBOR disabled
  3691                           ;	Brown-out reset enable bits
  3692                           ;	BOREN = ON, Brown-out Reset Enabled, SBOREN bit is ignored
  3693                           ;	Brown-out Reset Voltage Selection
  3694                           ;	BORV = LO, Brown-out Reset Voltage (VBOR) set to 1.9V on LF, and 2.45V on F Devices
  3695                           ;	Zero-cross detect disable
  3696                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR.
  3697                           ;	Peripheral Pin Select one-way control
  3698                           ;	PPS1WAY = ON, The PPSLOCK bit can be cleared and set only once in software
  3699                           ;	Stack Overflow/Underflow Reset Enable bit
  3700                           ;	STVREN = ON, Stack Overflow or Underflow will cause a reset
  3701                           ;	Background Debugger
  3702                           ;	DEBUG = 0x1, unprogrammed default
  3703     8008                     	org	32776
  3704     8008  3FFF               	dw	16383
  3705                           
  3706                           ;Config register CONFIG3 @ 0x8009
  3707                           ;	WDT Period Select bits
  3708                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  3709                           ;	WDT operating mode
  3710                           ;	WDTE = OFF, WDT Disabled, SWDTEN is ignored
  3711                           ;	WDT Window Select bits
  3712                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  3713                           ;	WDT input clock selector
  3714                           ;	WDTCCS = SC, Software Control
  3715     8009                     	org	32777
  3716     8009  3F9F               	dw	16287
  3717                           
  3718                           ;Config register CONFIG4 @ 0x800A
  3719                           ;	UserNVM self-write protection bits
  3720                           ;	WRT = OFF, Write protection off
  3721                           ;	Scanner Enable bit
  3722                           ;	SCANE = available, Scanner module is available for use
  3723                           ;	Low Voltage Programming Enable bit
  3724                           ;	LVP = ON, Low Voltage programming enabled. MCLR/Vpp pin function is MCLR.
  3725     800A                     	org	32778
  3726     800A  3FFF               	dw	16383
  3727                           
  3728                           ;Config register CONFIG5 @ 0x800B
  3729                           ;	UserNVM Program memory code protection bit
  3730                           ;	CP = OFF, Program Memory code protection disabled
  3731                           ;	DataNVM code protection bit
  3732                           ;	CPD = OFF, Data EEPROM code protection disabled
  3733     800B                     	org	32779
  3734     800B  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    2
    Data        71
    BSS         78
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80      3      75
    BANK1            80      0      73
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 

    currentCommand$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 

    S34command$toSend	PTR unsigned char  size(1) Largest target is 10
		 -> Break(BANK1[10]), GetUserDataCommand(BANK0[6]), MoveBackwardCommand(BANK1[10]), MoveForwardCommand(BANK1[10]), 
		 -> TurnLeftCommand(BANK0[10]), TurnRightCommand(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myFunction in COMMON

    _myFunction->_GetControllerInput

Critical Paths under _main in BANK0

    _main->_drive
    _drive->_CreateMoveBackwardCommmand
    _drive->_CreateMoveForwardCommmand
    _drive->_CreateTurnLeftCommmand
    _drive->_CreateTurnRightCommmand

Critical Paths under _myFunction in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myFunction in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myFunction in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myFunction in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _myFunction in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _myFunction in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _myFunction in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _myFunction in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _myFunction in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _myFunction in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _myFunction in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _myFunction in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _myFunction in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     787
                       _ActivatePump
              _CreateControlsCommand
                        _MovePumpArm
                          _SetUpPump
                       _SetUpPumpArm
                              _drive
 ---------------------------------------------------------------------------------
 (1) _drive                                                3     3      0     569
                                              2 BANK0      1     1      0
                        _CreateBreak
              _CreateControlsCommand
         _CreateMoveBackwardCommmand
          _CreateMoveForwardCommmand
             _CreateTurnLeftCommmand
            _CreateTurnRightCommmand
 ---------------------------------------------------------------------------------
 (2) _CreateTurnRightCommmand                              2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateTurnLeftCommmand                               2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveForwardCommmand                            2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateMoveBackwardCommmand                           2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _CreateControlsCommand                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CreateBreak                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpPumpArm                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetUpPump                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MovePumpArm                                          2     0      2     120
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ActivatePump                                         2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myFunction                                           4     4      0     539
                                              5 COMMON     4     4      0
                 _GetControllerInput
 ---------------------------------------------------------------------------------
 (4) _GetControllerInput                                   5     3      2     516
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ActivatePump
   _CreateControlsCommand
   _MovePumpArm
   _SetUpPump
   _SetUpPumpArm
   _drive
     _CreateBreak
     _CreateControlsCommand
     _CreateMoveBackwardCommmand
     _CreateMoveForwardCommmand
     _CreateTurnLeftCommmand
     _CreateTurnRightCommmand

 _myFunction (ROOT)
   _GetControllerInput

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      3      4B       5       93.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      49       7       91.2%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      A1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      A1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Mar 28 10:29:54 2024

                               l110 032F                                 l104 030B  
                               l106 0317                                 l108 0323  
                               l162 040D                                 l171 045A  
                               l180 047E                                 l156 01C0  
                               l165 03B8                                 l174 0428  
                               l191 046A                                 l159 03F2  
                               l168 03D7                                 l177 0474  
                               l186 0443                                 l189 0468  
                               u400 0104                                 u401 0103  
                               u330 0435                                 u410 0112  
                               u331 0434                                 u411 0111  
                               u340 0441                                 u500 01AB  
                               u420 0129                                 u341 0440  
                               u501 01AA                                 u421 0128  
                               u405 0100                                 u350 0465  
                               u510 01B9                                 u430 0137  
                               u351 0464                                 u511 01B8  
                               u431 0136                                 u415 010E  
                               u440 0145                                 u360 00C3  
                               u505 01A7                                 u441 0144  
                               u425 0125                                 u361 00C2  
                               u450 015C                                 u370 00D1  
                               u530 0309                                 u515 01B5  
                               u451 015B                                 u435 0133  
                               u371 00D0                                 u531 0308  
                               u460 016A                                 u380 00DF  
                               u540 0315                                 u461 0169  
                               u445 0141                                 u381 00DE  
                               u365 00BF                                 u541 0314  
                               u470 0178                                 u390 00F6  
                               u550 0321                                 u471 0177  
                               u455 0158                                 u391 00F5  
                               u375 00CD                                 u551 0320  
                               u480 018F                                 u560 032D  
                               u481 018E                                 u465 0166  
                               u385 00DB                                 u561 032C  
                               u490 019D                                 u570 0345  
                               u491 019C                                 u475 0174  
                               u395 00F2                                 u571 0344  
                               u580 034B                                 u485 018B  
                               u581 034A                                 u495 0199  
     __end_of_CreateControlsCommand 0429                                 wreg 0009  
        ?_CreateMoveForwardCommmand 0068                        _BAUD1CONbits 011F  
                              l1200 044B                                l1210 0429  
                              l1202 0456                                l1130 0419  
                              l1220 045B                                l1212 042C  
                              l1204 0458                                l1132 041D  
                              l1140 03D8                                l1222 0465  
                              l1214 0435                                l1206 046B  
                              l1134 041F                                l1126 040E  
                              l1150 03EE                                l1142 03DD  
                              l1230 00DF                                l1216 0438  
                              l1208 0475                                l1136 0425  
                              l1128 0417                                l1160 0405  
                              l1152 03F0                                l1144 03DF  
                              l1240 011B                                l1232 00E8  
                              l1224 00B5                                l1218 0441  
                              l1138 0426                                l1170 039F  
                              l1162 0407                                l1154 03F3  
                              l1146 03EA                                l1250 015C  
                              l1242 0129                                l1234 00F6  
                              l1226 00C3                                l1330 02E1  
                              l1322 02CB                                l1180 03B6  
                              l1172 03A1                                l1164 0409  
                              l1156 03F8                                l1148 03EC  
                              l1260 019D                                l1252 016A  
                              l1244 0137                                l1236 0104  
                              l1228 00D1                                l1340 02EF  
                              l1332 02E4                                l1324 02D8  
                              l1190 03CE                                l1182 03B9  
                              l1174 03AC                                l1166 040B  
                              l1158 03FA                                l1262 01AB  
                              l1254 0178                                l1246 0145  
                              l1238 0112                                l1350 02F9  
                              l1342 02F2                                l1334 02E6  
                              l1326 02DE                                l1192 03D2  
                              l1184 03BE                                l1176 03AF  
                              l1168 039A                                l1264 01B9  
                              l1256 0181                                l1248 014E  
                              l1360 02FF                                l1352 02FA  
                              l1344 02F5                                l1336 02EB  
                              l1328 02E0                                l1194 03D5  
                              l1186 03C0                                l1178 03B3  
                              l1258 018F                                l1266 01BD  
                              l1370 0321                                l1362 0309  
                              l1354 02FB                                l1346 02F7  
                              l1338 02ED                                l1196 0444  
                              l1188 03CB                                l1380 0345  
                              l1372 0324                                l1364 030C  
                              l1356 02FC                                l1348 02F8  
                              l1198 0449                                l1382 034B  
                              l1374 032D                                l1366 0315  
                              l1358 02FE                                l1384 034F  
                              l1376 0330                                l1368 0318  
                              l1378 033F                 __end_of_CreateBreak 045B  
                              _main 02CB                                fsr0h 0005  
                              fsr1h 0007                                indf0 0000  
                              fsr0l 0004                                indf1 0001  
                              fsr1l 0006                                btemp 007E  
                              start 007D              MovePumpArm@switchValue 0068  
         CreateTurnLeftCommmand@pwm 0068                               ?_main 0070  
                             i1l121 02CA                               i1l204 007B  
                             i1l196 0041                               _RCREG 0119  
                             u52_20 01CA                               u60_20 001A  
                             u52_21 01C9                               u60_21 0019  
                             u61_20 0036                               u61_21 0035  
                             u61_25 0032                               u62_20 0045  
                             u62_21 0044                               u63_20 0054  
                             u63_21 0053                               u63_25 0050  
                             u64_20 0064                               u64_21 0063  
                             u64_25 0060                               u59_20 000B  
                             u59_21 000A                  _GetControllerInput 01C1  
                             _Break 00A7   __end_of_CreateMoveForwardCommmand 03B9  
         ??_CreateTurnRightCommmand 006A                               _drive 00B5  
               ?_GetControllerInput 0070                               status 0003  
                             wtemp0 007E                     __initialization 007F  
                      __end_of_main 0355                 _MoveBackwardCommand 00B1  
              ??_GetControllerInput 0072                              ??_main 006B  
                       _CreateBreak 0444                       ??_MovePumpArm 006A  
                            ?_drive 0070                              i1l1310 0272  
                            i1l1302 024E                              i1l1312 0283  
                            i1l1400 0039                              i1l1306 0260  
                            i1l1410 0064                              i1l1402 003E  
                            _RC5PPS 0F25                              i1l1316 0286  
                            i1l1412 0068                              i1l1404 0045  
                            i1l1414 0072                              i1l1406 0054  
                            i1l1272 01CB                              i1l1416 0079  
                            i1l1408 0056                              i1l1290 0218  
                            i1l1282 01F4                              i1l1274 01D0  
                            i1l1268 01C1                              i1l1438 028C  
                            i1l1294 022A                              i1l1286 0206  
                            i1l1278 01E2                              i1l1390 0013  
                            i1l1392 001A                              i1l1298 023C  
                            i1l1394 0021                              i1l1386 0006  
                            i1l1396 0028                              i1l1388 000B  
                            i1l1398 0036                        _ActivatePump 045B  
            _CreateTurnLeftCommmand 03F3                        __pdataCOMMON 007B  
           __end_of__initialization 00B1                 __end_of_MovePumpArm 0444  
                     ?_SetUpPumpArm 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 037A                        __pidataBANK1 0355  
                     __end_of_drive 01C1                    _TurnRightCommand 004E  
       ??_CreateMoveForwardCommmand 006A                             ??_drive 006A  
                        __pbssBANK0 0020                          __pbssBANK1 00C5  
                 __end_of_SetUpPump 047F               __end_of_CONTROL_INPUT 048F  
                    ??_SetUpPumpArm 0068                          __pmaintext 02CB  
                        __pintentry 0004          CreateTurnRightCommmand@pwm 0068  
             _CreateControlsCommand 040E                         _MovePumpArm 0429  
                           _Command 00DB       CreateMoveBackwardCommmand@pwm 0068  
         _CreateMoveForwardCommmand 039A                             __ptext1 00B5  
                           __ptext2 03D8                             __ptext3 03F3  
                           __ptext4 039A                             __ptext5 03B9  
                           __ptext6 040E                             __ptext7 0444  
                           __ptext8 046B                             __ptext9 0475  
      ??_CreateMoveBackwardCommmand 006A                          _myFunction 0004  
                        _inputStage 0046                        ?_CreateBreak 0070  
                           clrloop0 0486                end_of_initialization 00B1  
                           init_ram 047F                             initloop 0480  
           ?_CreateTurnLeftCommmand 0068                     myFunction@input 0077  
          ?_CreateTurnRightCommmand 0068             ActivatePump@switchValue 0068  
            ?_CreateControlsCommand 0070                __end_of_SetUpPumpArm 0475  
                         _TRISAbits 0011                           _TRISBbits 0012  
                         _TRISCbits 0013                     _TurnLeftCommand 0058  
                         _RXPPSbits 0ECB      __end_of_CreateTurnLeftCommmand 040E  
                     __pidataCOMMON 048B                         ?_myFunction 0070  
               start_initialization 007F                      _CONTROL_OUTPUT 007B  
                         _SetUpPump 0475                      _currentCommand 0036  
                       __pdataBANK0 0048                         __pdataBANK1 00A0  
   __end_of_CreateTurnRightCommmand 03F3                  _MoveForwardCommand 00BB  
__end_of_CreateMoveBackwardCommmand 03D8          _CreateMoveBackwardCommmand 03B9  
           _EnableLaserScopeCommand 00A0                         __pbssCOMMON 0079  
                         ___latbits 0002                       __pcstackBANK0 0068  
                      ?_MovePumpArm 0068                        _currentInput 0079  
                        ?_SetUpPump 0070             GetControllerInput@input 0070  
                         _commandIt 0044                            _LATAbits 0016  
                          _LATBbits 0017                           clear_ram0 0485  
                          _PIE3bits 0719                        _SetUpPumpArm 046B  
                     ?_ActivatePump 0068                            _PIR3bits 070F  
           ??_CreateControlsCommand 0068                            _Controls 00C5  
                       ??_SetUpPump 0068                       _CONTROL_INPUT 048D  
                    ??_ActivatePump 006A          __end_of_GetControllerInput 02CB  
      CreateMoveForwardCommmand@pwm 0068                         _SP1BRGLbits 011B  
                        _ANSELAbits 0F38                          _ANSELBbits 0F43  
                        _ANSELCbits 0F4E                        ??_myFunction 0075  
                          __ptext10 0429                            __ptext11 045B  
                          __ptext13 01C1                            _controls 0020  
                        _RC1STAbits 011D                  __end_of_myFunction 007D  
                          int$flags 007E         ?_CreateMoveBackwardCommmand 0068  
                        _INTCONbits 000B                            intlevel1 0000  
                _GetUserDataCommand 0062                       __pstringtext1 048D  
                        _TX1REGbits 011A                __end_of_ActivatePump 046B  
                     ??_CreateBreak 0068            ??_CreateTurnLeftCommmand 006A  
                        _TX1STAbits 011E             _CreateTurnRightCommmand 03D8  
                        _SWITCH_MID 0048                          _SWITCH_MAX 004C  
                        _SWITCH_MIN 004A  
